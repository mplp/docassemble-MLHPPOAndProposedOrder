include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.mlhframework:mlh_interview_framework.yml
  - review.yml
---
metadata:
  title: Personal Protection Order
  short title: Personal Protection Order
  subtitle: Helps you prepare the forms you will need to ask the court for a Personal Protection Order.
  description: |
    A Personal Protection Order (PPO) is one tool to help you stay safe. 

    You may also want to talk to an advocate from a domestic violence and/or sexual assault agency, who can help you make a safety plan. A safety plan is a list of ideas to help increase your safety that is individualized for you.
  tags:
    - "Family"
  authors:
    - Rami Lorca
---
features:
  labels above fields: True
---
sections:
  - signpost_intro: "Introduction"
  - review_petitioner_info: "Petitioner Information"
  - review_respondent_info: "Respondent Information"
  - review_abuse_history_info: "History of Abuse"
  - review_what_you_want_in_ppo_info: "What You Want in the PPO"
  - review_get_forms_info: "Get Your Forms"
  - review_full: "✎ <u>Review / Edit</u>"
---
code: |
  al_form_type = "other_form"
---
id: interview config code block
code: |
  github_repo_name = 'docassemble-MLHPPOAndProposedOrder' if get_config('debug') else 'docassemble-UserFeedback'
  MLH_court_forms = True
  MLH_time_min = 40
  MLH_time_max = 60
  MLH_case_type_language = 'The two-letter case type code will be PP, PH, or PJ.'
  MLH_esign_supported = True
  survey_link_url_only = "https://www.surveymonkey.com/r/3BXDW9M"
  MLH_form_type = "forms"
---
code: |
  if ppo_type == "domestic":
    has_whats_next_text = True
    whats_next_text_message = "Text 1700 to (734) 275-2201 to get text messages reminding you of deadlines and giving you information about what to do next to ask for a personal protection order."
  else:
    has_whats_next_text = False
---
code: |
  if ppo_type == "domestic":
    resource_page_url_only = "https://michiganlegalhelp.org/node/233/"
    resource_page_name = "Filing for a Personal Protection Order - Domestic Relationship"
  elif ppo_type == "nondomestic":
    resource_page_url_only = "https://michiganlegalhelp.org/node/272/"
    resource_page_name = "Filing for a Personal Protection Order - Non-Domestic Stalking"
  elif ppo_type == "nondomestic_sexual_assault":
    resource_page_url_only = "https://michiganlegalhelp.org/node/2373/"
    resource_page_name = "Filing for a Personal Protection Order - Non-Domestic Sexual Assault"
---
template: survey_embed_script
content: |
  <script>
    (function(t,e,s,n){var o,a,c;t.SMCX=t.SMCX||[],e.getElementById(n)||(o=e.getElementsByTagName(s),a=o[o.length-1],c=e.createElement(s),c.type="text/javascript",c.async=!0,c.id=n,c.src="https://widget.surveymonkey.com/collect/website/js/tRaiETqnLgj758hTBazgd782KAg15IQSF7hfzpppcaKLYPE5Lrp4hVW_2FtjqJHqCD.js",a.parentNode.insertBefore(c,a))})(window,document,"script","smcx-sdk");
  </script>
---
objects:
  - users: ALPeopleList.using(auto_gather=True, complete_attribute="complete", target_number=1)
  - user_alias: ALPeopleList.using(complete_attribute="complete")
  - user_alias_list: DAList.using(auto_gather=False)
  - other_party_alias: ALPeopleList.using(complete_attribute="complete")
  - other_party_alias_list: DAList.using(auto_gather=False)
  - next_friends: ALPeopleList.using(complete_attribute="complete")
  - other_parties: ALPeopleList.using(auto_gather=True, complete_attribute="complete", target_number=1)
  - children: ALPeopleList.using(ask_number=True, complete_attribute="complete")
  - petitioner_other_children: ALPeopleList.using(ask_number=True, complete_attribute="complete")
  - respondent_other_children: ALPeopleList.using(ask_number=True, complete_attribute="complete")
  - other_parties_parents: ALPeopleList.using(complete_attribute="complete", ask_number=True)
  - other_properties: ALAddressList.using(complete_attribute="complete")
  - ppo_harm_protectees: ALPeopleList.using(complete_attribute="complete")
  - ppo_harm_protectees_list: DAList.using(auto_gather=False)
  - ppo_threat_protectees: ALPeopleList.using(complete_attribute="complete")
  - ppo_threat_protectees_list: DAList.using(auto_gather=False)
  - ppo_sexual_assault_threat_protectees: ALPeopleList.using(complete_attribute="complete")
  - ppo_sexual_assault_threat_protectees_list: DAList.using(auto_gather=False)
  - pending_actions: DAList.using(object_type=DAObject, complete_attribute="complete")
  - orders_judgments: DAList.using(object_type=DAObject, complete_attribute="complete")
  - incidents: DAList.using(object_type=DAObject, complete_attribute="complete")
  - accounts: DAList.using(object_type=DAObject, complete_attribute="complete")
  - ETC_court_phones: DADict.using(auto_gather=False)
---
#################### Interview Order Start #####################
---
id: interview_order_ppo_and_proposed_order
mandatory: True
code: |
  snapshot_start
  nav.set_section('review_full')
  nav.set_section("signpost_intro")
  MLH_intro_landing
  MLH_intro_roles
  MLH_agree_terms
  MLH_intro_navigate_save
  if not PPO_agree_no_pii:
    MLH_intro_agree_no_pii_exit

  nav.set_section("review_petitioner_info")

  if is_incapacitated_adult:
    if next_friends.there_are_any:
      next_friends.gather()
      set_next_friend
      continue_as_next_friend_for_lii
    else:
      unauthorized_to_file_for_lii_kickout

  users.gather()

  petitioner_lives_in_michigan

  for user in users:
    user.birthdate

  check_if_petitioner_minor
  if petitioner_is_minor:
    if is_incapacitated_adult:
      inconsistent_age_kickout
    else:
      if petitioner_at_least_sixteen:
        petitioner_is_emancipated_minor

      if not petitioner_is_emancipated_minor:
        if next_friends.there_are_any:
          next_friends.gather()
          if next_friend_agrees_to_role:
            set_next_friend
          else:
            next_friend_role_kickout
        else:
          minor_kickout

  knows_respondents_birthdate

  check_if_respondent_minor
  if respondent_is_minor:
    if respondent_under_ten:
      minor_respondent_kickout
    if (not respondent_is_emancipated_minor):
      if respondent_is_petitioners_child:
        respondent_petitioners_child_kickout

  check_ages_correct

  set_relationship_choices

  ppo_type_info
  petitioner_respondent_relationship
  set_petitioner_respondent_relationship
  if parent_choice and petitioner_respondent_relationship['parent'] and petitioner_is_minor and not petitioner_is_emancipated_minor:
    petitioner_respondents_child_kickout
  if petitioner_respondent_relationship.all_false():
    if not sexual_assault_facts:
      if not has_two_separate_noncontinuous_incidents:
        no_applicable_PPO_type_kickout
  set_ppo_type
  check_if_any_protectees

  county_choice
  court_index
  the_court
  for user in users:
    if county_choice == "Oakland":
      if not wants_confidential_contact_details:
        safe_contact_info_notice
    else:
      safe_contact_info_notice
    user.address.address
    check_user_no_phone
    if user_alias.there_are_any:
      user_alias.gather()
    check_user_alias_list

  nav.set_section("review_respondent_info")
  respondent_intro_screen
  other_parties.gather()
  
  if ppo_type == "domestic":
    if respondent_is_minor and (not respondent_is_emancipated_minor):
      if all(not petitioner_respondent_relationship.get(key) for key in ['have_child', 'dating']):
        relationship_to_respondent_exp
    else:
      if all(not petitioner_respondent_relationship.get(key) for key in ['married', 'was_married', 'have_child', 'dating']):
        relationship_to_respondent_exp
  else:
    relationship_to_respondent_exp

  if other_party_alias.there_are_any:
    other_party_alias.gather()
  check_other_party_alias_list

  if respondent_is_minor:
    if (not respondent_is_emancipated_minor):
      other_parties_parents.gather()

  respondent_carries_firearm_for_work_asked

  if ppo_type == "domestic":
    enable_custody_review_screen
    domestic_ppo_children_intro
    if petitioner_respondent_relationship['have_child']:
      children.target_number
      children.gather()
      if any_child_has_PT:
        if desired_parenting_time_changes == "no_change_except_exchange":
          exchange_location        
    if petitioner_has_other_children:
      petitioner_other_children.gather()
    if respondent_has_other_children:
      if petitioner_knows_respondent_other_children_names:
        respondent_other_children.gather()

  if ppo_type != "nondomestic_sexual_assault":
    if pending_actions.there_are_any:
      pending_actions.gather()
    pending_actions_asked
    orders_judgments.gather()
    orders_judgments_asked

  nav.set_section("review_abuse_history_info")
  if ppo_type == "domestic":
    abuse_history_intro
    abuse_history_intro_2
    abuse_history_intro_3
    abuse_history_intro_4

  if ppo_type == "nondomestic":
    stalking_harassing_intro
    abuse_history_intro_2
    abuse_history_intro_3
    stalking_history_intro

  if ppo_type == "nondomestic_sexual_assault":
    sexual_assault_intro
    if respondent_sexual_assault_conviction or (petitioner_is_minor and obscene_material_conviction):
      orders_judgments.gather(minimum=1)
    else:
      orders_judgments.gather()
    orders_judgments_asked

    if pending_actions.there_are_any:
      pending_actions.gather()
    pending_actions_asked

  if ppo_type == "nondomestic":
    incidents.gather(minimum=2)
    other_details
  
  if ppo_type == "domestic":
    incidents.gather(minimum=1)
    other_details

  nav.set_section("review_what_you_want_in_ppo_info")
  relief_requested_intro

  if ppo_type == "domestic":
    if wants_no_entering_residential_property:
      if not petitioner_respondent_married:
        if not has_property_interest_in_home:
          if respondent_has_property_interest_in_home:
            cannot_prohibit_respondent_entering_property
    set_no_entering_residential_property
    if other_properties.there_are_any:
      other_properties.gather()
    check_wants_no_entering_other_property
    wants_no_harming_petitioner
    if ppo_harm_protectees.there_are_any:
      ppo_harm_protectees.gather()
    check_wants_no_harming_people
    check_ppo_harm_protectees_list
    wants_no_removing_minor

  if ppo_type == "nondomestic_sexual_assault":
    wants_no_entering_residential_property
    set_no_entering_residential_property
    
    if other_properties.there_are_any:
      other_properties.gather()
    check_wants_no_entering_other_property

    wants_no_sexual_assault_threats
    if ppo_sexual_assault_threat_protectees.there_are_any:
      ppo_sexual_assault_threat_protectees.gather()
    check_wants_no_sexual_assault_threatening_others
    check_ppo_sexual_assault_threat_protectees_list

  if ppo_type != "nondomestic_sexual_assault":
    no_stalking_choices
    set_stalking_options

  if ppo_type == "domestic":
    wants_no_children_property_removal_interference

  if ppo_type != "nondomestic_sexual_assault":
    wants_no_threatening_petitioner

  if ppo_type == "domestic":
    if ppo_threat_protectees.there_are_any:
      ppo_threat_protectees.gather()
    check_wants_no_threatening_others
    check_ppo_threat_protectees_list
    wants_no_work_education_interference
    wants_no_access_to_personal_info_records
    no_mental_distress_or_control_choices
    set_mental_distress_control_options

  wants_no_firearm_purchase_or_possession

  if ppo_type == "nondomestic_sexual_assault":
    wants_no_children_property_removal_interference
    wants_no_work_education_interference
    no_stalking_choices
    set_stalking_options

  if ppo_type != "domestic":
    wants_no_message_posting

  wants_other_request

  if county_choice == "Ingham" or county_choice == "Jackson" or county_choice == "Wayne" or county_choice == "Saginaw":
    ex_parte_required_county = True
    need_ex_parte
    set_ex_parte
  else:
    ex_parte_required_county = False
    if wants_ex_parte_order:
      ex_parte_yes_screen

  if exhibit_attachment.exhibits.has_exhibits:
    exhibit_attachment.exhibits.gather()

  nav.set_section("review_get_forms_info")
  if ETC_county_status == "optional":
    ETC_optional_info
  elif ETC_county_status == "required":
    ETC_required_info
    ETC_required_email_collect
    ETC_esign

  if ETC_county_status == "not_allowed" or ETC_county_status == "optional":
    if petitioner_is_minor and (not petitioner_under_fourteen) and (not petitioner_is_emancipated_minor):
      if fourteen_plus_agrees_to_sign:
        signature_date
      elif next_friend_agrees_to_sign:
        signature_date
    elif is_incapacitated_adult or (petitioner_is_minor and (not petitioner_is_emancipated_minor)):
      if next_friend_agrees_to_sign:
        signature_date
    else:
      if MLH_esign:
        signature_date
       
  if ETC_county_status == "not_allowed":
    MLH_outro_filing_information
    have_patience_download
    snapshot_download
    MLH_download
  else: 
    have_patience_download
    snapshot_download
    ETC_review_docs_screen
    ETC_review_exhibits
    clerk_email_prep
    if ETC_county_status == "optional":
      ETC_esign
    if clerk_email_sent_ok:
      snapshot_ETC
      email_status_sent
      ETC_success
    else:
      email_status_failed
      ETC_error

  interview_ppo_and_proposed_order = True
---
#################### Interview Order End #####################
---
#################### Other Code Blocks Start #####################
---
generic object: ALIndividual
code: |
  if x.no_phone_number:
    x.phone_number = "Unknown phone"
---
code: |
  if users[0].no_phone_number:
    users[0].phone_number = "Has no phone"
  else:
    users[0].phone_number = phone_number_formatted(users[0].phone_number)
  check_user_no_phone = True
---
code: |
  users.there_is_another = False
---
code: |
  next_friends.there_is_another = False
---
code: |
  other_parties.there_is_another = False
---
code: |
  if users[0].age_in_years() < 18:
    petitioner_is_minor = True
  else:
    petitioner_is_minor = False
  if users[0].age_in_years() < 14:
    petitioner_under_fourteen = True
  else:
    petitioner_under_fourteen = False
  if users[0].age_in_years() >= 16:
    petitioner_at_least_sixteen = True
  else:
    petitioner_at_least_sixteen = False
    petitioner_is_emancipated_minor = False
  check_if_petitioner_minor = True
---
code: |
  if knows_respondents_birthdate:
    if other_parties[0].age_in_years() < 18:
      respondent_is_minor = True
    else:
      respondent_is_minor = False
    if other_parties[0].age_in_years() < 10:
      respondent_under_ten = True
    else: 
      respondent_under_ten = False
  elif (not knows_respondents_birthdate):
    if other_parties[0].estimated_age < 18:
      respondent_is_minor = True
    else:
      respondent_is_minor = False
    if other_parties[0].estimated_age < 10:
      respondent_under_ten = True
    else: 
      respondent_under_ten = False
  else:
    respondent_is_minor = False

  check_if_respondent_minor = True
---
code: |
  if married_choice and petitioner_respondent_relationship['married']:
    petitioner_respondent_married = True
  else:
    petitioner_respondent_married = False

  if was_married_choice and petitioner_respondent_relationship['was_married']:
    petitioner_respondent_prev_married = True
  else:
   petitioner_respondent_prev_married = False

  if petitioner_respondent_relationship['have_child']:
    petitioner_respondent_have_child = True
  else:
    petitioner_respondent_have_child = False

  if petitioner_respondent_relationship['dating']:
    petitioner_respondent_dating = True
  else:
    petitioner_respondent_dating = False

  if petitioner_respondent_relationship['live_together'] or (parent_choice and petitioner_respondent_relationship['parent']):
    petitioner_respondent_share_household = True
  else:
    petitioner_respondent_share_household = False

  set_petitioner_respondent_relationship = True
---
code: |
  if (ppo_type == "domestic") and (petitioner_and_respondent_living_together):
    other_parties[0].address.address = users[0].address.address
    other_parties[0].address.unit = users[0].address.unit
    other_parties[0].address.city = users[0].address.city
    other_parties[0].address.state = users[0].address.state
    other_parties[0].address.zip = users[0].address.zip
  # other_parties[0].address.country = users[0].address.country
    
  check_other_party_address_set_to_user_address = True
---
code: |
  respondent_address_missing = False
  if other_parties[0].address.address == "" or other_parties[0].address.address == "_________________": 
    other_parties[0].address.address = "_________________"
    respondent_address_missing = True
  if other_parties[0].address.city == "" or other_parties[0].address.city == "_______________":
    other_parties[0].address.city = "_______________"
    respondent_address_missing = True
  if other_parties[0].address.state == "" or other_parties[0].address.state == "___":
    other_parties[0].address.state = "___"
    respondent_address_missing = True
  
  check_respondent_address_missing = True
---
code: |
  other_parties[0].height = str(other_parties[0].height_feet) + " ft, " + str(other_parties[0].height_inches) + " in"
---
code: |
  if other_parties[0].carries_gun_for_work == 'yes':
    respondent_carries_firearm_for_work_known = True

  if other_parties[0].carries_gun_for_work == 'unknown':
    respondent_carries_firearm_for_work_unknown = True

  respondent_carries_firearm_for_work_asked = True
---
code: |
  if len(pending_actions.complete_elements()) > 0:
    pending_actions_between_parties_yes = True
  else:
    pending_actions_between_parties_yes = False
    pending_actions_between_parties_no = True

  pending_actions_asked = True
---
code: |
  if pending_actions[i].court_name and pending_actions[i].court_county:
    pending_actions[i].court_info_line = str(pending_actions[i].court_name) + ", " + str(pending_actions[i].court_county)
  elif pending_actions[i].court_name:
    pending_actions[i].court_info_line = str(pending_actions[i].court_name)
  elif pending_actions[i].court_county:
    pending_actions[i].court_info_line = str(pending_actions[i].court_county)
  else:
    pending_actions[i].court_info_line = ""
---
code: |
  if len(orders_judgments.complete_elements()) > 0:
    orders_judgments_re_parties_yes = True
    orders_judgments_re_parties_no = False
  else:
    orders_judgments_re_parties_yes = False
    orders_judgments_re_parties_no = True

  orders_judgments_asked = True
---
code: |
  if orders_judgments[i].court_name and orders_judgments[i].court_county:
    orders_judgments[i].court_info_line = str(orders_judgments[i].court_name) + ", " + str(orders_judgments[i].court_county)
  elif orders_judgments[i].court_name:
    orders_judgments[i].court_info_line = str(orders_judgments[i].court_name)
  elif orders_judgments[i].court_county:
    orders_judgments[i].court_info_line = str(orders_judgments[i].court_county)
  else:
    orders_judgments[i].court_info_line = ""
---
code: |
  incidents.there_are_any = True
---
code: |
  other_properties.there_is_another = False
---
code: |
  if other_properties.there_are_any:
    wants_no_entering_other_property = True
  else:
    wants_no_entering_other_property = False
  check_wants_no_entering_other_property = True
---
code: |
  if wants_no_harming_petitioner or ppo_harm_protectees.there_are_any:
    wants_no_harming_people = True
  else:
    wants_no_harming_people = False
  
  check_wants_no_harming_people = True
---
code: |
  if defined('ppo_harm_protectees_list_temp'):
    ppo_harm_protectees_list_temp.clear()
  else:
    ppo_harm_protectees_list_temp = []

  if wants_no_harming_petitioner:
    if users[0] not in ppo_harm_protectees_list_temp:
      ppo_harm_protectees_list_temp.append(users[0].name_full())
  else:
    if users[0] in ppo_harm_protectees_list_temp:
      ppo_harm_protectees_list_temp.remove(users[0].name_full())

  if ppo_harm_protectees.there_are_any:
    for protectee in ppo_harm_protectees:
      if protectee not in ppo_harm_protectees_list_temp:
        ppo_harm_protectees_list_temp.append(protectee.name_full())
  
  ppo_harm_protectees_list.clear()

  ppo_harm_protectees_list = DAList(elements=ppo_harm_protectees_list_temp, auto_gather=False, gathered=True)

  check_ppo_harm_protectees_list = True
---
code: |
  if defined('user_alias_list_temp'):
    user_alias_list_temp.clear()
  else:
    user_alias_list_temp = []

  if user_alias.there_are_any:
    for alias in user_alias:
      if alias not in user_alias_list_temp:
        user_alias_list_temp.append(alias.name_full())
  
  user_alias_list.clear()

  user_alias_list = DAList(elements=user_alias_list_temp, auto_gather=False, gathered=True)

  check_user_alias_list = True
---
code: |
  if defined('other_party_alias_list_temp'):
    other_party_alias_list_temp.clear()
  else:
    other_party_alias_list_temp = []

  if other_party_alias.there_are_any:
    for alias in other_party_alias:
      if alias not in other_party_alias_list_temp:
        other_party_alias_list_temp.append(alias.name_full())
  
  other_party_alias_list.clear()

  other_party_alias_list = DAList(elements=other_party_alias_list_temp, auto_gather=False, gathered=True)

  check_other_party_alias_list = True
---
code: |
  if no_stalking_choices['following']:
    stalking_includes_following_appearing_in_sight = True
  else:
    stalking_includes_following_appearing_in_sight = False

  if no_stalking_choices['communications']:
    stalking_includes_sending_communications = True
  else:
    stalking_includes_sending_communications = False

  if no_stalking_choices['approaching']:
    stalking_includes_approaching_confronting_in_public = True
  else:
    stalking_includes_approaching_confronting_in_public = False

  if no_stalking_choices['entering_property']:
    stalking_includes_being_on_petitioners_property = True
  else:
    stalking_includes_being_on_petitioners_property = False

  if no_stalking_choices['placing_object']:  
    stalking_includes_leaving_object = True
  else:
    stalking_includes_leaving_object = False

  if no_stalking_choices['appear_work_residence']:  
    stalking_includes_appearing_at_petitioners_work = True
  else:
    stalking_includes_appearing_at_petitioners_work = False

  if no_stalking_choices['phone_contact']:  
    stalking_includes_phone_contact = True
  else:
    stalking_includes_phone_contact = False

  if no_stalking_choices.any_true():
    wants_no_stalking = True
  else:
    wants_no_stalking = False

  set_stalking_options = True
---
code: |
  if wants_no_threatening_petitioner or ppo_threat_protectees.there_are_any:
    wants_no_threatening_others = True
  else:
    wants_no_threatening_others = False
  check_wants_no_threatening_others = True
---
code: |
  if wants_no_sexual_assault_threats or ppo_sexual_assault_threat_protectees.there_are_any:
    wants_no_sexual_assault_threatening_others = True
  else:
    wants_no_sexual_assault_threatening_others = False
  
  check_wants_no_sexual_assault_threatening_others = True
---
code: |
  if defined('ppo_threat_protectees_list_temp'):
    ppo_threat_protectees_list_temp.clear()
  else:
    ppo_threat_protectees_list_temp = []

  if wants_no_threatening_petitioner:
    if users[0] not in ppo_threat_protectees_list_temp:
      ppo_threat_protectees_list_temp.append(users[0].name_full())
  else:
    if users[0] in ppo_threat_protectees_list_temp:
      ppo_threat_protectees_list_temp.remove(users[0].name_full())

  if ppo_threat_protectees.there_are_any:
    for protectee in ppo_threat_protectees:
      if protectee not in ppo_threat_protectees_list_temp:
        ppo_threat_protectees_list_temp.append(protectee.name_full())
  
  ppo_threat_protectees_list.clear()
  
  ppo_threat_protectees_list = DAList(elements=ppo_threat_protectees_list_temp, auto_gather=False, gathered=True)

  check_ppo_threat_protectees_list = True
---
code: |
  if defined('ppo_sexual_assault_threat_protectees_list_temp'):
    ppo_sexual_assault_threat_protectees_list_temp.clear()
  else:
    ppo_sexual_assault_threat_protectees_list_temp = []

  if wants_no_sexual_assault_threats:
    if users[0] not in ppo_sexual_assault_threat_protectees_list_temp:
      ppo_sexual_assault_threat_protectees_list_temp.append(users[0].name_full())
  else:
    if users[0] in ppo_sexual_assault_threat_protectees_list_temp:
      ppo_sexual_assault_threat_protectees_list_temp.remove(users[0].name_full())

  if ppo_sexual_assault_threat_protectees.there_are_any:
    for protectee in ppo_sexual_assault_threat_protectees:
      if protectee not in ppo_sexual_assault_threat_protectees_list_temp: 
        ppo_sexual_assault_threat_protectees_list_temp.append(protectee.name_full())

  ppo_sexual_assault_threat_protectees_list.clear()
  
  ppo_sexual_assault_threat_protectees_list = DAList(elements=ppo_sexual_assault_threat_protectees_list_temp, auto_gather=False, gathered=True)

  check_ppo_sexual_assault_threat_protectees_list = True
---
code: |
  if no_mental_distress_or_control_choices['harming_animal']:
    intentional_mental_distress_includes_animal_harm = True
  else:
    intentional_mental_distress_includes_animal_harm = False

  if no_mental_distress_or_control_choices['removing_animal']:
    intentional_mental_distress_includes_removing_animal = True
  else:
    intentional_mental_distress_includes_removing_animal = False

  if no_mental_distress_or_control_choices['keeping_animal']:
    intentional_mental_distress_includes_retaining_animal = True
  else:
    intentional_mental_distress_includes_retaining_animal = False
  
  if any(no_mental_distress_or_control_choices.get(key) for key in ['harming_animal', 'removing_animal', 'keeping_animal']):
    wants_no_intentional_mental_distress_or_control = True
  else:
    wants_no_intentional_mental_distress_or_control = False

  set_mental_distress_control_options = True
---
code: |
  if petitioner_respondent_relationship.any_true():
    ppo_type = "domestic"
    ppo_type_full = "Domestic"
  elif sexual_assault_facts:
    ppo_type = "nondomestic_sexual_assault"
    ppo_type_full = "Non-Domestic Sexual Assault"
  elif has_two_separate_noncontinuous_incidents:
    ppo_type = "nondomestic"
    ppo_type_full = "Non-Domestic"

  set_ppo_type = True
---
code: |
  if ppo_type == "nondomestic" or ppo_type == "nondomestic_sexual_assault":
    ppo_harm_protectees.there_are_any = False
    ppo_threat_protectees.there_are_any = False

  check_if_any_protectees = True
---
code: |
  if is_incapacitated_adult:
    has_next_friend_petitioning = True
  elif petitioner_is_minor and not petitioner_is_emancipated_minor:
    if next_friend_agrees_to_role:
      has_next_friend_petitioning = True
  else:
    has_next_friend_petitioning = False

  set_next_friend = True
---
code: |
  if ppo_type == "domestic":
    if wants_no_entering_residential_property:
      if not petitioner_respondent_married and not has_property_interest_in_home and respondent_has_property_interest_in_home:
        no_entering_residential_property = False
        cannot_prohibit_respondent_entering_property
      else:
        no_entering_residential_property = True
    else:
      no_entering_residential_property = False
  
  elif ppo_type == "nondomestic_sexual_assault":
    if wants_no_entering_residential_property:
      no_entering_residential_property = True
    else:
      no_entering_residential_property = False
  
  set_no_entering_residential_property = True
---
code: |
  if respondent_is_minor and (not respondent_is_emancipated_minor):
    parent_choice = False
    was_married_choice = False
    married_choice = False
  elif (not petitioner_is_minor) and respondent_is_minor and respondent_is_emancipated_minor:
    parent_choice = False
    married_choice = True
    was_married_choice = True
  else:
    parent_choice = True
    married_choice = True
    was_married_choice = True

  set_relationship_choices = True
---
code: |
  relationship_choices = list() 
  if married_choice:
    relationship_choices.append({'married':'I am married to them'})
  if was_married_choice:
    relationship_choices.append({'was_married':'I was once married to them'})
  relationship_choices.append({'have_child':'We have a child together'})
  relationship_choices.append({'live_together':'We live together or used to live together'})
  relationship_choices.append({'dating':'We dated or are dating'}) 
  if parent_choice: 
    relationship_choices.append({'parent':'They are my parent and we live together (or used to live together)'})
---
code: |
  if other_parties_parents[i].shares_respondent_address:
    other_parties_parents[i].address.address = other_parties[0].address.address
    other_parties_parents[i].address.unit = other_parties[0].address.unit
    other_parties_parents[i].address.city = other_parties[0].address.city
    other_parties_parents[i].address.state = other_parties[0].address.state
    other_parties_parents[i].address.zip = other_parties[0].address.zip

  set_shared_respondent_address = True
---
code: |
  if county_choice == "Ingham" or county_choice == "Jackson" or county_choice == "Wayne" or county_choice == "Saginaw":
    wants_ex_parte_order = True

  set_ex_parte = True
---
code: |
  if defined('relationship_to_respondent_exp'):
    if any(petitioner_respondent_relationship.get(key) for key in ['married', 'was_married', 'have_child', 'dating']):
      undefine('relationship_to_respondent_exp')
  else:
    if petitioner_respondent_relationship.any_true() and all(not petitioner_respondent_relationship.get(key) for key in ['married', 'was_married', 'have_child', 'dating']):
      relationship_to_respondent_exp
  
  reset_relationship_description = True
---
code: |
  if county_choice != "Oakland":
    undefine('wants_confidential_contact_details')
  else:
    if not defined('wants_confidential_contact_details'):
      wants_confidential_contact_details

  reset_confidential_contact_details = True
---
#################### Other Code Blocks End #####################
---
# NOTE: for users and other_parties
generic object: ALIndividual
code: |
  x.name.first
  x.complete = True
---
# sets court loader information
code: |
  filing_court = "circuit_only"
  ottawa_circuit_location = "Grand Haven"
---
code: |
  users[i].name.first
  users[i].complete = True
---
code: |
  user_alias[i].name.first
  user_alias[i].complete = True
---
code: |
  other_party_alias[i].name.first
  other_party_alias[i].complete = True
---
code: |
  next_friends[i].name.first
  next_friends[i].complete = True
---
code: |
  children[i].name.first
  children[i].lives_with
  if not children[i].parties_married_when_born and not children[i].unmarried_adoption and children[i].birthing_parent != "third_party":
    children[i].paternity
  if i < 1:
    if children[i].has_order_in_effect:
      children[i].custody_case_number
      children[i].physical_custody_by_order
      if children[i].parenting_time_order == "one_parent_supervised":
        children[i].who_has_supervised_time
      elif children[i].parenting_time_order == "one_parent_no_parenting_time":
        children[i].parent_without_parenting_time
    else:
      children[i].informal_PT  
    if children.target_number > 1:
      custody_parenting_time_provisions_same
  else:
    if not custody_parenting_time_provisions_same:
      if children[i].has_order_in_effect:
        children[i].custody_case_number
        children[i].physical_custody_by_order
        if children[i].parenting_time_order == "one_parent_supervised":
          children[i].who_has_supervised_time
        elif children[i].parenting_time_order == "one_parent_no_parenting_time":
          children[i].parent_without_parenting_time
      else:
        children[i].informal_PT  
  
  children[i].complete = True
---
code: |
  any_child_has_PT = False
  if len(children.complete_elements()) > 1 and custody_parenting_time_provisions_same:
    if children[0].has_order_in_effect or children[0].informal_PT:
      any_child_has_PT = True
  else:
    for child in children:
      if child.has_order_in_effect or child.informal_PT:
        any_child_has_PT = True
---
code: |
  if children.target_number > 1 and not custody_parenting_time_provisions_same:
    for child in children:
      if child.has_order_in_effect:
        child.custody_case_number
        child.physical_custody_by_order
        if child.parenting_time_order == "one_parent_supervised":
          child.who_has_supervised_time
        elif child.parenting_time_order == "one_parent_no_parenting_time":
          child.parent_without_parenting_time
      else:
        child.informal_PT
      
  gather_other_custody_info = True
---
only sets: enable_custody_review_screen
code: |
  special_custody_review_screen = True
  
  enable_custody_review_screen = True
---
code: |
  petitioner_other_children[i].name.first
  if petitioner_other_children[i].knows_other_child_birthdate:
    petitioner_other_children[i].birthdate
  else:
    petitioner_other_children[i].estimated_age

  petitioner_other_children[i].complete = True
---
code: |
  respondent_other_children[i].name.first
  if respondent_other_children[i].knows_other_child_birthdate:
    respondent_other_children[i].birthdate
  else:
    respondent_other_children[i].estimated_age

  respondent_other_children[i].complete = True
---
code: |
  other_parties[i].name.first
  if ppo_type == "domestic":
    if not petitioner_and_respondent_living_together:
      other_parties[i].address.address
    else:
      check_other_party_address_set_to_user_address
  else:
    other_parties[i].address.address
    check_respondent_address_missing
  other_parties[i].no_phone_number
  if ppo_type != "domestic":
    if respondent_address_missing and other_parties[0].no_phone_number:
      respondent_contact_info_kickout
  other_parties[i].race
  other_parties[i].gender
  other_parties[i].height_feet
  other_parties[i].height
  other_parties[i].weight
  other_parties[i].hair_color
  other_parties[i].eye_color
  other_parties[i].license_number
  other_parties[i].other_identifying_info
  other_parties[i].carries_gun_for_work
  other_parties[i].complete = True
---
reconsider:
  - set_shared_respondent_address
code: |
  other_parties_parents[i].name.first
  if ppo_type == "domestic":
    if not petitioner_and_respondent_living_together: 
      if other_parties_parents[i].shares_respondent_address:
        set_shared_respondent_address
      else:
        other_parties_parents[i].address.address
    else:
      other_parties_parents[i].address.address
  else:
    if other_parties_parents[i].shares_respondent_address:
      set_shared_respondent_address
    else:
      other_parties_parents[i].address.address
  if other_parties_parents[i].no_phone_number:
    other_parties_parents[i].phone_number = "Unknown phone"
  if other_parties_parents[i].address.on_one_line() == "":
    other_parties_parents[i].address.address = "Unknown address"
  if other_parties_parents[i].name.first == "":
    other_parties_parents[i].name.first = "[unknown]"
  if other_parties_parents[i].name.last == "":
    other_parties_parents[i].name.last = "[unknown]"
  other_parties_parents[i].complete = True
---
code: |
  pending_actions[i].docket_number
  pending_actions[i].court_name
  pending_actions[i].court_county
  pending_actions[i].court_state
  pending_actions[i].judge
  pending_actions[i].complete = True
---
code: |
  orders_judgments[i].docket_number
  orders_judgments[i].court_name
  orders_judgments[i].court_county
  orders_judgments[i].court_state
  orders_judgments[i].judge
  orders_judgments[i].complete = True
---
code: |
  if ppo_type == "nondomestic" and len(incidents.complete_elements()) > 0:
    incidents[i].nondomestic_subsequent_incident_intro
  incidents[i].date
  incidents[i].location
  incidents[i].other_party_actions
  if ppo_type == "nondomestic":
    incidents[i].reason_other_party_responsible
  incidents[i].emotional_effect
  if ppo_type == "domestic":
    incidents[i].petitioner_injured
  incidents[i].had_witnesses
  if incidents[i].had_police:
    incidents[i].police_report_info
  incidents[i].complete = True
---
code: |
  other_properties[i].address
  other_properties[i].complete = True
---
code: |
  ppo_harm_protectees[i].name.first
  ppo_harm_protectees[i].complete = True
---
code: |
  ppo_threat_protectees[i].name.first
  ppo_threat_protectees[i].complete = True
---
code: |
  ppo_sexual_assault_threat_protectees[i].name.first
  ppo_sexual_assault_threat_protectees[i].complete = True
---
code: |
  if is_incapacitated_adult:
    next_friends.there_are_any = True
  elif petitioner_is_minor:
    if not petitioner_is_emancipated_minor:
      next_friends.there_are_any = True

  reset_next_friend = True
---
code: |
  if not pending_actions.there_are_any:
    pending_actions.clear()
    pending_actions.there_are_any = False
    pending_actions_between_parties_no = True
    pending_actions_between_parties_yes = False
  else:
    pending_actions.there_are_any = True
    pending_actions_between_parties_yes = True
    pending_actions_between_parties_no = False

  update_pending_actions = True
---
code: |
  if ppo_type == "domestic":
    if len(incidents.complete_elements()) < 1:
      minimum_incidents_explainer
      incidents.gather(minimum=1)
  elif ppo_type == "nondomestic":
    if len(incidents.complete_elements()) < 2:
      minimum_incidents_explainer
      incidents.gather(minimum=2)

  check_minimum_incident_number = True
---
undefine:
  - minimum_incidents_explainer
code: |
  reset_minimum_incident_check = True
---
code: |
  if defined('petitioner_and_respondent_living_together'):
    if users[0].address.address == other_parties[0].address.address and \
    users[0].address.unit == other_parties[0].address.unit and \
    users[0].address.city == other_parties[0].address.city and \
    users[0].address.state == other_parties[0].address.state and \
    users[0].address.zip == other_parties[0].address.zip:
      petitioner_and_respondent_living_together = True
    else:
      petitioner_and_respondent_living_together = False

  check_parties_living_together = True
---
#################### Overridden AL Questions Start #####################
id: check ages correct
continue button field: check_ages_correct
continue button label: The age/birthdate information is correct
terms:
  Respondent: |
    The Respondent is the person you want to be protected from.
question: |
  Double-check the age/birthdate information you entered
subquestion: |
  **Your birthdate:** ${ users[0].birthdate }
  
  % if knows_respondents_birthdate:
    **Respondent's birthdate:** ${ other_parties[0].birthdate }[BR]
  % else:
    **Respondent's estimated age:** ${ other_parties[0].estimated_age }[BR]
  % endif

  The age/birthdate information you entered for yourself and the {respondent} cannot be edited later in the interview. Please make sure the information is correct before you continue. If the information is wrong, please tap **${ MLH_back_button_label }** and change them.
---
id: your name
sets:
  - users[0].name.first
  - users[0].name.middle
  - users[0].name.last
  - users[0].name.suffix
question: |
  Enter your name
fields:
  - code: |
      users[0].name_fields()
---
id: petitioner alias
sets:
  - user_alias[i].name.first
  - user_alias[i].name.middle
  - user_alias[i].name.last
  - user_alias[i].name.suffix
question: |
  Enter the ${ ordinal(i) } other name you have been known by
fields:
  - code: |
      user_alias[i].name_fields()
---
id: respondent alias
sets:
  - other_party_alias[i].name.first
  - other_party_alias[i].name.middle
  - other_party_alias[i].name.last
  - other_party_alias[i].name.suffix
question: |
  Enter the ${ ordinal(i) } other name ${ other_parties[0] } has been known by
fields:
  - code: |
      other_party_alias[i].name_fields()
---
id: petitioner contact info
sets:
  - users[0].address.address
  - users[0].address.city
  - users[0].address.zip
  - users[0].address.unit
  - users[0].address.state
  - users[0].phone_number
question: |
  % if county_choice == "Oakland" and wants_confidential_contact_details:
  Enter your address and phone number
  % else:
  Enter your address and a phone number where the court can reach you
  % endif
subquestion: |
  % if county_choice == "Oakland" and wants_confidential_contact_details:
  *Remember - this information will only appear on a confidential form that is filed with the court. The Respondent will not have access to this information.*
  % endif
fields:
  - code: |
      users[0].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE, show_country=False)
  - Phone: users[0].phone_number
    show if:
      variable: users[0].no_phone_number
      is: False
  - I do not have a phone number: users[0].no_phone_number
    required: False
    datatype: yesno
---
id: next friend name
sets:
  - next_friends[0].name.first
  - next_friends[0].name.middle
  - next_friends[0].name.last
  - next_friends[0].name.suffix
question: |
  % if is_incapacitated_adult:
  Enter your name
  % else:
  Enter the name of your next friend
  % endif
subquestion: |
  % if is_incapacitated_adult:
  As the person acting for the legally incapacitated person, you will be considered a **next friend**. 

  The next friend signs the petition for the petitioner, files the petition, goes to any hearings for the petitioner (if needed), and does everything else that is needed unless there is a lawyer.
  % else:
  Make sure that this person agrees to file your petition for you.

  ${ collapse_template(next_friend_explained) }
  % endif
fields:
  - code: |
      next_friends[0].name_fields()
---
id: respondent contact info
sets:
  - other_parties[0].address.address
  - other_parties[0].address.city
  - other_parties[0].address.zip
  - other_parties[0].address.unit
  - other_parties[0].address.state
question: |
  What is ${ other_parties[0].name }'s address?
subquestion: |
  % if ppo_type != "domestic":
  ${ collapse_template(respondent_address_explainer) }
  % endif
fields:
  - Street Address or P.O. Box: other_parties[0].address.address
    required: True if ppo_type == "domestic" else False
    address autocomplete: True
  - Apartment, suite, etc.: other_parties[0].address.unit
    required: False
  - City: other_parties[0].address.city
    required: True if ppo_type == "domestic" else False
  - State or Province: other_parties[0].address.state
    required: True if ppo_type == "domestic" else False
  # make dropdown to match other address screens (which default to dropdown when country not shown)
    code: |
      states_list(country_code=AL_DEFAULT_COUNTRY)
  - Zip or Postal Code: other_parties[0].address.zip
    required: False
  #- Country: other_parties[0].country
  #  required: False
---
template: respondent_address_explainer
subject: |
  What if I don't know the address?
content: |
  Fill in as much of ${ other_parties[0] }'s address as you are able to. If you aren't able to find out their home address, you can use the address of their job, if you know it. 

  In some counties, you may not be able to file your petition without an address and/or phone number for the respondent. If this is the situation in your county, the clerk will let you know.

  You will need the respondent's address to have them served with the PPO if the judge grants the order without a hearing. A PPO is effective and enforceable anywhere in Michigan as soon as it is signed by a judge. However, the police may not arrest ${ other_parties[0] } for violating the PPO until ${ other_parties[0] } has been served with it. In most situations it is best to have ${ other_parties[0] } served with the PPO as soon as possible after the judge issues it.

  If the judge denies your ex parte petition (this means a petition without a hearing), then you can request a hearing to provide more evidence about why you need a PPO. However, you must have an address for the respondent in order to request the hearing, so the respondent can be served with your petition and a notice of hearing.
---
id: respondent name
sets:
  - other_parties[0].name.first
  - other_parties[0].name.middle
  - other_parties[0].name.last
  - other_parties[0].name.suffix
question: |
  Enter the Respondent's name
fields:
  - code: |
      other_parties[0].name_fields()
---
id: respondent phone number
sets:
  - other_parties[0].phone_number
question: |
  Enter ${ other_parties[0].name }'s telephone number
fields:
  - Phone: other_parties[0].phone_number
    show if:
      variable: other_parties[0].no_phone_number
      is: False
  - I do not know of any phone number for ${ other_parties[0] }: other_parties[0].no_phone_number
    required: False
    datatype: yesno
---
id: respondent parent name
question: |
  Enter the name of ${ other_parties[0] }'s ${ ordinal(i) } parent, guardian, or custodian
subquestion: |
  If unknown, leave blank.
fields:
  - First name: other_parties_parents[i].name.first
    required: False
  - Middle name: other_parties_parents[i].name.middle
    required: False
  - Last name: other_parties_parents[i].name.last
    required: False
  - Suffix: other_parties_parents[i].name.suffix
    required: False
    # make dropdown to match other name screens (which use AL name_fields() method)
    code: |
      name_suffix()
---
id: respondent parent contact info
question: |
  % if other_parties_parents[i].name.first == "":
  What is ${ other_parties[0] }'s ${ ordinal(i) } parent's address?
  % else:
  What is ${ other_parties_parents[i] }'s address?
  % endif
subquestion: |
  If none or unknown, leave blank.
fields:
  - Street Address or P.O. Box: other_parties_parents[i].address.address
    required: False
    address autocomplete: True
  - Apartment, suite, etc.: other_parties_parents[i].address.unit
    required: False
  - City: other_parties_parents[i].address.city
    required: False
  - State: other_parties_parents[i].address.state
    required: False
  # make dropdown to match other address screens (which default to dropdown when country not shown)
    code: |
      states_list(country_code=AL_DEFAULT_COUNTRY)
  - Zip or Postal Code: other_parties_parents[i].address.zip
    required: False
  #- Country: other_parties_parents[i].country
  #  required: False
---
id: does respondent parent share address with respondent
question: |
  % if other_parties_parents[i].name.first == "":
  ${ other_parties[0] }'s ${ ordinal(i) } parent's address
  % else:
  ${ other_parties_parents[i] }'s address
  % endif
fields:
  - Does this parent or guardian have the same address as ${ other_parties[0].name }?: other_parties_parents[i].shares_respondent_address
    datatype: radio
    choices:
      - Yes: True
      - No, or I don't know: False
---
id: respondent parent phone number
sets:
  - other_parties_parents[i].phone_number
question: |
  % if other_parties_parents[i].name.first == "":
  Enter ${ other_parties[0] }'s ${ ordinal(i) } parent's telephone number
  % else:
  Enter ${ other_parties_parents[i] }'s telephone number
  % endif
subquestion: |
  If none or unknown, check the box.
fields:
  - Phone: other_parties_parents[i].phone_number
    show if:
      variable: other_parties_parents[i].no_phone_number
      is: False
  - I do not know their phone number: other_parties_parents[i].no_phone_number
    required: False
    datatype: yesno
---
id: children info
sets:
  - children[i].name.first
  - children[i].name.middle
  - children[i].name.last
  - children[i].name.suffix
question: |
  % if children.target_number > 1:
  Enter the ${ ordinal(i) } child's information
  % else:
  Enter the child's information
  % endif
fields:
  - code: |
      children[i].name_fields()
  - Birthdate: children[i].birthdate
    datatype: BirthDate
---
id: petitioner_other_children info
sets:
  - petitioner_other_children[i].name.first
  - petitioner_other_children[i].name.middle
  - petitioner_other_children[i].name.last
  - petitioner_other_children[i].name.suffix
question: |
  % if petitioner_other_children.target_number > 1:
  Enter the ${ ordinal(i) } other child's information
  % else:
  Enter the other child's information
  % endif
fields:
  - code: |
      petitioner_other_children[i].name_fields()
---
id: respondent_other_children info
sets:
  - respondent_other_children[i].name.first
  - respondent_other_children[i].name.middle
  - respondent_other_children[i].name.last
  - respondent_other_children[i].name.suffix
question: |
  % if respondent_other_children.target_number > 1:
  Enter ${ other_parties[0] }'s ${ ordinal(i) } other child's information
  % else:
  Enter ${ other_parties[0] }'s other child's information
  % endif
fields:
  - code: |
      respondent_other_children[i].name_fields()
---
id: who does child live with?
question: |
  ${ children[i] }'s residence
fields:
  - Who does ${ children[i].familiar() } currently live with?: children[i].lives_with
    datatype: radio
    choices:
      - With me: petitioner
      - With ${ other_parties[0] }: respondent
      - With someone else: someone_else
---
id: married when child born
question: |
  ${ children[i] }'s legal parents
fields:
  - Were you married to ${ other_parties[0] } when ${ children[i].familiar() } was born or conceived?: children[i].parties_married_when_born
    datatype: yesnoradio
    label above field: True
  - Did you and ${ other_parties[0] } **adopt ${ children[i].familiar() } together**? Only answer yes if neither of you gave birth to the child and you both adopted.: children[i].unmarried_adoption
    datatype: yesnoradio
    show if: 
      variable: children[i].parties_married_when_born
      is: False
  - Case number: children[i].adoption_case_number
    show if: 
      variable: children[i].unmarried_adoption
      is: True
  - Name of Court: children[i].adoption_case_court
    show if: 
      variable: children[i].unmarried_adoption
      is: True
  - Select the answer that applies to you: children[i].married_parents_detail
    datatype: radio
    choices:
      - ${ other_parties[0] } and I are both biological parents of ${ children[i].familiar() }.: marital_child
      - ${ other_parties[0] } and I both adopted ${ children[i].familiar() }.: married_adoption
      - Other: conceived_outside_marriage
    show if: 
      variable: children[i].parties_married_when_born
      is: True
  - Case number: children[i].adoption_case_number
    show if: 
      variable: children[i].married_parents_detail
      is: married_adoption
  - Name of Court: children[i].adoption_case_court
    show if: 
      variable: children[i].married_parents_detail
      is: married_adoption
  - Which one applies to you?: children[i].how_conceived
    datatype: radio
    choices:
      - ${ other_parties[0] } or I conceived the child through assisted reproductive technology.: assisted
      - ${ other_parties[0] } or I conceived the child through sex with someone who was not the other spouse.: extramarital
    show if:
      variable: children[i].married_parents_detail
      is: conceived_outside_marriage
  - note: |
      In Michigan, when a married person gives birth to a child:
      
      * the mother (or the person who gave birth) is automatically a legal parent, and
      * their {spouse} is also automatically a legal parent.
      
      If someone else (not the {spouse}) is the other **biological** parent, that biological parent has no parentage rights **unless**:
      
      * a judge signs a court order revoking the {spouse}'s parentage, and 
      * steps are taken to establish legal parentage of the biological parent. 
      
      If you want to learn more, visit [Revoking Paternity](https://michiganlegalhelp.org/resources/revoking-paternity). 
    show if:
      variable: children[i].how_conceived
      is: extramarital
  - note: |
      ${ collapse_template(why_ask_married) }
terms:
  spouse: |
    "Spouse" is another word for wife or husband.
---
template: why_ask_married
subject: |
  Why are you asking this?
content: |
  The judge may want to know whether you and/or ${ other_parties[0] } is a legal parent.

  You are **both** legal parents if:
  
  * you were married when ${ children[i].familiar() } was born or conceived, **or** 
  * you adopted ${ children[i].familiar() } together.

  If neither of these apply, we will ask about other ways of becoming legal parents.
---
id: custody or parenting time order
question: |
  Custody or parenting time orders
subquestion: |
  ${ collapse_template(custody_parenting_time_order_explained) }
fields:
  - Is there a custody or parenting time order in effect for ${ children[i].familiar() }?: children[i].has_order_in_effect
    datatype: yesnoradio
    label above field: True
---
template: custody_parenting_time_order_explained
subject: |
  More Information
content: |
  If there is a custody order, there is usually a parenting time provision in that order. 
  
  If the parents are divorced, the *Judgment of Divorce* should include custody and parenting time provisions for all children born during the marriage; this is one type of custody/parenting time order.
---
id: other property address
sets:
  - other_properties[0].address
  - other_properties[0].city
  - other_properties[0].zip
  - other_properties[0].unit
  - other_properties[0].state
  #- other_properties[0].country
question: |
  Enter the address of the other property
fields:
  - code: |
      other_properties[0].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE, show_country=False)
---
id: ppo_harm_protectees name
sets:
  - ppo_harm_protectees[i].name.first
  - ppo_harm_protectees[i].name.middle
  - ppo_harm_protectees[i].name.last
  - ppo_harm_protectees[i].name.suffix
question: |
  Provide the name of the ${ ordinal(i) } other person you want protected from assaults, attacks, beatings, molesting, or wounding
subquestion: |
  ${ collapse_template(harm_protectees_listed_so_far) }
fields:
  - code: |
      ppo_harm_protectees[i].name_fields()
---
id: ppo_threat_protectees name
sets:
  - ppo_threat_protectees[i].name.first
  - ppo_threat_protectees[i].name.middle
  - ppo_threat_protectees[i].name.last
  - ppo_threat_protectees[i].name.suffix
question: |
  Provide the name of the ${ ordinal(i) } other person you want protected from threats of physical injury or death
subquestion: |
  ${ collapse_template(threat_protectees_listed_so_far) }
fields:
  - code: |
      ppo_threat_protectees[i].name_fields()
---
id: ppo_sexual_assault_threat_protectees name
sets:
  - ppo_sexual_assault_threat_protectees[i].name.first
  - ppo_sexual_assault_threat_protectees[i].name.middle
  - ppo_sexual_assault_threat_protectees[i].name.last
  - ppo_sexual_assault_threat_protectees[i].name.suffix
question: |
  Provide the name of the ${ ordinal(i) } other person you want protected from threats of sexual assault, physical injury, or death
subquestion: |
  ${ collapse_template(ppo_sexual_assault_threat_protectees_listed_so_far) }
fields:
  - code: |
      ppo_sexual_assault_threat_protectees[i].name_fields()
---
#################### Overridden AL Questions End #####################
---
id: minimum incidents
undefine:
  - incidents.gathered
question: |
  You will need to add incidents
subquestion: |
  % if ppo_type == "domestic":
  Because you are filing a domestic PPO, you need to include **at least one previous incident** between yourself and ${ other_parties[0] }.
  % elif ppo_type == "nondomestic":
  Because you are filing a non-domestic PPO, you need to include **at least two previous incidents** between yourself and ${ other_parties[0] }.
  % endif
continue button field: minimum_incidents_explainer
---
id: describe relationship to respondent
question: |
  % if ppo_type == "domestic":
  Your relationship with ${ other_parties[0] }
  % else:
  Is ${ other_parties[0] } someone you know?
  % endif
subquestion: |
  Please explain. For example:

    % if ppo_type == "domestic":
    * "The respondent and I are siblings."
    * "The respondent and I used to be roommates. We are not related to each other."
    % else:
    * "I don't know the respondent. They are a stranger."
    * "The respondent is my neighbor."
    * "The respondent used to be my co-worker."
    % endif

  *Use complete sentences and proper punctuation. Your answer will appear in your forms exactly as you type it.*
fields:
  - Describe your relationship with ${ other_parties[0] }:: relationship_to_respondent_exp
    datatype: area
    show if:
      code: |
        ppo_type == "domestic"
  - Describe how you know ${ other_parties[0] }, if at all:: relationship_to_respondent_exp
    datatype: area
    show if:
      code: |
        ppo_type != "domestic"
---
id: petitioner alias there_are_any
question: |
  Your aliases
fields:
  - Have you ever been known by another name?: user_alias.there_are_any
    datatype: yesnoradio
---
id: petitioner alias there_is_another
question: |
  Your aliases
subquestion: |
  ${ collapse_template(user_alias_list_template) }
fields:
  - Do you have any other previous names to add?: user_alias.there_is_another
    datatype: yesnoradio
---
template: user_alias_list_template
subject: Which aliases have I listed so far?
content: |
  % if len(user_alias.complete_elements()) > 0:
  So far you have listed:

  % for alias in user_alias:

    * ${ alias }

  % endfor
  % else:
  You have not listed any aliases yet.
  % endif
---
id: respondent alias there_are_any
question: |
  ${ other_parties[0] }'s aliases
fields:
  - Has ${ other_parties[0] } ever been known by another name?: other_party_alias.there_are_any
    datatype: yesnomaybe
---
id: respondent alias there_is_another
question: |
  ${ other_parties[0] }'s aliases
subquestion: |
  ${ collapse_template(other_party_alias_list_template) }
fields:
  - Do you have any other previous names to add for ${ other_parties[0] }?: other_party_alias.there_is_another
    datatype: yesnoradio
---
template: other_party_alias_list_template
subject: Which aliases have I listed so far?
content: |
  % if len(other_party_alias.complete_elements()) > 0:
  So far you have listed:

  % for alias in other_party_alias:

    * ${ alias }

  % endfor
  % else:
  You have not listed any aliases yet.
  % endif
---
id: MLH intro landing FirstScreen
question: |
  ${ MLH_interview_short_title }
subquestion: |
  Welcome to the ${ MLH_interview_short_title } (PPO) tool. This tool will help you prepare the forms you will need to ask the court for a PPO.

  ${ collapse_template(process_info) }
  
  A PPO is one tool to help you stay safe. You may also want to talk to an advocate from a domestic violence and/or sexual assault agency, who can help you make a {safety plan}.

  ${ collapse_template(respondent_more_help_explained) }
continue button field: MLH_intro_landing
terms:
  safety plan: |
    A safety plan is a list of ideas to help increase your safety that is individualized for you.
---
template: respondent_more_help_explained
subject: |
  Where can I find more help?
content: |
  A domestic violence and/or sexual assault agency provides free and confidential support services to victims of domestic violence and/or sexual assault. To find an agency in your area, you can use the [Guide to Legal Help](https://michiganlegalhelp.org/guide-to-legal-help), or search under [Community Services](https://michiganlegalhelp.org/organizations-and-courts/community-services). You can also contact the [National Domestic Violence Hotline](https://www.thehotline.org/) at 1-800-799-SAFE or 1-800-787-3224 TTY.
---
template: process_info
subject: |
  How does this work?
content: |
  Your personalized ${ MLH_form_type } will be ready after you answer all the questions. This will probably take about **${ MLH_time_min } to ${ MLH_time_max } minutes**. 

  You will also get instructions for how to use the forms to ask the court for a PPO. To learn more about getting a PPO, read [Overview of Personal Protection Orders](https://michiganlegalhelp.org/resources/personal-safety/overview-of-personal-protection-orders).
---
id: intro roles
question: |
  Special words on PPO forms
subquestion: |
  On the court forms, you are the **Petitioner**, the person filing the petition. We are going to ask questions about you and the **Respondent**, who is the person you want to be protected from. 

  If you are under 18 years old and are not emancipated, you need a **"next friend"** to file your petition for you. You can still use this tool to prepare your forms.

continue button field: MLH_intro_roles
---
id: PPO specific PII
question: Private Information
subquestion: |
  To protect privacy, in general you cannot include personal identifying information in public court documents. Personal identifying information includes:
  
  * Date of birth
  * Social security or national identification number
  * Driver’s license or state identification number
  * Passport number
  * Financial account numbers

  Only include personal identifying information like dates of birth or a driver's license number if this tool specifically asks for it.
fields:
  - Do you understand that you should **not** enter personal identifying information **unless** this tool specifically asks for it?: PPO_agree_no_pii
    label above field: True
    datatype: yesnoradio
---
id: is petitioner legally incapacitated adult
question: |
  Legally incapacitated adult
fields:
  - Will you be filing this PPO petition on behalf of a legally incapacitated adult?: is_incapacitated_adult
    datatype: yesnoradio
    label above field: True
  - note: |
      ${ collapse_template(incapacitated_adult_explained) }
  - Have you been named the guardian of this person by court order **OR** do you have a power of attorney that allows you to file for them?: next_friends.there_are_any
    datatype: yesnoradio
    show if:
      variable: is_incapacitated_adult
      is: True
    label above field: True
---
template: incapacitated_adult_explained
subject: |
  What does this mean?
content: |
  Answer "Yes" if the person who **needs protection** is a legally incapacitated adult.

  A legally incapacitated adult is an adult who is unable to make their own informed decisions due to mental or physical illness or disability, or other causes. Only a legal guardian or someone with a valid Power of Attorney can file a PPO petition on behalf of a legally incapacitated adult.
  
  Answer "No" if you want a PPO to protect yourself, or if you are helping a child fill this out.
---
id: unauthorized to file for legally incapacitated adult kickout
event: unauthorized_to_file_for_lii_kickout
question: |
  You cannot continue using this tool
subquestion: |
  We're sorry, but you cannot use this tool to prepare a *Petition for Personal Protection Order*.

  Unless you have a guardianship or a power of attorney, you can’t file on behalf of another adult. 

  If you made a mistake, tap the **${ MLH_back_button_label }** button to go back and change your answer.
---
id: inconsistent age kickout
event: inconsistent_age_kickout
question: |
  You cannot continue using this tool
subquestion: |
  You previously indicated you were filling out this form on behalf of an incapacitated **adult**, but the date you entered for ${ users[0] }'s birthday makes them a **minor**.

  If you made a mistake, tap the **${ MLH_back_button_label }** button to go back and change your answers.
---
id: continue as next friend for incapacitated adult
question: |
  Continue answering for the petitioner
subquestion: |
  You will now continue answering questions **on behalf of the petitioner**. 

  This means that when a question says "you", it refers to the person asking for the PPO and **NOT you, the next friend**.

continue button field: continue_as_next_friend_for_lii
---
template: next_friend_explained
subject: |
  What does a next friend need to do?
content: |
  A next friend will need to:

    1. File your forms for you, which can sometimes be done online, but must sometimes be done in person;
    2. Arrange to have court papers delivered to the other party;
    3. Attend the hearing, if you have one, and speak on your behalf.

  Make sure that your next friend can do **all** of these things.
---
id: user birthdate
question: |
  Date of birth
fields:
  - Enter your date of birth: users[0].birthdate
    datatype: BirthDate
    required: True
---
id: emancipated minor
question: |
  Emancipated minor status
subquestion: |
  ${ collapse_template(emancipated_minor_explained) }
fields:
  - Are you an emancipated minor?: petitioner_is_emancipated_minor
    datatype: yesnoradio
---
template: emancipated_minor_explained
subject: |
  What does "emancipated" mean?
content: |
  An emancipated minor is a person under 18 years old whose parents no longer have legal authority over them. 

  Emancipation gives the minor some of the rights and responsibilities of an adult. Emancipation does not make a minor into an adult and does not give the minor adult status for all things. Sometimes a minor is automatically emancipated, and other times a minor is emancipated by a judge.

  If you are under 18 years old, you cannot file this petition unless you are emancipated. You need help from someone called a next friend. A next friend is usually a parent or other adult whom you trust. Your next friend must file the *Petition for Personal Protection Order* for you.
---
template: emancipated_respondent_minor_explained
subject: |
  What does "emancipated" mean?
content: |
  An emancipated minor is a person under 18 years old whose parents no longer have legal authority over them. 

  Emancipation gives the minor some of the rights and responsibilities of an adult. Emancipation does not make a minor into an adult and does not give the minor adult status for all things. Sometimes a minor is automatically emancipated, and other times a minor is emancipated by a judge.
---
id: next friend
question: |
  You need a next friend
subquestion: |
  If you are under 18 years old, you cannot get a PPO on your own. You need help from someone called a next friend. 

  A next friend is usually a **parent** or **other adult** whom you trust. Your next friend will file the PPO petition for you.

  ${ collapse_template(next_friend_explained) }

fields:
  - Will you have a next friend file this petition for you?: next_friends.there_are_any
    datatype: yesnoradio
---
id: minor_kickout
event: minor_kickout
question: |
  You cannot continue using this tool
subquestion: |
  We're sorry, but you cannot use this tool to prepare a *Petition for Personal Protection Order*.

  Because you are under 18 and not emancipated, you must have a next friend file your petition for you. 

  If you made a mistake, tap the **${ MLH_back_button_label }** button to go back and change your answer. To learn more, read [Minors and Personal Protection Orders](https://michiganlegalhelp.org/self-help-tools/personal-safety/minors-and-personal-protection-orders).
---
id: minor_respondent_kickout
event: minor_respondent_kickout
question: |
  You cannot continue using this tool
subquestion: |
  We're sorry, but you cannot use this tool to prepare a *Petition for Personal Protection Order*. Under Michigan law, you can't get a personal protection order against someone who is younger than 10 years old.

  If you made a mistake, tap the **${ MLH_back_button_label }** button to change your answer. To learn more, read [Minors and Personal Protection Orders](https://michiganlegalhelp.org/self-help-tools/personal-safety/minors-and-personal-protection-orders).
---
id: next friend agrees to role
question: |
  ${ next_friends[0] } must agree to be ${ users[0] }'s next friend
subquestion: |
  Before your *Petition for Personal Protection Order* can be filed, ${ next_friends[0] } must sign it. This tool can place ${ next_friends[0] }'s e-signature on the petition if they agree to it.

  ${ collapse_template(next_friend_explained) }

  Have ${ next_friends[0] } read (or read to them) the information above. Ask them if they agree to act as your next friend.

  **If ${ next_friends[0] } is not available** to ask right now, exit this tool and return when they are available.
fields:
  - Do YOU, ${ next_friends[0] }, agree to act as ${ users[0] }'s next friend?: next_friend_agrees_to_role
    datatype: yesnoradio
---
id: next friend role kickout
event: next_friend_role_kickout
question: |
  You cannot continue using this tool
subquestion: |
  Since ${ next_friends[0] } does not agree to act as ${ users[0] }'s next friend, this tool can’t be used.

  If ${ users[0] } wants to continue preparing PPO forms, they will need to find another adult who is willing to act as their next friend.

  If you made a mistake, tap the **${ MLH_back_button_label }** button to go back and change your answer.
---
id: next friend agrees to sign
question: |
  Next friend's signature
subquestion: |
  This tool can add "**/s/ ${ next_friends[0] }**" to the forms as an electronic signature. The court will accept this as ${ next_friends[0] }'s signature.
fields:
  - Does ${ next_friends[0] } agree to add their electronic signature to the forms now?: next_friend_agrees_to_sign
    datatype: yesnoradio
    label above field: True
under: |
  ${ collapse_template(signature_info_template) }

  ${ sign_in_message }
---
only sets: fourteen_plus_agrees_to_sign
id: minor 14 and up e-sign
question: |
  E-signatures
subquestion: |
  Because ${ users[0] } is over 14, they must sign the *Request for Next Friend*. The next friend, ${ next_friends[0] }, must sign the other forms.

  This tool can put "**/s/ ${ users[0] }**" and "**/s/ ${ next_friends[0] }**" where you would sign your names so you do not have to sign the forms by hand. The court will accept these electronic signatures.
fields:
  - Does ${ users[0] } agree to add their electronic signature to the *Request for Next Friend* now?: fourteen_plus_agrees_to_sign
    datatype: yesnoradio
  - Does the next friend, ${ next_friends[0] }, agree to add their electronic signature to the other forms now?: next_friend_agrees_to_sign
    datatype: yesnoradio
under: |
  ${ collapse_template(signature_info_template) }

  ${ sign_in_message }
---
template: signature_info_template
subject: |
  Are e-signatures required?
content: |
  % if ETC_county_status == "optional":
  E-signatures are required to use the direct e-mail filing option. Choose **Yes** to e-sign now. There will be another chance to e-sign later.

  % if petitioner_is_minor and (not petitioner_under_fourteen) and (not petitioner_is_emancipated_minor):
  If you're not going to use direct e-mail filing, ${ next_friends[0] } and ${ users[0] } can e-sign now or sign the forms after you download and print them.
  % elif is_incapacitated_adult or (petitioner_is_minor and (not petitioner_is_emancipated_minor)):
  If you're not going to use direct e-mail filing, ${ next_friends[0] } can e-sign now or sign the forms after you download and print them.
  % else:
  If you're not going to use direct e-mail filing, you can e-sign now or sign the forms yourself after you download and print them.
  % endif
  % elif ETC_county_status == "not_allowed":    
  The court will accept e-signatures or written signatures.

  If you **plan to e-file**, e-signing simplifies the process. Otherwise, you will need to print your forms and then scan signed copies before you can e-file.

  To find out **if you can e-file**, read [What is E-Filing?](https://michiganlegalhelp.org/resources/mifile/what-e-filing) The article tells you how to find out which courts have e-filing for which case types. 

  ${ MLH_case_type_language }
  % else:
  Yes. Because these forms will be e-mailed directly to the court, e-signatures are required. 
  % endif
---
# overriding version from ql_baseline
generic object: ALExhibitList
id: any exhibits
question: |
  % if ETC_county_status == "required":
  Attach any documents or photos you want the judge to see.
  % else:    
  Do you want to attach any documents or photos to show the judge?
  % endif
subquestion: |
  % if ETC_county_status == "required":
  If you have any documents you want to show the judge, attach them now. This could include things like:

  * Police reports
  * Medical records
  * Photos
  * Copies of e-mails or text messages
  * Letters

  % if is_incapacitated_adult:
  You **must** upload a copy of either the **guardianship order or Power of Attorney** that gives you authority to file for the petitioner.
  % endif

  % elif ETC_county_status == "optional":
  If you have any documents you want to show the judge, you can attach them now. This could include things like:

  * Police reports
  * Medical records
  * Photos
  * Copies of e-mails or text messages
  * Letters

  If you plan to file by direct e-mail from this tool, attach any documents now. If you plan to file in a different way, you can upload documents now or attach documents yourself outside of this tool.

  % if is_incapacitated_adult:
  Either way, you **must** file a copy of either the **guardianship order or Power of Attorney** that gives you authority to file for the petitioner.
  % endif
  % else:
  If you have any documents you want to show the judge, you can attach them now. This could include things like:

  * Police reports
  * Medical records
  * Photos
  * Copies of e-mails or text messages
  * Letters

  You can upload documents now or attach documents yourself outside of this tool.

  % if is_incapacitated_adult:
  Either way, you **must** file a copy of either the **guardianship order or Power of Attorney** that gives you authority to file for the petitioner.
  % endif
  % endif

  ${ collapse_template(no_documents) }
  ${ collapse_template(paper_documents) }
  ${ collapse_template(audiovisual_evidence) }
fields:
  - Do you have any documents you want to upload?: x.has_exhibits
    datatype: yesnoradio
  - note: |
      **Okay**. You can upload multiple documents. You can also add more pages to this document.

      ${ collapse_template(preferred_file_types) }
    show if: x.has_exhibits
  - First document title: x[0].title
    maxlength: 60 # longer might break TOC
    show if: x.has_exhibits
  - Upload the first document: x[0].pages
    show if: x.has_exhibits
    datatype: files
    maximum image size: 2048
    image upload type: jpeg
    accept: |
      "image/png, image/jpeg, .doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/pdf,.pdf"
validation code: |
  if x.has_exhibits:
    full_size = sum(a_page.size_in_bytes() for a_page in x[0].pages)
    if full_size > (15 * 1024 * 1024):
      validation_error("Upload a file smaller than 15 MB.")
    if hasattr(x, 'maximum_size'):
      if full_size > x.maximum_size:
        validation_error(f"Upload a file smaller than {humanize.naturalsize(x.maximum_size)}")
    try:
      pdf_concatenate(x[0].pages)
    except:
      validation_error("Unable to convert this file. Please upload a new one.")
    x[0].pages.complete_attribute = 'ok'
    x[0].pages.reset_gathered()  # docassemble sets this attribute but we want to force gathering additional pages
---
# overriding version from ql_baseline
generic object: ALExhibitList
id: exhibit i has additional pages
question: |
  Add more pages to "**${ x[i] }**"?
subquestion: |
  % if hasattr(x, 'maximum_size'):
  The total size of all exhibits must be less than ${ humanize.naturalsize(x.maximum_size) }.
  You can upload ${ humanize.naturalsize(x.maximum_size - x.size_in_bytes() - sum(ap.size_in_bytes() for ap in x[i].pages.complete_elements()))} more.
  % endif

  ${ collapse_template(x[i].in_progress_template )}
  
fields: 
  - Do you want to add more pages to "**${ x[i] }**"?: x[i].pages.there_is_another
    datatype: radio
    choices:
      - Yes, I want to add more pages to "${ x[i] }".: True
      - No, there are no more pages to add to "${ x[i] }".: False
    label above field: True
---
# overriding version from ql_baseline (only changed max image size)
sets:
  - x[i].pages[j].initialized
  - x[i].pages[j].mimetype
  - x[i].pages[j].ok
generic object: ALExhibitList
id: exhibit additional page
question: |
  Upload the ${ ordinal(j) } part of your ${ x[i].title } document
subquestion: |
  ${ collapse_template(preferred_file_types) }
fields:
  - Upload a PDF, Word, or image file: x[i].pages[j]
    datatype: file
    maximum image size: 2048
    image upload type: jpeg
    accept: |
      "image/png, image/jpeg, .doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/pdf,.pdf"   
validation code: |
  page_size = x[i].pages[j].size_in_bytes()
  if page_size > (15 * 1024 * 1024):
    validation_error("Upload a file smaller than 15 MB.")
  if hasattr(x, 'maximum_size'):
    # this_doc_size already includes `page_size`
    this_doc_size = sum(a_page.size_in_bytes() for a_page in x[i].pages.complete_elements())
    full_size = x.size_in_bytes() + this_doc_size
    if full_size > x.maximum_size:
      suggested_size = x.maximum_size - (full_size - page_size)
      validation_error(f"All exhibits combined must be smaller than {humanize.naturalsize(x.maximum_size)}. Upload a file smaller than {humanize.naturalsize(suggested_size)}.")
  try:
    pdf_concatenate(x[i].pages[j])
  except:
    validation_error("Unable to convert this file. Please upload a new one.")

  x[i].pages[j] = unpack_dafilelist(x[i].pages[j])
---
# overriding version from ql_baseline
generic object: ALExhibitList
id: another exhibit
question: |
  You have ${ x.number_gathered() } document(s) so far. Do you want to upload another document?
subquestion: |
  % if hasattr(x, 'maximum_size'):
  The total size of all exhibits must be less than ${ humanize.naturalsize(x.maximum_size) }.
  You can upload ${ humanize.naturalsize(x.maximum_size - x.size_in_bytes())} more.
  % endif

  ${ collapse_template(x.in_progress_exhibits) }
fields: 
  - Upload another document?: x.there_is_another
    datatype: radio
    choices:
      - Yes, I want to add another.: True
      - No, I'm done adding documents.: False
    label above field: True
---
# overriding version from ql_baseline (only changed max image size and text)
generic object: ALExhibitList
id: exhibit i
question: |
  Upload the ${ ordinal(i) } document
subquestion: |
  You will have a chance to upload more pages for this document later.

  ${ collapse_template(preferred_file_types) }
fields:
  - Document title: x[i].title
    maxlength: 60 # longer might break TOC
  - Upload the exhibit: x[i].pages
    datatype: files
    maximum image size: 2048
    image upload type: jpeg
    accept: |
      "image/png, image/jpeg, .doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/pdf,.pdf"   
validation code: |
  this_doc_size = sum(a_page.size_in_bytes() for a_page in x[i].pages)
  if this_doc_size > (15 * 1024 * 1024):
    validation_error("Upload a file smaller than 15 MB.")
  if hasattr(x, 'maximum_size'):
    full_size = x.size_in_bytes()
    if full_size > x.maximum_size:
      suggested_size = x.maximum_size - (full_size - this_doc_size)
      validation_error(f"All exhibits combined must be smaller than {humanize.naturalsize(x.maximum_size)}. Upload a file smaller than {humanize.naturalsize(suggested_size)}.")
  try:
    pdf_concatenate(x[i].pages)
  except:
    validation_error("Unable to convert this file. Please upload a new one.")
  x[i].pages.reset_gathered()  # docassemble sets this attribute but we want to force gathering additional pages
---
template: audiovisual_evidence
subject: |
  What if I have **audio or video** evidence?
content: |
  Save any audio or video evidence you have. If there will be a hearing for your case, you can submit the audio or video evidence to the court directly.
---
template: no_documents
subject: |
  What if **don't** have any documents to attach?
content: |
  Even if you don't have any documents to attach, you can still file your petition. The judge shouldn't deny a petition just because you don't have any documents to attach.
---
template: paper_documents
subject: |
  How do I upload a **paper document**?
content: |
  Scan paper documents using a **scanner app** on your phone or a **physical scanner** to create clean PDF copies. 

  Examples of free scanner apps are Adobe Scan, Google Drive, or Apple Notes. (We do not recommend any specific software. You can create PDFs in other ways as well.) Some libraries also have scanners.
---
template: preferred_file_types
subject: |
  File type tips
content: |
  If possible, upload documents as PDFs to help avoid issues. In many cases, "save", "print", "download", or "share" options include a way to create a PDF. To learn more, read [Working with PDF Files](https://michiganlegalhelp.org/resources/mifile/working-pdf-files). 

  Scan paper documents with a scanner app or a physical scanner to create clean PDF copies.

  It's OK to upload photos or screenshots from phones.

  Accepted file types: PDF, JPG, PNG, and word-processing files such as DOCX.
---
id: petitioner or respondent living in michigan
question: |
  Connection to Michigan
fields:
  - Do you live in Michigan?: petitioner_lives_in_michigan
    datatype: yesnoradio
  - Does the Respondent (the person you want to be protected from) live in Michigan?: respondent_lives_in_michigan
    datatype: yesnoradio
    label above field: True
under: |
  ${ collapse_template(Michigan_connection) }

  ${ sign_in_message }
validation code: |
  if not petitioner_lives_in_michigan and not respondent_lives_in_michigan:
    validation_error("To use this tool, at least one of you must live in Michigan.", field='respondent_lives_in_michigan')
---
template: Michigan_connection
subject: |
  What if neither of us lives in Michigan?
content: |
  To use this tool, at least one of you must live in Michigan. If neither of you live in Michigan, return to [Michigan Legal Help](https://michiganlegalhelp.org) for other legal resources.
---
id: respondent birthdate
question: |
  Respondent's date of birth
terms:
  Respondent: |
    The Respondent is the person you want to be protected from.
fields:
  - Do you know the {Respondent}'s exact date of birth?: knows_respondents_birthdate
    datatype: yesnoradio
    label above field: True
  - Enter the Respondent's date of birth: other_parties[0].birthdate
    datatype: BirthDate
    show if:
      variable: knows_respondents_birthdate
      is: True
    label above field: True
  - Even if you do not know the Respondent's exact date of birth, you must provide your best guess of their age: other_parties[0].estimated_age
    datatype: integer
    show if:
      variable: knows_respondents_birthdate
      is: False
    label above field: True
---
id: petitioner other child birthdate
question: |
  ${ petitioner_other_children[i] }'s date of birth
fields:
  - Do you know ${ petitioner_other_children[i].familiar() }'s date of birth?: petitioner_other_children[i].knows_other_child_birthdate
    datatype: yesnoradio
    label above field: True
  - What is ${ petitioner_other_children[i].familiar() }'s date of birth?: petitioner_other_children[i].birthdate
    datatype: BirthDate
    show if:
      variable: petitioner_other_children[i].knows_other_child_birthdate
      is: True
    label above field: True
  - What is ${ petitioner_other_children[i].familiar() }'s approximate age?: petitioner_other_children[i].estimated_age
    show if:
      variable: petitioner_other_children[i].knows_other_child_birthdate
      is: False
    label above field: True
---
id: respondent other child birthdate
question: |
  ${ respondent_other_children[i] }'s date of birth
fields:
  - Do you know ${ respondent_other_children[i].familiar() }'s date of birth?: respondent_other_children[i].knows_other_child_birthdate
    datatype: yesnoradio
    label above field: True
  - What is ${ respondent_other_children[i].familiar() }'s date of birth?: respondent_other_children[i].birthdate
    datatype: BirthDate
    show if:
      variable: respondent_other_children[i].knows_other_child_birthdate
      is: True
    label above field: True
  - What is ${ respondent_other_children[i].familiar() }'s approximate age?: respondent_other_children[i].estimated_age
    required: False
    show if:
      variable: respondent_other_children[i].knows_other_child_birthdate
      is: False
    label above field: True
  - note: |
      *If you don't know, you can leave this blank.*
    show if:
      variable: respondent_other_children[i].knows_other_child_birthdate
      is: False
---
id: respondent emancipated minor
question: |
  Respondent's status as minor
subquestion: |
  ${ collapse_template(emancipated_respondent_minor_explained) }
fields:
  - Is the {Respondent} an emancipated minor?: respondent_is_emancipated_minor
    datatype: yesnoradio
  - Is the {Respondent} your child?: respondent_is_petitioners_child
    datatype: yesnoradio
    show if:
      variable: respondent_is_emancipated_minor
      is: False
terms:
  Respondent: |
    The Respondent is the person you want to be protected from.
---
id: need respondent parents
question: |
  We need more information about ${ other_parties[0] }
subquestion: |
  Because ${ other_parties[0] } is an unemancipated minor, both ${ other_parties[0] } and their parents, guardians, or custodians must be served with your petition for a personal protection order.
continue button field: need_respondent_parents
---
id: ppo type info
question: |
  Type of Personal Protection Order (PPO)
subquestion: |
  In Michigan, there are three kinds of PPO. On the next few screens, we will ask questions to figure out if there is a PPO type that fits your situation. 

  ${ collapse_template(ppo_types_explained) }
continue button field: ppo_type_info
---
template: ppo_types_explained
subject: |
  Want more information about the different types of PPOs?
content: |
  1. Personal Protection Order - **Domestic Relationship.** You **must** use this PPO type if you have or had a domestic relationship with the {Respondent}. A domestic relationship means:

    * You are/were married to the Respondent
    * You are dating/dated the Respondent
    * You live/lived with the Respondent
    * You have one or more children with the Respondent

  2. A Personal Protection Order - **Nondomestic Sexual Assault** is for someone who does **not** have a domestic relationship with the Respondent.

      A nondomestic sexual assault personal protection order is used to protect someone from sexual assault and/or threats of sexual assault.

  3. A Personal Protection Order - **Nondomestic** is for someone who does **not** have a domestic relationship with the Respondent.

      A nondomestic personal protection order is used to protect someone from stalking or harassing behavior.
terms:
  Respondent: |
    The Respondent is the person you want to be protected from.
---
id: sexual assault facts
question: |
  Sexual assault 
fields:
  - "Has the {respondent} sexually assaulted you or threatened to sexually assault you?": sexual_assault_facts
    datatype: yesnoradio
  - note: |
      OK, you will fill out the forms to request a **Nondomestic Sexual Assault** PPO.
    show if:
      variable: sexual_assault_facts
      is: True
terms:
  Respondent: |
    The Respondent is the person you want to be protected from.
---
id: two or more noncontinuous incidents
terms:
  Respondent: |
    The Respondent is the person you want to be protected from.
question: |
  Stalking or harassment
subquestion: |
  Based on your answers, the only type of PPO that might be right for you is a nondomestic PPO. To qualify for a nondomestic PPO, there must be **two or more separate, noncontinuous incidents** where the {respondent} **stalked or harassed you**.
  
  ${ collapse_template(separate_noncontinuous_incidents_explained) }
fields:
  - Were there two or more **separate**, **noncontinuous** incidents where the {respondent} stalked or harassed you?: has_two_separate_noncontinuous_incidents
    datatype: yesnoradio
    label above field: True
  - note: |
      OK, you will fill out the forms to request a **Nondomestic** PPO.
    show if:
      variable: has_two_separate_noncontinuous_incidents
      is: True
---
template: separate_noncontinuous_incidents_explained
subject: |
  What are separate, noncontinuous incidents?
content: |
  There must be at least two separate, noncontinuous incidents of stalking or harassing behavior in order to get a nondomestic PPO. This means that the respondent’s actions against you had to be separate from one another in time and space. Actions that are part of a single event are not separate and noncontinuous. 

  For example, if the respondent approached you, physically harmed you, and then made a verbal threat — and these actions followed immediately one after the other — this would count as only one incident of stalking or harassment, and would not be enough to get a nondomestic PPO.
---
id: no applicable PPO type kickout
event: no_applicable_PPO_type_kickout
question: |
  We're sorry, your answers indicate you don't qualify for a Michigan PPO.
subquestion: |
  To get a Michigan PPO:

  * you must have a domestic relationship with the {respondent}, or
  * the {respondent} must have sexually assaulted you, or threatened to do so, or 
  * there must be two separate, noncontinuous incidents of stalking or harassing behavior.
  
  Read the article [Overview of Personal Protection Orders ](https://michiganlegalhelp.org/resources/personal-safety/overview-of-personal-protection-orders) to learn about different kinds of PPOs.

  Tap the **${ MLH_back_button_label }** button to go back and change your answers if one of the PPO types applies to you. Otherwise, return to [Michigan Legal Help](https://michiganlegalhelp.org) for other legal resources.
terms:
  Respondent: |
    The Respondent is the person you want to be protected from.
---
reconsider: relationship_choices
id: relationship to respondent
question: |
  What kind of relationship do/did you have with the Respondent, if any?
fields:
  - Select **all** that apply: petitioner_respondent_relationship
    datatype: checkboxes
    code: |
      relationship_choices
  - note: |
      OK, you will fill out the forms to request a **Domestic** PPO.
    js show if: |
      val("petitioner_respondent_relationship['married']") || val("petitioner_respondent_relationship['was_married']") || val("petitioner_respondent_relationship['have_child']") || val("petitioner_respondent_relationship['live_together']") || val("petitioner_respondent_relationship['dating']") || val("petitioner_respondent_relationship['parent']")
under: |
  ${ collapse_template(what_if_no_domestic_relationship) }

  ${ sign_in_message }
---
template: what_if_no_domestic_relationship
subject: |
  What if none of these options apply?
content: |
  If you have never had a domestic relationship with the {Respondent}, select "None of the above." Then tap **Continue** to see if you can request a different type of PPO.
terms:
  Respondent: |
    The Respondent is the person you want to be protected from.
---
id: relationship to respondent kickout
question: |
  You cannot continue using this tool
subquestion: |
  We're sorry, but if you don't have a domestic relationship with the Respondent, you cannot use this tool to prepare a Petition for a domestic relationship *Personal Protection Order*.

  There are different forms available if you need protection from someone who is stalking or harassing you, or from someone who has sexually assaulted you. Read the article [Overview of Personal Protection Orders](https://michiganlegalhelp.org/resources/personal-safety/overview-of-personal-protection-orders) to learn if there is a different kind of protection order for you.

  If you made a mistake, tap the **${ MLH_back_button_label }** button to go back and change your answer.
---
id: ppo court county_choice
question: |
  In what county will you file your PPO case?
subquestion: |
  % if respondent_is_minor and (not respondent_is_emancipated_minor) and (not respondent_is_petitioners_child) and petitioner_lives_in_michigan and respondent_lives_in_michigan:
  You may file your PPO case either in: 
  
  * **your county of residence** or 
  * **the {Respondent}'s county of residence**.
  % elif respondent_is_minor and (not respondent_is_emancipated_minor) and (not respondent_is_petitioners_child) and (not petitioner_lives_in_michigan) and respondent_lives_in_michigan:
  Because the Respondent is a minor and you do not live in Michigan, you need to file your PPO case in the county **where the {Respondent} lives**.

  ${ collapse_template(unknown_minor_respondent_county) }
  % elif respondent_is_minor and (not respondent_is_emancipated_minor) and (not respondent_is_petitioners_child) and petitioner_lives_in_michigan and (not respondent_lives_in_michigan):
  Because the Respondent is a minor and does not live in Michigan, you must file your PPO case in the county **where you live**.
  % else:
  You may file your PPO case in any county in Michigan. However, it will probably be most convenient for you to file either where you live or where the {Respondent} lives, because there may be future hearings to attend.

  If the Respondent doesn’t know what county you live in and you want to keep your location a secret, it’s probably best to file in a different county.
  % endif
fields:
  - Select the county you will file your PPO case in: county_choice
    code: court_list._load_courts()["address_county"].unique()
terms:
  Respondent: |
    The Respondent is the person you want to be protected from.
---
code: |
  if defined('county_choice') and (respondent_is_minor and (not respondent_is_emancipated_minor) and (not respondent_is_petitioners_child)) and (not petitioner_lives_in_michigan or not respondent_lives_in_michigan):
    county_check_minor_respondent

  county_check_minor_respondent_done = True
---
continue button field: county_check_minor_respondent
id: county_choice check after edits for minor respondent
question: |
  Make sure you can file in your selected county
subquestion: |  
  % if respondent_is_minor and (not respondent_is_emancipated_minor) and (not respondent_is_petitioners_child) and (not petitioner_lives_in_michigan) and respondent_lives_in_michigan:
  You said you **don't** live in Michigan and ${ other_parties[0] } does live in Michigan.
  
  Because ${ other_parties[0] } is a minor, you need to file your PPO case in the county **where ${ other_parties[0] } lives**.

  Right now, you have selected **${ county_choice }** as your filing county. If that is not where ${ other_parties[0] } lives, please edit the Court Where You Will File this Petition on the next screen.

  ${ collapse_template(unknown_minor_respondent_county) }
  % elif respondent_is_minor and (not respondent_is_emancipated_minor) and (not respondent_is_petitioners_child) and petitioner_lives_in_michigan and (not respondent_lives_in_michigan):
  You said you live in Michigan and ${ other_parties[0] } **does not** live in Michigan.
  
  You must file your PPO case in the county **where you live**.

  Right now, you have selected **${ county_choice }** as your filing county. If that is not where you live, please edit the Court Where You Will File this Petition on the next screen.
  % endif
---
id: oakland confidential address option
question: |
  Do you want to keep your contact information confidential?
subquestion: |
  In Oakland County, you can choose to keep your address and/or phone number confidential instead of having them on your petition and order. 
  **If the Respondent does not know this information and you would like to keep it confidential, answer Yes below.**

  If you answer **Yes**, your address and phone number will only appear on a confidential form that you will need to file with the court. 
  Your petition and PPO will both say “confidential” in the section where your address and phone number would normally go.

  This is important because if the judge grants your PPO, the Respondent will need to be served with a copy of the petition and order and 
  will see your address and phone number on these forms if you do not keep them confidential.
fields:
  - Would you like to keep your address and phone number confidential?: wants_confidential_contact_details
    datatype: yesnoradio
---
id: unknown respondent residence county kickout
event: unknown_respondent_residence_county_kickout
question: |
  You cannot continue using this tool
subquestion: |
  Based on your answers, you can't use this tool to prepare a *Petition for Personal Protection Order*. If you do not know the county of residence for a respondent who is a minor, there are complicated legal issues that you will need a lawyer to help you with. Use the [Guide to Legal Help](https://michiganlegalhelp.org/guide-to-legal-help) to find a lawyer or legal services in your area.

  If you made a mistake, tap the **${ MLH_back_button_label }** button to go back and change your answer.
---
template: unknown_minor_respondent_county
subject: |
  What if I don't know what county the Respondent lives in?
content: |
  If you cannot provide the Respondent's county of residence, you cannot use this tool to prepare a *Petition for Personal Protection Order*.

  If you do not know the county of residence for a respondent who is a minor, there are complicated legal issues that you will need a lawyer to help you with.  

  Use the [Guide to Legal Help](https://michiganlegalhelp.org/guide-to-legal-help) to find a lawyer or legal services in your area.
---
id: respondent is petitioners child kickout
event: respondent_petitioners_child_kickout
question: |
  You cannot continue using this tool
subquestion: |
  We're sorry, but you cannot use this tool to prepare a *Petition for a Personal Protection Order*. Under Michigan law, you cannot get a personal protection order against your unemancipated minor child.

  To learn more, read [Minors and Personal Protection Orders](https://michiganlegalhelp.org/resources/personal-safety/minors-and-personal-protection-orders).

  If you made a mistake, tap the **${ MLH_back_button_label }** button to go back and change your answer.
---
id: petitioner is unemancipated minor child of respondent kickout
event: petitioner_respondents_child_kickout
question: |
  You cannot use this tool to request a PPO. Here are more options.
subquestion: |
  We're sorry, but you cannot use this tool to prepare a *Petition for a Personal Protection Order*. PPOs are not for problems between children and their parents. You can’t get a PPO against your parent unless you are an emancipated minor. However, you can be protected from a parent by a PPO the court gives your **other parent**. 

  If you are a minor who is being abused by a parent, contact [Children's Protecive Services](https://www.michigan.gov/mdhhs/adult-child-serv/abuse-neglect) at **855-444-3911**, or call your local police.

  **If you are in immediate danger, call 911.**

  If you made a mistake, tap the **${ MLH_back_button_label }** button to go back and change your answer.
---
id: safe_contact_info_notice
question: |
  For the following, please enter a **SAFE** address and phone number where the court can contact you
subquestion: |
  **DO NOT** enter an address or phone number that you want to keep confidential, because the address and phone number will be part of the court file and will be on the forms given to the Respondent.

  If you don't want the Respondent to know your current address and phone number, you can use a post office box or the address and telephone number of a relative or friend who has agreed to let you do this.

continue button field: safe_contact_info_notice
---
id: respondent intro screen
question: |
  Now we're going to ask you questions about the Respondent, the person you want to be protected from
subquestion: |
  Answer the questions as best you can. If you don't know the exact answers, in most places it is OK to estimate or to give the best information you have.
continue button field: respondent_intro_screen
---
id: petitioner and respondent living together
question: |
  Shared home
fields:
  - Do you and ${ other_parties[0].name.first } live together?: petitioner_and_respondent_living_together
    datatype: yesnoradio
---
id: respondent race
question: |
  Enter ${ other_parties[0].name }'s race
fields:
  - Choose one: other_parties[0].race
    choices:
      - White, not Hispanic or Latino: White
      - Hispanic or Latino: Hispanic/Latino
      - American Indian or Alaskan Native: American Indian/AK Native
      - Asian: Asian
      - African American: African American
      - Native Hawaiian or Other Pacific Islander: HI Native/Pacific Islander
      - Other race: Other
---
id: respondent gender
question: |
  Enter ${ other_parties[0].name }'s gender
fields:
  - Choose one: other_parties[0].gender
    datatype: radio
    choices:
      - Female: F
      - Male: M
      - Nonbinary: X
---
id: respondent height
question: |
  Enter ${ other_parties[0].name }'s approximate height
subquestion: |
  ${ collapse_template(respondent_height_explained) }
fields:
  - Feet: other_parties[0].height_feet
    datatype: integer
    required: True
  - Inches: other_parties[0].height_inches
    datatype: integer
    required: True
    max: 11
---
template: respondent_height_explained
subject: |
  What if I don't know an exact height?
content: |
  An exact height is not required. Provide your best guess.
---
id: respondent weight
question: |
  Enter ${ other_parties[0].name }'s approximate weight in pounds (lbs)
subquestion: |
  ${ collapse_template(respondent_weight_explained) }
fields:
  - Weight: other_parties[0].weight
    datatype: integer
---
template: respondent_weight_explained
subject: |
  What if I don't know an exact weight?
content: |
  An exact weight is not required. Provide your best guess.
---
id: respondent hair color
question: |
  Enter ${ other_parties[0].name }'s hair color
subquestion: |
  If unknown, select "Unknown."
fields:
  - Choose one: other_parties[0].hair_color
    choices:
      - Bald: Bald
      - Black: Black
      - Blonde or Strawberry: Blonde
      - Brown: Brown
      - Gray or Partially Gray: Gray
      - Red or Auburn: Red
      - Sandy: Sandy
      - White: White
      - Unknown: Unknown
---
id: respondent eye color
question: |
  Enter ${ other_parties[0].name }'s eye color
subquestion: |
  If unknown, select "Unknown."
fields:
  - Choose one: other_parties[0].eye_color
    choices:
      - Black: Black
      - Blue: Blue
      - Brown: Brown
      - Gray: Gray
      - Green: Green
      - Hazel: Hazel
      - Unknown: Unknown
---
id: respondent license number
question: |
  ${ other_parties[0].name }'s driver's license number
subquestion: |
  If none or unknown, leave blank.
fields:
  - Enter ${ other_parties[0].name }'s driver's license number: other_parties[0].license_number
    required: False
---
mandatory: True
id: respondent other identifying info
question: |
  Other identifying information
fields:
  - note: |
      <div id="show_maxlength"> </div>
  - In 50 characters or less, describe any other identifying information about ${ other_parties[0].name }, such as scars or tattoos, if any.: other_parties[0].other_identifying_info
    required: False
    label above field: True
    maxlength: 50
  - note: |
      If none, leave blank.
script: |
  <script>
  $(document).ready(function() {
      var inputField = $('#b3RoZXJfcGFydGllc1swXS5vdGhlcl9pZGVudGlmeWluZ19pbmZv');
      var maxLength = 50;
      var inputLength = inputField.val().length;
      var remainingChars = maxLength - inputLength;
      $('#show_maxlength').text(remainingChars + " " + pluralizeWord("character", "characters", remainingChars) + " remaining").css('font-weight', '500');

      inputField.on('input', function() {
        inputLength = $(this).val().length;
        remainingChars = maxLength - inputLength;
        if (remainingChars < 0) {
          $('#show_maxlength').text("You are over the limit by " + Math.abs(remainingChars) + " " + pluralizeWord("character", "characters", Math.abs(remainingChars))).css('font-weight', '500').css('color', 'red');
        } else {
          $('#show_maxlength').text(remainingChars + " " + pluralizeWord("character", "characters", remainingChars) + " remaining").css('font-weight', '500').css('color', 'black');
        }
      });
  });

  function pluralizeWord(singularWord, pluralWord, count) {
    return count == 1 ? singularWord : pluralWord;
  }
  </script>
---
id: respondent required to carry gun for work
question: |
  Gun possession
fields:
  - Is ${ other_parties[0].name } required to carry a gun for work?: other_parties[0].carries_gun_for_work
    datatype: radio
    choices:
      - Yes: yes
      - No: no
      - I don't know: unknown
---
if: ppo_type != "domestic" and respondent_address_missing and other_parties[0].no_phone_number
id: respondent contact info kickout
event: respondent_contact_info_kickout
question: |
  We're sorry, but you cannot use this tool to prepare your forms.
subquestion: |
  Either the Respondent's **address** or **phone number** must be provided in order to inform them of your petition for a protection order.

  If you made a mistake, tap the **${ MLH_back_button_label }** button to go back and change your answer.
---
id: is there parental info for respondent
question: |
  ${ other_parties[0].name }'s parents, guardians, or custodians
subquestion: |
  If you know or can easily find out the names and addresses of ${ other_parties[0].name }'s parent(s), guardian(s), or custodian(s), the judge needs that information.
fields:
  - Do you have information about ${ other_parties[0].name }'s parents, guardians, or custodians?: other_parties_parents.target_number
    label above field: True
    datatype: radio
    choices:
      - No: 0
      - Yes, I have information about **one** parent, guardian, or custodian: 1
      - Yes, I have information about **two** parents, guardians, or custodians: 2
---
id: petitioner's other children
question: |
  Your other children
fields:
  - Do you have any children living in your home who are **not** the children of the respondent?: petitioner_has_other_children
    help: |
      For example: stepchildren or adopted children.
    datatype: yesnoradio
    label above field: True
---
id: respondent's other children
question: |
  ${ other_parties[0] }'s other children
fields:
  - Does ${ other_parties[0] } have any children living in their home who are **not** your children?: respondent_has_other_children
    help: |
      For example: stepchildren or adopted children.
    datatype: yesnomaybe
    label above field: True
---
id: domestic ppo children intro
question: |
  Next, you will need to enter information about any children that you or ${ other_parties[0] } have.
continue button field: domestic_ppo_children_intro
---
id: minor children in common target_number
question: |
  Number of children
subquestion: |
  *Minor children are children who are under 18 years old.*
fields:
  - How many **minor** children do you and ${ other_parties[0] } have in common?: children.target_number
    datatype: integer
    min: 1
    label above field: True
---
id: petitioner's other children target_number
question: |
  Number of other children
fields:
  - How many other children are living in your home who are not the children of the respondent?: petitioner_other_children.target_number
    datatype: integer
    min: 1
    label above field: True
---
if: respondent_has_other_children
id: petitioner knows names of respondent's other children
question: |
  Names of ${ other_parties[0] }'s other children
fields:
  - Do you know the names of ${ other_parties[0] }'s other children?: petitioner_knows_respondent_other_children_names
    datatype: yesnoradio
    label above field: True
---
id: respondent's other children target_number
question: |
  Number of other children
fields:
  - How many other children are living in ${ other_parties[0] }'s home who are **not** also your children?: respondent_other_children.target_number
    datatype: integer
    min: 1
    label above field: True
---
id: custody and parenting time order
if: children[i].has_order_in_effect
question: |
  Custody and parenting time order for ${ children[i] }
subquestion: |
  A personal protection order will affect any custody and parenting time order that is currently in effect. 
  Please answer the following questions to help the court decide what arrangements should be made.
fields:
  - Enter the case number on your custody and parenting time order (if you were divorced, this will be your divorce case number.): children[i].custody_case_number
    label above field: True
  - Enter the name of the court where the case was filed: children[i].custody_case_court
    label above field: True
---
id: who has physical custody
if: children[i].has_order_in_effect
question: |
  Who has physical custody over ${ children[i] }?
subquestion: |
  ${ collapse_template(custody_explained) }
fields:
  - According to the court order: children[i].physical_custody_by_order
    datatype: radio
    choices:
      - I have sole physical custody: sole_petitioner
      - ${ other_parties[0] } has sole physical custody: sole_respondent
      - I and ${ other_parties[0] } have joint physical custody: joint_custody
---
template: custody_explained
subject: |
  How do I know?
content: |
  Your court order should say who has physical custody. Physical custody refers to a child's living arrangements. If the parties share roughly equal parenting time, usually the parents have joint physical custody. If you are not sure who has physical custody, look at your court order before you answer this question.
---
id: what does the court order say about parenting time
if: children[i].has_order_in_effect
question: |
  What does the court order for ${ children[i] } say about parenting time?
fields:
  - Select the response that best describes your court order: children[i].parenting_time_order
    datatype: radio
    choices:
      - The order does not include a specific schedule with days and times. It says there will be “reasonable parenting time.”: reasonable_parenting_time
      - The order lists specific days and times for parenting time.: specific_times
      - The order gives one of the parents supervised parenting time.: one_parent_supervised
      - One of us does not have any parenting time with the child.: one_parent_no_parenting_time
---
id: same custody and PT order provisions for all children?
if: children.target_number > 1 and children[0].has_order_in_effect
question: |
  Provisions for other children
subquestion: |
  You told us about the custody and parenting time provisions for ${ children[0] }.
fields:
  - Are custody and parenting time the same for all your children with ${ other_parties[0] }?: custody_parenting_time_provisions_same
    datatype: radio
    choices:
      - Yes: True
      - No, at least one child has **no custody/parenting time order** or has a court order that says **something different** about parenting time.: False
    label above field: True
---
id: same informal PT plan for all children?
if: children.target_number > 1 and not children[0].has_order_in_effect and children[0].informal_PT
question: |
  Provisions for other children
subquestion: |
  You told us about the informal parenting time arrangement for ${ children[0] }.
fields:
  - Does the same informal parenting time arrangement apply to all your children with ${ other_parties[0] }?: custody_parenting_time_provisions_same
    datatype: radio
    choices:
      - Yes, the **same** informal parenting time arrangement applies to **all the children**.: True
      - No, at least one child has a **custody order** or a **different** informal arrangement.: False
    label above field: True
---
id: no order or informal PT for any child?
if: children.target_number > 1 and not children[0].has_order_in_effect and not children[0].informal_PT
question: |
  Provisions for other children
subquestion: |
  You said there is **no** custody order and **no** informal parenting time arrangement for ${ children[0] }.
fields:
  - Do any of your **other children** with ${ other_parties[0] } have a custody order or informal parenting time arrangement?: custody_parenting_time_provisions_same
    datatype: radio
    choices:
      - Yes, **at least one child** has a custody order or informal parenting time arrangement.: False
      - No, **none** of the children have a custody order or informal parenting time arrangement.: True
    label above field: True
---
if: any_child_has_PT and desired_parenting_time_changes == "no_change_except_exchange"
id: parenting time exchange location for all children
question: |
  Location of parenting time exchanges
fields:
  - Where do you want parenting time exchanges (pick-ups and drop-offs) to take place?: exchange_location
    datatype: radio
    choices:
      - Police Department: police
      - Other: other
    label above field: True
  - Enter the name of the police department where you would like to have parenting time exchanges: exchange_police_department_location
    show if:
      variable: exchange_location
      is: "police"
    label above field: True
  - Enter the location where you would like parenting time exchanges to take place: exchange_other_location
    show if:
      variable: exchange_location
      is: "other"
    label above field: True
---
id: who has supervised parenting time
if: children[i].has_order_in_effect and children[i].parenting_time_order == "one_parent_supervised"
question: |
  Supervised parenting time for ${ children[i] }
fields:
  - Who has supervised parenting time?: children[i].who_has_supervised_time
    datatype: radio
    choices:
      - I do: petitioner
      - ${ other_parties[0] } does: respondent
  - Who is parenting time supervised by?: children[i].who_supervises_parenting_time
---
id: who does not have parenting time
if: children[i].has_order_in_effect and children[i].parenting_time_order == "one_parent_no_parenting_time"
question: |
  Supervised parenting time for ${ children[i] }
fields:
  Who does **not** have parenting time?: children[i].parent_without_parenting_time
  datatype: radio
  choices:
    - Me: petitioner
    - ${ other_parties[0] }: respondent
---
if: not children[i].parties_married_when_born and not children[i].unmarried_adoption
id: who gave birth to child
question: |
  ${ children[i] }'s legal parents
fields:
  - Who gave birth to ${ children[i] }?: children[i].birthing_parent
    datatype: radio
    choices:
      - I did: petitioner
      - ${ other_parties[0] } did: respondent
      - Someone else did: third_party 
  - Please explain:: children[i].third_party_birthing_parent_exp
    input type: area
    show if:
      variable: children[i].birthing_parent
      is: "third_party"
  - note: |
      Examples:
      
      * "We had our child through a surrogacy agreement. We are both legal parents."
      * "My ex-wife gave birth to this child while I was married to her. The respondent later adopted the child through a step-parent adoption."
    show if:
      variable: children[i].birthing_parent
      is: "third_party"
  - note: |
      ${ collapse_template(why_ask_birthing_parent) }
---
template: why_ask_birthing_parent
subject: |
  Why are you asking this?
content: |
  The judge may want to know whether you and/or ${ other_parties[0] } is a legal parent.
  
  First we ask who gave birth to ${ children[i].familiar() } because that person is usually a legal parent. It also helps us make follow-up questions a little simpler.
---
if: not children[i].parties_married_when_born and not children[i].unmarried_adoption and children[i].birthing_parent == "petitioner"
id: child paternity
terms:
  parentage: |
    Establishing "parentage" makes someone a legal parent. This is sometimes also called **paternity**.
question: |
  ${ other_parties[0] }'s legal parentage status
subquestion: |
  Since you gave birth to ${ children[i].familiar() }, you are their legal parent. 
  
  ${ other_parties[0] } is also a legal parent **if** {parentage} was established. Parentage is often established with an *Affidavit of Parentage* or a court order.
fields:
  - Has ${ other_parties[0] }'s {parentage} been legally established?: children[i].paternity
    datatype: radio
    choices:
      - Yes: paternity_established
      - A parentage or adoption case has been filed and is pending. (There is no court order yet.): paternity_pending
      - "No, parentage has not been established.": paternity_not_established
  - Where was {parentage} established?: children[i].paternity_established_where
    label above field: False
    datatype: radio
    choices:
      - In Michigan: Michigan
      - In another state or country: out_of_state
    show if:
      variable: children[i].paternity
      is: paternity_established
  - Where was the case filed?: children[i].paternity_pending_where
    label above field: False
    datatype: radio
    choices:
      - In Michigan: Michigan
      - In another state or country: out_of_state
    show if:
      variable: children[i].paternity
      is: paternity_pending
  - State or country where {parentage} was established: children[i].state_of_paternity
    show if:
      variable: children[i].paternity_established_where
      is: out_of_state
  - State or country where {parentage} is pending: children[i].state_of_paternity
    show if:
      variable: children[i].paternity_pending_where
      is: out_of_state
  - Case number: children[i].paternity_case_number
    show if: 
      variable: children[i].paternity_pending_where
      is: Michigan
  - Name of Court: children[i].paternity_case_court_name
    show if: 
      variable: children[i].paternity_pending_where
      is: Michigan
  - "{Parentage} of ${ children[i].familiar() } was established by:": children[i].paternity_how
    show if:
      variable: children[i].paternity_established_where
      is: Michigan
    datatype: radio
    choices:
      - an *Affidavit of Parentage* (also called an "Acknowledgment of Parentage"): by_acknowledgment_of_parentage
      - "a paternity or parentage order (examples: *Order of Filiation, Judgment of Parentage*)": by_court_order
      - "an adoption (examples: stepparent adoption, confirmatory adoption)": by_adoption
  - note: |
      ${ collapse_template(parentage_affidavit_explained) }
    show if: 
      variable: children[i].paternity_established_where
      is: Michigan
  - Case number: children[i].paternity_case_number
    show if:
      variable: children[i].paternity_how
      is: by_court_order
  - Name of Court: children[i].paternity_case_court_name
    show if:
      variable: children[i].paternity_how
      is: by_court_order
  - Case number: children[i].adoption_case_number
    show if: 
      variable: children[i].paternity_how
      is: by_adoption
  - Name of Court: children[i].adoption_case_court
    show if: 
      variable: children[i].paternity_how
      is: by_adoption
---
if: not children[i].parties_married_when_born and not children[i].unmarried_adoption and children[i].birthing_parent == "respondent"
id: child paternity
terms:
  parentage: |
    Establishing "parentage" makes someone a legal parent. This is sometimes also called **paternity**.
question: |
  Your legal parentage status
subquestion: |
  Since ${ other_parties[0] } gave birth to ${ children[i].familiar() }, ${ other_parties[0].familiar() } is ${ children[i].familiar() }'s legal parent. 
  
  You are also a legal parent **if** {parentage} was established. Parentage is often established with an *Affidavit of Parentage* or a court order.
fields:
  - Has your {parentage} been legally established?: children[i].paternity
    datatype: radio
    choices:
      - Yes: paternity_established
      - A parentage or adoption case has been filed and is pending. (There is no court order yet.): paternity_pending
      - "No, parentage has not been established.": paternity_not_established
  - Where was {parentage} established?: children[i].paternity_established_where
    label above field: False
    datatype: radio
    choices:
      - In Michigan: Michigan
      - In another state or country: out_of_state
    show if:
      variable: children[i].paternity
      is: paternity_established
  - Where was the case filed?: children[i].paternity_pending_where
    label above field: False
    datatype: radio
    choices:
      - In Michigan: Michigan
      - In another state or country: out_of_state
    show if:
      variable: children[i].paternity
      is: paternity_pending
  - State or country where {parentage} was established: children[i].state_of_paternity
    show if:
      variable: children[i].paternity_established_where
      is: out_of_state
  - State or country where {parentage} is pending: children[i].state_of_paternity
    show if:
      variable: children[i].paternity_pending_where
      is: out_of_state
  - Case number: children[i].paternity_case_number
    show if: 
      variable: children[i].paternity_pending_where
      is: Michigan
  - Name of Court: children[i].paternity_case_court_name
    show if: 
      variable: children[i].paternity_pending_where
      is: Michigan
  - "{Parentage} of ${ children[i].familiar() } was established by:": children[i].paternity_how
    show if:
      variable: children[i].paternity_established_where
      is: Michigan
    datatype: radio
    choices:
      - an *Affidavit of Parentage* (also called an "Acknowledgment of Parentage"): by_acknowledgment_of_parentage
      - "a paternity or parentage order (examples: *Order of Filiation, Judgment of Parentage*)": by_court_order
      - "an adoption (examples: stepparent adoption, confirmatory adoption)": by_adoption
  - note: |
      ${ collapse_template(parentage_affidavit_explained) }
    show if: 
      variable: children[i].paternity_established_where
      is: Michigan
  - Case number: children[i].paternity_case_number
    show if:
      variable: children[i].paternity_how
      is: by_court_order
  - Name of Court: children[i].paternity_case_court_name
    show if:
      variable: children[i].paternity_how
      is: by_court_order
  - Case number: children[i].adoption_case_number
    show if: 
      variable: children[i].paternity_how
      is: by_adoption
  - Name of Court: children[i].adoption_case_court
    show if: 
      variable: children[i].paternity_how
      is: by_adoption
---
template: parentage_affidavit_explained
subject: |
  What if I'm not sure?
content: |
  An *Affidavit of Parentage* (also called an *Acknowledgement of Parentage*) is a form that can be used to establish the legal parentage of the second parent (in many cases, the father) when the parents are unmarried. It is often signed by both parents at the hospital after a child is born, but it can be signed at a later time. In Michigan, the form is then filed with the Central Paternity Registry in Lansing.

  If your child was born in Michigan and you are not sure whether there is an *Affidavit of Parentage*, you can contact the [Michigan Vital Records Office](https://www.michigan.gov/mdhhs/doing-business/vitalrecords) in Lansing. Another way to tell is this: If the second parent's name is on the birth certificate and you are certain that there was no court case establishing parentage, then there is likely an *Affidavit of Parentage*.
---
id: informal parenting time arrangement?
if: not children[i].has_order_in_effect
question: |
  Informal parenting time arrangment for ${ children[i].familiar() }?
subquestion: |
  An informal parenting time arrangement means that you and ${ other_parties[0] } have a plan set up for how you will each spend time with ${ children[i].familiar() }.
fields:
  - Do you and ${ other_parties[0] } have an informal parenting time arrangement?: children[i].informal_PT
    datatype: yesnoradio
  - "Describe your informal parenting time arrangement. (Example: The Respondent usually has our child at his house every other weekend, from Friday after school to Sunday evening.)": children[i].informal_PT_exp
    input type: area
    show if:
      variable: children[i].informal_PT
      is: True         
---
if: len(children.complete_elements()) == 1 and children[0].has_order_in_effect
id: desired parenting time change one child with custody order
question: |
  Parenting time changes for ${ children[0].familiar() }
fields:
  - Select the option below that best describes what you want to happen with parenting time: desired_parenting_time_changes
    datatype: radio
    choices:
      - I want to keep the current custody and parenting time arrangements. They should continue as ordered in the divorce judgment and/or custody order.: no_change
      - I want to keep the current custody and parenting time arrangements. They should continue as ordered in the divorce judgment and/or custody order, **BUT** I think the exchange of ${ children[0].familiar() } should happen at a neutral place.: no_change_except_exchange
      - I think that ${ children[0].familiar() }'s safety is at risk. I would like to stop all parenting time between ${ other_parties[0] } and ${ children[0].familiar() }.: suspend_respondent_time
      - Something else.: something_else
  - Explain how you want the current parenting time arrangements to change:: parenting_time_changes_exp
    input type: area
    show if:
      variable: desired_parenting_time_changes
      is: something_else
---
if: len(children.complete_elements()) == 1 and not children[0].has_order_in_effect and children[0].informal_PT 
id: desired parenting time change one child with informal PT arrangement
question: |
  Parenting time changes for ${ children[0].familiar() }
fields:                                       
  - Select the option below that best describes what you want to happen with parenting time: desired_parenting_time_changes
    datatype: radio
    choices:
      - I want to keep the current parenting time arrangements.: no_change
      - I want to keep the current parenting time arrangements, **BUT** I think the exchange of ${ children[0].familiar() } should happen at a neutral place.: no_change_except_exchange
      - I think that ${ children[0].familiar() }'s safety is at risk. I would like to stop all parenting time between ${ other_parties[0] } and ${ children[0].familiar() }.: suspend_respondent_time
      - Something else.: something_else
  - Explain how you want the current parenting time arrangements to change:: parenting_time_changes_exp
    input type: area
    show if:
      variable: desired_parenting_time_changes
      is: something_else
---
if: len(children.complete_elements()) > 1 and any_child_has_PT
id: desired parenting time change multiple children 
question: |
  Parenting time changes
fields:
  - Select the option below that best describes what you want to happen with parenting time for your children: desired_parenting_time_changes
    datatype: radio
    choices:
      - I want to keep the current parenting time arrangements.: no_change
      - I want to keep the current parenting time arrangements, **BUT** I think parenting time exchanges should happen at a neutral place.: no_change_except_exchange
      - I think that the safety of the children is at risk. I would like to stop all parenting time between ${ other_parties[0] } and our minor children.: suspend_respondent_time
      - Something else.: something_else
  - Explain how you want the current parenting time arrangements to change:: parenting_time_changes_exp
    input type: area
    show if:
      variable: desired_parenting_time_changes
      is: something_else
---
id: pending_actions there_are_any
question: |
  Pending legal cases
subquestion: |
  % if ppo_type == "domestic":
  This includes any court cases, such as divorce, custody, PPO, a criminal case, or others.
  % endif
fields:
  - Are there any pending legal cases between you and ${ other_parties[0].name }?: pending_actions.there_are_any
    datatype: yesnoradio
    label above field: True
---
id: pending_actions docket number
sets:
  - pending_actions[i].docket_number
question: |
  Pending action case number
subquestion: |
  Leave blank if unknown.
fields:
  - Enter the case number: pending_actions[i].docket_number
    required: False
---
id: pending_actions court and county
question: |
  Enter the name of the court and county where the case was filed, if known
fields:
  - Court name: pending_actions[i].court_name
    required: False
  - Court county: pending_actions[i].court_county
    required: False
  - Court state: pending_actions[i].court_state
    required: False
    code: |
      states_list()
---
id: pending_actions judge
question: |
  Enter the name of the judge in the case, if known
fields:
  - Judge name: pending_actions[i].judge
    required: False
---
id: pending_actions there_is_another
question: |
  Pending legal cases
subquestion: |
  % if len(pending_actions.complete_elements()) > 0:
  ${ collapse_template(pending_actions_list_template) }
  % endif
fields:
  - Are there any more pending legal cases between you and ${ other_parties[0].name }?: pending_actions.there_is_another
    datatype: yesnoradio
    label above field: True
---
template: pending_actions_list_template
subject: What have I listed so far?
content: |
  % if len(pending_actions.complete_elements()) > 0:
  So far you have listed:

  % for item in pending_actions:

  **Pending Case \#${ loop.index+1 }**

  * Docket: ${ item.docket_number }
  * Court: ${ item.court_name }
  * County: ${ item.court_county }
  * State: ${ item.court_state }
  * Judge: ${ item.judge }


  % endfor
  % else:
  You have not listed any cases yet.
  % endif
---
id: orders_judgments there_are_any
question: |
  Court orders and judgments
subquestion: |
  % if ppo_type == "domestic":
  Includes divorce, custody, previous protection orders, criminal convictions, or others.
  % endif
fields:
  - Are there any court orders or judgments entered in any court regarding you and ${ other_parties[0].name }?: orders_judgments.there_are_any
    datatype: yesnoradio
    label above field: True
---
id: orders_judgments docket number
sets:
  - orders_judgments[i].docket_number
question: |
  Court order or judgment's case number
subquestion: |
  Leave blank if unknown.
fields:
  - Enter the case number: orders_judgments[i].docket_number
    required: False
---
id: orders_judgments docket number sexual assault conviction
if: ppo_type == "nondomestic_sexual_assault" and (respondent_sexual_assault_conviction or   (petitioner_is_minor and obscene_material_conviction))
sets:
  - orders_judgments[0].docket_number
question: |
  % if respondent_sexual_assault_conviction:
  Sexual assault conviction case number
  % else:
  Obscene materials conviction case number
  % endif
subquestion: |
  Leave blank if unknown.
fields:
  - Enter the case number for the conviction: orders_judgments[0].docket_number
    required: False
---
id: orders_judgments court and county
question: |
  Enter the name of the court and county where the case was filed, if known
fields:
  - Court name: orders_judgments[i].court_name
    required: False
  - Court county: orders_judgments[i].court_county
    required: False
  - Court state: orders_judgments[i].court_state
    required: False
    code: |
      states_list()
---
id: orders_judgments court and county sexual assault conviction
if: ppo_type == "nondomestic_sexual_assault" and (respondent_sexual_assault_conviction or   (petitioner_is_minor and obscene_material_conviction))
question: |
  % if respondent_sexual_assault_conviction:
  Court and county of sexual assault conviction
  % else:
  Court and county of obscene materials conviction
  % endif
subquestion: |
  % if respondent_sexual_assault_conviction:
  Enter the name of the court and county where the sexual assault case was filed, if known.
  % else:
  Enter the name of the court and county where the obscene materials case was filed, if known.
  % endif
fields:
  - Court name: orders_judgments[0].court_name
    required: False
  - Court county: orders_judgments[0].court_county
    required: False
  - Court state: orders_judgments[0].court_state
    required: False
    code: |
      states_list()
---
id: orders_judgments judge
question: |
  Enter the name of the judge in the case, if known
fields:
  - Judge name: orders_judgments[i].judge
    required: False
---
id: orders_judgments there_is_another
question: |
  Other court orders or judgments
subquestion: |
  % if len(orders_judgments.complete_elements()) > 0:
  ${ collapse_template(orders_judgments_list_template) }
  % endif
fields:
  - Are there any more court orders or judgments entered between you and ${ other_parties[0].name }?: orders_judgments.there_is_another
    datatype: yesnoradio
    label above field: True
---
id: orders_judgments there_is_another yes conviction
if: ppo_type == "nondomestic_sexual_assault" and (respondent_sexual_assault_conviction or   (petitioner_is_minor and obscene_material_conviction))
question: |
  Other convictions, court orders, or judgments
subquestion: |
  % if len(orders_judgments.complete_elements()) > 0:
  ${ collapse_template(orders_judgments_list_template) }
  % endif
fields:
  - Are there any more convictions, court orders, or judgments entered between you and ${ other_parties[0].name }?: orders_judgments.there_is_another
    datatype: yesnoradio
    label above field: True
---
template: orders_judgments_list_template
subject: What have I listed so far?
content: |
  % if len(orders_judgments.complete_elements()) > 0:
  So far you have listed:

  % for item in orders_judgments:

  **Order or Judgment \#${ loop.index+1 }**

  * Docket: ${ item.docket_number }
  * Court: ${ item.court_name }
  * County: ${ item.court_county }
  * State: ${ item.court_state }
  * Judge: ${ item.judge }


  % endfor
  % else:
  You have not listed any orders or judgments yet.
  % endif
---
id: abuse history intro
question: |
  The following questions are about what has happened between you and ${ other_parties[0].name }
subquestion: |
  Your answers will help the judge understand why you need protection.

  Explain the most recent abusive event first, then the next most recent event, and continue in that way. You do not need to list every incident of abuse, especially if there are many. Focus on the most recent events and the most severe events.

  Your answers to these questions will create the statement of facts to go with your *Petition for Personal Protection Order*. This is important because it helps the judge to understand what ${ other_parties[0].name } has done to you and why you need protection.

continue button field: abuse_history_intro
---
id: stalking harassing behavior intro
question: |
  The following questions are about ${ other_parties[0].name }'s stalking and/or harassing behavior.
subquestion: |
  Your answers will help the judge understand why you need protection.

  To qualify for a PPO when you do not have a domestic relationship with ${ other_parties[0].name }, you must show that ${ other_parties[0].name } has engaged in a "willful course of conduct" that involves repeated or continuing harassment of you. The harassment must be behavior that:

    * Involves two or more separate, noncontinuous acts,
    * Would cause a reasonable person to feel terrorized, frightened, intimidated, threatened, harassed, or molested, and
    * Actually caused you to feel terrorized, frightened, intimidated, threatened, harassed, or molested.

  ${ collapse_template(stalking_harassing_explained) }

continue button field: stalking_harassing_intro
---
id: sexual assault intro
progress: 60
question: |
  The following questions are about what ${ other_parties[0].name } has done to you
subquestion: |
  Your answers will help the judge understand why you need protection.

continue button field: sexual_assault_intro
---
id: respondent sexual assault basis, adult petitioner
if: not petitioner_is_minor
question: |
  Past convictions or other reasons for a PPO
fields:
  - Was ${ other_parties[0].name } convicted of sexual assault against you?: respondent_sexual_assault_conviction
    datatype: yesnoradio
  - note: |
      Make sure you add information about this conviction.
    show if:
      variable: respondent_sexual_assault_conviction
      is: True
  - Do you fear that you could be sexually assaulted because ${ other_parties[0].name } has sexually assaulted you or threatened you with sexual assault?: fears_future_sexual_assault
    datatype: yesnoradio
    show if: 
      variable: respondent_sexual_assault_conviction
      is: False
  - Please explain what happened that made you afraid of being sexually assaulted by ${ other_parties[0].name }: potential_sexual_assault_exp
    input type: area
    show if:
      variable: fears_future_sexual_assault
      is: True
  - note: |
      ${ collapse_template(fears_future_sexual_assault_explained) }
    show if:
      variable: fears_future_sexual_assault
      is: True
  - note: |
        We're sorry, you cannot use this tool to prepare a nondomestic sexual assault *Personal Protection Order*.

        There are different forms available if you need protection from someone who is stalking or harassing you, or from someone with whom you have or had a domestic relationship. Read [Overview of Personal Protection Orders](https://michiganlegalhelp.org/resources/personal-safety/overview-of-personal-protection-orders) to learn more.

        If you made a mistake:
        
        * change your answer above, or
        * start over and choose a different PPO type.
        
        Otherwise, return to [Michigan Legal Help](https://michiganlegalhelp.org) for other legal information or resources.
    show if:
      variable: fears_future_sexual_assault
      is: False
validation code: |
  if not respondent_sexual_assault_conviction and not fears_future_sexual_assault:
    validation_error("You can't continue unless one of these things is true.")
---
id: respondent sexual assault basis, minor petitioner
if: petitioner_is_minor
question: |
  Past convictions or other reasons for a PPO
fields:
  - Was ${ other_parties[0].name } convicted of sexual assault against you?: respondent_sexual_assault_conviction
    datatype: yesnoradio
  - note: |
      Make sure you add information about this conviction.
    show if:
      variable: respondent_sexual_assault_conviction
      is: True
  - Was ${ other_parties[0].name } convicted of giving obscene material to you?: obscene_material_conviction
    datatype: yesnoradio
    show if: 
      variable: respondent_sexual_assault_conviction
      is: False
  - note: |
      Make sure you add information about this conviction.
    show if:
      variable: obscene_material_conviction
      is: True
  - Do you fear that you could be sexually assaulted because ${ other_parties[0].name } has sexually assaulted you or threatened you with sexual assault?: fears_future_sexual_assault
    datatype: yesnoradio
    show if: 
      variable: obscene_material_conviction
      is: False
  - Please explain what happened that made you afraid of being sexually assaulted by ${ other_parties[0].name }: potential_sexual_assault_exp
    input type: area
    show if:
      variable: fears_future_sexual_assault
      is: True
  - Did ${ other_parties[0].name } give you obscene material?: obscene_material_provided
    datatype: yesnoradio
    show if: 
      variable: fears_future_sexual_assault
      is: False
  - Please explain what happened: obscene_material_exp
    input type: area
    show if:
      variable: obscene_material_provided
      is: True
  - note: |
      ${ collapse_template(fears_future_sexual_assault_explained) }
    show if:
      variable: fears_future_sexual_assault
      is: True
  - note: |
      ${ collapse_template(fears_future_sexual_assault_explained) }
    show if:
      variable: obscene_material_provided
      is: True
  - note: |
        We're sorry, you cannot use this tool to prepare a nondomestic sexual assault *Personal Protection Order*.

        There are different forms available if you need protection from someone who is stalking or harassing you, or from someone with whom you have or had a domestic relationship. Read [Overview of Personal Protection Orders](https://michiganlegalhelp.org/resources/personal-safety/overview-of-personal-protection-orders) to learn more.

        If you made a mistake:
        
        * change your answer above, or
        * start over and choose a different PPO type.
        
        Otherwise, return to [Michigan Legal Help](https://michiganlegalhelp.org) for other legal information or resources.
    show if:
      variable: obscene_material_provided
      is: False
validation code: |
  if not respondent_sexual_assault_conviction and not obscene_material_conviction and not fears_future_sexual_assault and not obscene_material_provided:
    validation_error("You can't continue unless one of these things is true.")
---
template: fears_future_sexual_assault_explained
subject: |
  More information about how to answer this question.
content: |
  Be as specific as you can about facts like dates and locations. However, if you are not sure of a date or other fact, do not guess. It is okay to give an approximate date or time, or to put a time of year, like "last summer."

  If you have any documents you want to show the judge, such as police reports, medical records, photos, copies of letters, texts, or email messages, you can attach copies to your petition. However, this is not necessary. The judge shouldn't deny a petition just because you don't have any documents to attach.
---
undefine:
  - conviction_required
code: |
  reset_SA_convictions_check = True
---
id: conviction required warning
continue button field: conviction_required
question: |
  % if respondent_sexual_assault_conviction:
  You must list ${ other_parties[0].name }'s conviction for sexual assault
  % else:
  You must list ${ other_parties[0].name }'s obscene material conviction
  % endif
subquestion: |
  % if respondent_sexual_assault_conviction:
  You said ${ other_parties[0].name } was convicted of sexual assault against you. You **must include this conviction** in your list of Court Orders and Judgments. 
  % else:
  You said ${ other_parties[0].name } was convicted of giving you obscene material. You **must include this conviction** in your list of Court Orders and Judgments. 
  % endif

  % if len(orders_judgments.complete_elements()) > 0:
  ${ collapse_template(orders_judgments_list_template) }
  
  If you need to add a conviction:
  
  * tap **${MLH_continue_button_label}** below, and 
  * tap **Court Orders and Judgments** on the next screen.
  % endif
---
code: |
  if ppo_type == "nondomestic_sexual_assault" and (respondent_sexual_assault_conviction or (petitioner_is_minor and obscene_material_conviction)):
    if len(orders_judgments.complete_elements()) < 1:
      minimum_convictions_explainer
      orders_judgments.gather(minimum=1)

  check_minimum_convictions_number = True
---
code: |
  if ppo_type == "nondomestic_sexual_assault" and (respondent_sexual_assault_conviction or   (petitioner_is_minor and obscene_material_conviction)):
    if len(orders_judgments.complete_elements()) >= 1:
      conviction_required

  SA_convictions_check = True
---
undefine:
  - minimum_convictions_explainer
code: |
  reset_minimum_convictions_check = True
---
id: minimum convictions
undefine:
  - orders_judgments.gathered
question: |
  You need to add a conviction
subquestion: |
  % if respondent_sexual_assault_conviction:
  You said ${ other_parties[0].name } was convicted of sexual assault against you. You **must include this conviction** in your list of Court Orders and Judgments.
  % else:
  You said ${ other_parties[0].name } was convicted of giving you obscene material. You **must include this conviction** in your list of Court Orders and Judgments.
  % endif
continue button field: minimum_convictions_explainer
---
template: stalking_harassing_explained
subject: |
  Learn more about stalking behavior.
content: |
  Stalking and/or harassing behavior takes many forms. Generally, stalking is contact you don't consent to that scares you or harasses you. Examples of stalking behavior include:

    * Following you or appearing within your sight
    * Showing up at your home or work
    * Approaching you or confronting you in public or on private property
    * Coming onto property you own, lease, and/or where you live
    * Sending you mail, email, or other communications
    * Calling or texting you
    * Placing or delivering an object on property you own, lease, and/or where you live
    * Threatening to kill you or hurt you
    * Posting a message to you or about you on the Internet, a computer, or any other electronic means

  Your answers to these questions will create the statement of facts to go with your *Petition for Personal Protection Order*. This is important because it helps the judge understand what ${ other_parties[0].name } has done to you and why you need protection.
---
id: abuse history intro 2
progress: 50
question: |
  ${ other_parties[0].name } will receive a copy of the petition and statement of facts, and they will also be put in the court file
subquestion: |
  If there is a hearing on your petition, you will be required to testify about the events in your statement of facts, so it is important to be as accurate as possible.

  Be as specific as you can about facts like dates and locations. However, if you are not sure of a date or other fact, do not guess. It is okay to give an approximate date or time, or to put a time of year, like "last summer."

continue button field: abuse_history_intro_2
---
id: abuse history intro 3
question: |
  Attaching Evidence
subquestion: |
  If you have any documents you want to show the judge, you should attach copies to your petition. You'll have a chance to upload electronic documents before your forms are finalized.

  Even if you don't have any documents to attach, you can still file your petition. The judge shouldn't deny a petition just because you don't have any documents to attach.

  If you have audio or video evidence, include descriptions about what is in the evidence when you are typing your descriptions of the incidents in the following screens. Save any audio/video evidence you have. If there will be a hearing for your case, you can submit the audio/video evidence to the court directly.

continue button field: abuse_history_intro_3
---
id: abuse history intro 4
question: |
  Most Recent Incident
subquestion: |
  The following questions will apply to the most recent incident of violence, threat of violence, or other abuse

continue button field: abuse_history_intro_4
---
id: stalking history intro
question: |
  The following questions will apply to the most recent incident of stalking, harassing, or threatening behavior

continue button field: stalking_history_intro
---
id: incidents date
sets:
  - incidents[i].date
question: |
  When did this incident happen?
subquestion: |
  For example: "March 15, ${ today().year - 1 }" or "last summer"

  ${ collapse_template(incident_date_explained) }
fields:
  - Complete the sentence "This incident occurred on or about...": incidents[i].date
    label above field: True
---
template: incident_date_explained
subject: |
  Do I need an exact date?
content: |
  Fill in the exact date if you know it. Otherwise, be as specific as you can, but don't guess. It is okay to give an approximate date or time or to put a time of year, like "last summer" or "Christmas time ${ today().year - 2 }."
---
id: incidents location
question: |
  Incident location
subquestion: |
  % if county_choice == "Oakland" and wants_confidential_contact_details:
  *If you answered that you want to keep your home address confidential and this incident happened at your home, DO NOT type your address. Instead, type 'my home.'*
  % endif
  ${ collapse_template(incident_location_explained) }
fields:
  - The incident occurred at the following location: incidents[i].location
---
template: incident_location_explained
subject: |
  Do I need the address?
content: |
  Describe the location and fill in an address, if you know it. Examples: "At my mother's house, at 123 N. Main Street, Toledo, Ohio" or "At the Chili's restaurant near my house."

  % if county_choice == "Oakland" and wants_confidential_contact_details:
  *If you answered that you want to keep your home address confidential and this incident happened at your home, DO NOT type your address. Instead, type 'my home.'*
  % endif
---
id: incidents other party actions
question: |
  Incident details
subquestion: |
  Be sure to use complete sentences and be as descriptive as you can. List as many details as you can remember.

  % if ppo_type == "nondomestic":
  ${ collapse_template(incident_other_party_actions_explained_nondomestic) }
  % else:
  ${ collapse_template(incident_other_party_actions_explained) }
  % endif
fields:
  - Please describe what happened during the incident.: incidents[i].other_party_actions
    label above field: True
    input type: area
---
template: incident_other_party_actions_explained
subject: |
  Can I see some examples?
content: |
  Here are two examples to help you understand how to write a good description of the incident:

  A poor example:

  "We were fighting and he pushed me."

  A good example:

  "We were eating dinner, and he was complaining that his food was cold. I got angry, so I grabbed his plate and went to the kitchen to put it in the microwave. He followed me and grabbed my arm and told me I was not supposed to leave the dinner table without his permission, and that I was a bad example for our daughter. I told him to leave me alone and he pushed me down on the ground and dumped the plate of food on my legs. He told me that one day he would leave me alone for good and I would be sorry because no one would ever want me again."
---
template: incident_other_party_actions_explained_nondomestic
subject: |
  Can I see some examples?
content: |
  Here are two examples to help you understand how to write a good description of the incident:

  A poor example:

  "I kept seeing ${ other_parties[0].name } everywhere I would go."

  A good example:

  "When I left work in the afternoon, I saw a car parked in the street with someone sitting in the driver's seat. When I got closer I could see that it was ${ other_parties[0].name }, who was watching me. As I walked down the street, ${ other_parties[0].name } started the car and followed me slowly. ${ other_parties[0].name } followed me three blocks to my parking spot. When I drove out of the parking structure in my car, I didn't see ${ other_parties[0].name } again."
---
id: incidents emotional effect
question: |
  Describe how you felt during and after the incident
subquestion: |
  Finish this sentence:
fields:
  - Because of this incident I felt...: incidents[i].emotional_effect
    label above field: True
    input type: area
---
if: ppo_type == "nondomestic"
id: incidents reason other party responsible
question: |
  How do you know ${ other_parties[0].name } was responsible?
subquestion: |
  You may not need to complete this field if it is obvious from your description of the incident that ${ other_parties[0].name } was responsible for the behavior. Tap the link below for more information.

  ${ collapse_template(other_party_responsible_explained) }
fields:
  - I know ${ other_parties[0].name } is responsible because...: incidents[i].reason_other_party_responsible
    label above field: True
    input type: area
    required: False
---
template: other_party_responsible_explained
subject: |
  Can I get some examples?
content: |
  If ${ other_parties[0].name }'s behavior was not in person, it may be helpful to the judge to understand why you believe ${ other_parties[0].name } was involved. This might be the case if ${ other_parties[0].name }'s behavior was over the phone, by text, or through the Internet.

  Here are two examples to help you understand how to tell the judge you know ${ other_parties[0].name } was responsible for the behavior.

  A poor example:

  "I know it was him calling because no one else would call me and hang up."

  A good example:

  "I know it was him calling because the number was blocked, and each time he called before he blocked the number. Also, he has a pattern of calling me in the evening between 6:00 and 9:00 and repeatedly hanging up when I answer the phone."
---
if: ppo_type == "domestic"
id: incidents physical injury
question: |
  Physical injuries
subquestion: |
  Being physically injured includes being sore or bruised, having other injuries you took care of yourself, or having injuries that were seen by a doctor.

  ${ collapse_template(incident_injury_explained) }
fields:
  - Were you physically injured?: incidents[i].petitioner_injured
    datatype: yesnoradio
  - Describe your injuries: incidents[i].physical_injury
    input type: area
    show if:
      variable: incidents[i].petitioner_injured
      is: True
---
template: incident_injury_explained
subject: |
  What if I wasn't injured?
content: |
  There is no requirement that you be physically injured to get a personal protection order. This is just information that can help the judge understand what happened to you and why you need to be protected from ${ other_parties[0].name }.
---
id: incidents witnesses
question: |
  Witnesses
subquestion: |
  You don't have to list the names of witnesses here, but if there are witnesses, it is possible the judge will want to hear from them if there is a court hearing.

  ${ collapse_template(incident_witnesses_explained) }
fields:
  - Were there any witnesses to the incident?: incidents[i].had_witnesses
    datatype: yesnoradio
---
template: incident_witnesses_explained
subject: |
  What if there were no witnesses?
content: |
  There is no requirement that you have witnesses to get a personal protection order. This is just information that can help the judge understand what happened to you and why you need protection from ${ other_parties[0].name }.
---
id: incidents police
question: |
  Police involvement
subquestion: |
  ${ collapse_template(incident_police_explained) }
fields:
  - Were the police called?: incidents[i].had_police
    datatype: yesnoradio
  - What did the police do?: incidents[i].police_actions
    input type: area
    show if:
      variable: incidents[i].had_police
      is: True
---
template: incident_police_explained
subject: |
  Why is this important?
content: |
  There is no requirement that the police were called to get a personal protection order. This is just information that can help the judge understand what happened to you and why you need protection from ${ other_parties[0].name }.
---
if: incidents[i].had_police
id: incidents outro
question: |
  Important! If there is a police report for this incident, get a copy to include with your petition.
subquestion: |
  A police report can help show the judge what happened and why you need a PPO.

  Note that only including a police report number or incident number in your petition does **not** automatically allow the court to access the police report. It must be filed with your petition if you want the court to be able to see it.

continue button field: incidents[i].police_report_info
---
id: incidents there_is_another
question: |
  % if (ppo_type == "nondomestic") or (ppo_type == "nondomestic_sexual_assault"):
  Other incidents of stalking, harassing, or threatening behavior
  % elif ppo_type == "domestic":
  Other incidents of violence, threat of violence, or other abuse
  % endif
fields:
  - Is there another incident?: incidents.there_is_another
    datatype: yesnoradio
---
id: nondomestic_subsequent_incident_intro
question: |
  The following questions will apply to the **${ ordinal(i) }** most recent incident of stalking, harassing, or threatening behavior.

continue button field: incidents[i].nondomestic_subsequent_incident_intro
---
id: other details
question: |
  Other details
subquestion: |
  You can use this space to tell the judge other things about ${ other_parties[0].name } that make you feel threatened, abused, or afraid.

  % if ppo_type == "nondomestic":
  ${ collapse_template(incident_other_details_explained_nondomestic) }
  % else:
  ${ collapse_template(incident_other_details_explained) }
  % endif
fields:
  - Is there anything else you would like the judge to know about why you need a personal protection order against ${ other_parties[0].name }?: other_details
    input type: area
    required: False
    label above field: True
---
template: incident_other_details_explained
subject: |
  Tap here to see examples.
content: |
  Examples:

  - ${ other_parties[0].name } tries to control you with their behavior. This can include many different types of things, such as: threatening to hurt you or your children; threatening to commit suicide; limiting your access to money; not letting you have or keep a job; controlling where you go or who you see and talk to; or putting you down, calling you names, or trying to make you feel like you are "crazy."

  - ${ other_parties[0].name } was violent in a previous relationship. Include information about other personal protection orders and past domestic violence convictions, if any.

  - ${ other_parties[0].name } has mental health problems and/or issues with drugs or alcohol.

  - ${ other_parties[0].name } owns a weapon, such as a gun, especially if ${ other_parties[0].name } has used or threatened to use the weapon against you or another person.

  - ${ other_parties[0].name } is involved in criminal activity, such as being a gang member or dealing drugs.
---
template: incident_other_details_explained_nondomestic
subject: |
  Tap here to see examples.
content: |
  Examples:

  - ${ other_parties[0].name } has mental health problems and/or issues with drugs or alcohol.

  - ${ other_parties[0].name } owns a weapon, such as a gun, especially if ${ other_parties[0].name } has used or threatened to use the weapon against you or another person.

  - ${ other_parties[0].name } is involved in criminal activity, such as being a gang member or dealing drugs.
---
id: relief requested intro
progress: 70
question: |
  Next, you will be asking the judge to forbid ${ other_parties[0].name } from doing certain things that make you unsafe or afraid
subquestion: |
  On the following pages, you will decide which types of behavior you do not want ${ other_parties[0].name } to be allowed to do. The judge will make the final decision about what things to include in the protection order.

continue button field: relief_requested_intro
---
id: wants_no_entering_residential_property_simple
if: ppo_type == "nondomestic_sexual_assault" or (ppo_type == "domestic" and petitioner_respondent_married == True)
question: |
  Access to your home
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to enter the property where you live?: wants_no_entering_residential_property
    datatype: yesnoradio
    label above field: True
---
id: wants_no_entering_residential_property domestic unmarried
if: ppo_type == "domestic" and petitioner_respondent_married == False
undefine:
  - cannot_prohibit_respondent_entering_property
question: |
  Access to your home
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to enter the property where you live?: wants_no_entering_residential_property
    datatype: yesnoradio
    label above field: True
  - Do you have a property interest in this home?: has_property_interest_in_home
    datatype: yesnoradio
    show if:
      variable: wants_no_entering_residential_property
      is: True
  - Does ${ other_parties[0].name } have a property interest in this home?: respondent_has_property_interest_in_home
    datatype: yesnoradio
    label above field: True
    show if:
      variable: has_property_interest_in_home
      is: False
  - note: |
      ${ collapse_template(property_interest_explained) }
    show if:
      variable: wants_no_entering_residential_property
      is: True
---
template: property_interest_explained
subject: |
  What is a property interest?
content: |
  Michigan law uses the term "property interest," but does not give a definition for it. It doesn't necessarily mean your name must be on the title or lease. We can't know how the judge in your case will interpret the law, but you could argue that the following things make up a property interest:

    * You own or rent the home (your name is the deed/lease)
    * Your name is not on the deed or lease, but you live there with ${ other_parties[0].name }
    * You lived in the home with ${ other_parties[0].name } until recently, but moved out to stay safe
    * A friend or family member owns a house, and you stay there but do not have a written lease
    * Any other property where you live, or lived recently but had to move to stay safe

  If your situation is out of the ordinary, use your judgment to decide if you have a property interest in the home. Be prepared to explain your reasoning to the judge, if needed.
---
id: respondent property interest kickout
question: |
  We're sorry, but you are not allowed to ask for this protection
subquestion: |
  Michigan law does not allow the court to prohibit ${ other_parties[0].name } from entering on the property where you live if:

    1. you are not married to ${ other_parties[0].name };
    2. you do not have a property interest in the home, **and**
    3. ${ other_parties[0].name } has a property interest in the home.

  If you made a mistake, tap the **${ MLH_back_button_label }** button to go back and change your answer. Otherwise, tap Continue to continue selecting things you want your PPO to prohibit ${ other_parties[0].name } from doing.
continue button field: cannot_prohibit_respondent_entering_property
---
id: wants no entering other property
question: |
  Access to other property
subquestion: |
  ${ collapse_template(wants_no_entering_other_property_explained) }
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to enter other property (not your residence)?: other_properties.there_are_any
    datatype: yesnoradio
    label above field: True
---
template: wants_no_entering_other_property_explained
subject: |
  When should I answer yes?
content: |
  You might answer yes to this if there are other places where you often spend time (such as your work, school, parents' home, or friends' homes) and you want ${ other_parties[0].name } to be prohibited from going to those places.
---
id: wants no sexual assault threats
question: |
  Threats to you
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to **threaten to sexually assault, kill, or physically injure** you?: wants_no_sexual_assault_threats
    datatype: yesnoradio
    label above field: True
---
id: wants no harming petitioner
question: |
  Harm to you
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to **assault**, **attack**, **beat**, **molest**, or **wound** you?: wants_no_harming_petitioner
    datatype: yesnoradio
    label above field: True
---
id: wants no harming others
question: |
  Harm to another person
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to **assault**, **attack**, **beat**, **molest**, or **wound** another person?: ppo_harm_protectees.there_are_any
    datatype: yesnoradio
    label above field: True
---
id: ppo_harm_protectees there_is_another
question: |
  Anyone else to add?
subquestion: |
  ${ collapse_template(harm_protectees_listed_so_far) }
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to **assault**, **attack**, **beat**, **molest**, or **wound** another person not yet listed?: ppo_harm_protectees.there_is_another
    datatype: yesnoradio
    label above field: True
---
template: harm_protectees_listed_so_far
subject: Who have I listed so far?
content: |
  % if (len(ppo_harm_protectees.complete_elements()) > 0) or wants_no_harming_petitioner:
  So far, you have listed:

  % if wants_no_harming_petitioner:
    - Yourself
  % endif
  % for person in ppo_harm_protectees.complete_elements():
    - ${ person }
  % endfor
  % else:
  You have not listed anyone yet.
  % endif
---
id: wants_no_removing_minor
question: |
  Removing your minor children
subquestion: |
  This protection **will not** prohibit ${ other_parties[0].name } from removing your minor children if ${ other_parties[0].name } is allowed to have the children based on a custody or parenting time order and if the visitation or transfer of the children does not violate other conditions of the personal protection order.
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to remove your minor child(ren) from your custody?: wants_no_removing_minor
    datatype: yesnoradio
    label above field: True
---
id: no_stalking_choices
question: |
  You can ask the judge to order ${ other_parties[0].name } not to stalk you
subquestion: |
  Stalking includes any of the behaviors listed below.

  You may ask to be protected from some or all of these behaviors by ${ other_parties[0].name } if they **interfere with your personal freedom** or **make you afraid**.
fields:
  - Which behaviors do you want the judge to order ${ other_parties[0].name } **not** to do? Check all that apply.: no_stalking_choices
    datatype: checkboxes
    label above field: True
    choices:
      - Following you or appearing within your sight: following
      - Sending mail or other communications to you: communications
        help: |
          This includes sending you email or text messages, sending you messages through social media such as Facebook or Instagram, or sending messages to you through a third party such as your children or friends.
      - Approaching or confronting you in a public place or on private property: approaching
        help: |
          This prohibits ${ other_parties[0].name } from coming up to you or trying to talk to you at a public place. For example, if you ran into ${ other_parties[0].name } at a store or restaurant, ${ other_parties[0].name } would be prohibited from coming up to you.
      - Entering onto or staying on property you own, lease, or occupy: entering_property
      - Placing an object on or delivering an object to property you own, lease, or occupy: placing_object
      - Appearing at your workplace or residence: appear_work_residence
      - Contacting you by telephone: phone_contact
---
id: wants_no_children_property_removal_interference
question: |
  Protecting your ability to remove your children or property
subquestion: |
  ${ collapse_template(wants_no_children_property_removal_interference_explained) }
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to interfere with your efforts to remove your children or personal property from a place that ${ other_parties[0].name } owns or leases?: wants_no_children_property_removal_interference
    datatype: yesnoradio
    label above field: True
---
template: wants_no_children_property_removal_interference_explained
subject: |
  When should I answer yes?
content: |
  You might ask for this protection if you left a home where you lived with ${ other_parties[0].name } and you need to return to get your children or personal belongings.
---
id: wants no threatening petitioner
question: |
  Threats to you
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to **threaten** to kill or physically injure you?: wants_no_threatening_petitioner
    datatype: yesnoradio
    label above field: True
---
id: wants no threatening others
question: |
  Threats to another person
subquestion: |
  ${ collapse_template(wants_no_threatening_others_explained) }
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to **threaten** to kill or physically injure another person?: ppo_threat_protectees.there_are_any
    datatype: yesnoradio
    label above field: True
---
template: wants_no_threatening_others_explained
subject: |
  When should I answer yes?
content: |
  You might answer Yes to this if there are other people ${ other_parties[0].name } has threatened to kill or physically injure, such as your children, specific relatives, or specific friends.
---
id: ppo_threat_protectees there_is_another
question: |
  Anyone else to add?
subquestion: |
  ${ collapse_template(threat_protectees_listed_so_far) }
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to **threaten** to kill or physically injure another person not yet listed?: ppo_threat_protectees.there_is_another
    datatype: yesnoradio
    label above field: True
---
template: threat_protectees_listed_so_far
subject: Who have I listed so far?
content: |
  % if (len(ppo_threat_protectees.complete_elements()) > 0) or wants_no_threatening_petitioner:
  So far, you have listed:

  % if wants_no_threatening_petitioner:
    - Yourself
  % endif
  % for person in ppo_threat_protectees.complete_elements():
    - ${ person }
  % endfor
  % else:
  You have not listed anyone yet.
  % endif
---
id: wants_no_work_education_interference
question: |
  Your school or workplace
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to interfere with you at work or school, or to act in a way that impairs your work or school relationships or environment?: wants_no_work_education_interference
    datatype: yesnoradio
    label above field: True
---
id: wants no sexual assault threats to others
question: |
  Threats to another person
subquestion: |
  ${ collapse_template(wants_no_sexual_assault_threats_to_others_explained) }
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to **threaten to sexually assault, kill, or physically injure** another person?: ppo_sexual_assault_threat_protectees.there_are_any
    datatype: yesnoradio
    label above field: True
---
template: wants_no_sexual_assault_threats_to_others_explained
subject: |
  When should I answer yes?
content: |
  You might answer Yes to this if there are other people ${ other_parties[0].name } has threatened to sexually assault, kill, or physically injure, such as your children, specific relatives, or specific friends.
---
id: ppo_sexual_assault_threat_protectees there_is_another
question: |
  Anyone else to add?
subquestion: |
  ${ collapse_template(ppo_sexual_assault_threat_protectees_listed_so_far) }
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to **threaten to sexually assault, kill or physically injure** another person not yet listed?: ppo_sexual_assault_threat_protectees.there_is_another
    datatype: yesnoradio
    label above field: True
---
template: ppo_sexual_assault_threat_protectees_listed_so_far
subject: Who have I listed so far?
content: |
  % if (len(ppo_sexual_assault_threat_protectees.complete_elements()) > 0) or wants_no_sexual_assault_threats:
  So far, you have listed:

  % if wants_no_sexual_assault_threats:
    - Yourself
  % endif
  % for person in ppo_sexual_assault_threat_protectees.complete_elements():
    - ${ person }
  % endfor
  % else:
  You have not listed anyone yet.
  % endif
---
id: wants_no_access_to_personal_info_records
question: |
  Access to child's information
subquestion: |
  ${ collapse_template(wants_no_access_to_personal_info_records_explained) }
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to have access to information in your child's records that shows your (or your child's) home address, phone number, or work address?: wants_no_access_to_personal_info_records
    datatype: yesnoradio
    label above field: True
---
template: wants_no_access_to_personal_info_records_explained
subject: |
  When would I answer yes?
content: |
  You might ask for this protection if you and ${ other_parties[0].name } have a child or children in common and you don't want ${ other_parties[0].name } to know your address or other contact information. This protection applies to records such as school records, Friend of the Court records, records kept by your child's doctor, and other records that contain this information.
---
id: no_mental_distress_or_control_choices
question: |
  Do you want the judge to order ${ other_parties[0].name } not to intentionally cause you mental distress or control you, including the following behaviors?
fields:
  - Which behaviors do you want the judge to order ${ other_parties[0].name } **not** to do? Check all that apply.: no_mental_distress_or_control_choices
    datatype: checkboxes
    label above field: True
    choices:
      - Injuring, killing, torturing, or neglecting any animal that you own, or threatening to do any of those things: harming_animal
      - Removing any animal you own from your possession: removing_animal
      - Keeping any animal you own from you, or taking possession of it: keeping_animal
---
id: wants_no_firearm_purchase_or_possession
question: |
  Prohibiting gun possession
fields:
  - Do you want the judge to order ${ other_parties[0].name } not to buy or have a gun?: wants_no_firearm_purchase_or_possession
    datatype: yesnoradio
    label above field: True
---
id: wants_no_message_posting
question: |
  % if ppo_type == "nondomestic_sexual_assault":
  Do you want the judge to order ${ other_parties[0].name } not to post electronic messages with the intent to make other people harrass you?
  % elif ppo_type == "nondomestic":
  Do you want the judge to order ${ other_parties[0].name } not to harrass you by posting messages?
  % endif
subquestion: |
  % if ppo_type == "nondomestic_sexual_assault":
  ${ other_parties[0].name } would be prohibited from posting electronic messages with the intent to cause others to contact you in a way that would make you feel terrorized, frightened, intimidated, threatened, harassed, or molested.
  % elif ppo_type == "nondomestic":
  This includes sending you messages through **any method**, including the Internet or any electronic medium. 

  ${ other_parties[0].name } would be prohibited from using social media, such as Facebook or Twitter, or falsely using your name to send messages to other people in order to harass you.
  % endif
fields:
  - Do you want protection from harassing messages?: wants_no_message_posting
    datatype: yesnoradio
---
id: wants_other_request
question: |
  Other requests
subquestion: |
  ${ collapse_template(wants_other_request_explained) }
fields:
  - Is there anything else you want the judge to order in the PPO?: wants_other_request
    datatype: yesnoradio
    label above field: True
  - List the other things you want the judge to order ${ other_parties[0].name } not to do.: other_request_exp
    input type: area
    label above field: True
    show if:
      variable: wants_other_request
      is: True
---
template: wants_other_request_explained
subject: |
  What are some examples?
content: |
  This is the place where you can ask the judge to prohibit other behavior you did not already ask for and/or where you can ask the judge to make exceptions for some situations.

  For example, prohibit ${ other_parties[0].name } from:

    * Interfering with access to your driver's license or other important papers

    * Interfering with your use of a vehicle or removing your vehicle from you
---
id: will need ex parte order
question: |
  You will be requesting an **ex parte** order
subquestion: |
  An ex parte order is an order that the judge signs without having a court hearing first. In ${ county_choice } County, all PPO petitions are viewed as ex parte petitions. 

  After you file your petition, the judge will consider it without a hearing and decide 
  whether to grant you a personal protection order within 
  % if county_choice == "Ingham" or county_choice == "Saginaw":
  24 hours.
  % elif county_choice == "Jackson":
  72 hours.
  % elif county_choice == "Wayne":
  24 hours. If the judge does not grant you an ex parte PPO, the court will either schedule the matter
  for a hearing and send you a Notice of Hearing, or it will issue an order denying the petition.
  % endif
continue button field: need_ex_parte
---
id: wants_ex_parte_order
question: |
  Requesting an **ex parte** order
subquestion: |
  An **ex parte** order is an order that the judge signs without having a court hearing first.

  If you ask for an ex parte order, the judge will consider your petition and decide whether to grant your personal protection order within 24 to 72 hours. If you do not ask for an ex parte order or if the judge does not sign your ex parte order, you must have a court hearing before you can get a personal protection order.

  You should request an **ex parte** order if you are afraid you may be harmed before a court hearing can occur or if you are afraid that ${ other_parties[0].name } will harm you when they get notice that you are asking for a PPO.
fields:
  - Would you like to request an **ex parte** order?: wants_ex_parte_order
    datatype: yesnoradio
---
id: ex_parte_yes_screen
question: |
  After you file your petition, the judge will consider it without a hearing and decide whether to grant you a personal protection order.
subquestion: |
  In many courts this will not take longer than 24 hours, but in some courts it can take up to 72 hours. For information about how long it could take in your court, read the instructions that you will get with your forms.
continue button field: ex_parte_yes_screen
---
code: |
  if county_choice == "Wayne" or county_choice == "Oakland":
    ETC_county_status = "required"
  elif county_choice == "Cass" or county_choice == "Gogebic" or county_choice == "Ionia" or county_choice == "Iosco" or county_choice == "Marquette" or county_choice == "Montcalm":
    ETC_county_status = "optional"
  else:
    ETC_county_status = "not_allowed"
  ETC_status_check = True
---
code: |
  if ETC_county_status == "optional" or ETC_county_status == "not_allowed":
    if petitioner_is_minor and (not petitioner_under_fourteen) and (not petitioner_is_emancipated_minor):
      if fourteen_plus_agrees_to_sign == True and next_friend_agrees_to_sign == True:
        signatures_complete = True
      else:
        signatures_complete = False
    elif is_incapacitated_adult or (petitioner_is_minor and (not petitioner_is_emancipated_minor)):
      if next_friend_agrees_to_sign == True:
        signatures_complete = True
      else:
        signatures_complete = False
    else:
      if MLH_esign == True:
        signatures_complete = True
      else:
        signatures_complete = False
---
only sets: ETC_esign
code: |
  if petitioner_is_minor and (not petitioner_under_fourteen) and (not petitioner_is_emancipated_minor):
    next_friend_agrees_to_sign = True
    fourteen_plus_agrees_to_sign = True
  elif is_incapacitated_adult or (petitioner_is_minor and (not petitioner_is_emancipated_minor)):
    next_friend_agrees_to_sign = True
  else:
    MLH_esign = True
  signature_date
  signatures_complete = True
  ETC_esign = True
---
code: |
  ETC_court_phones = {'Cass': '269-445-4416', 'Ionia': '616-527-5322', 'Montcalm': '989-831-3520, option 1', 'Wayne': '313-967-3579', 'Oakland': '248-303-1534'}
---
code: |
  if len(next_friends.complete_elements()) > 0:
    etc_cover_contact_info = f"Petitioner: { next_friends[0] }, next friend for { users[0] }; "
  else:
    etc_cover_contact_info = f"Petitioner: { users[0] }; "
  etc_cover_contact_info += f"Email: { contact_email }"
---
id: ETC optional info
continue button field: ETC_optional_info
question: |
  ${ county_choice } County Circuit Court Accepts Direct E-mail Filing from MLH-Forms
subquestion: |
  You can choose whether to: 

  * file your forms right away with a direct email from this tool, 
  * wait and file later, or 
  * download and file your forms in another way.

  On the next few screens you can choose whether to e-sign and attach any documents you want the judge to see. Then you can review your forms and, if you want, file by direct e-mail from this tool.
---
id: ETC required info
continue button field: ETC_required_info
continue button label: "E-sign and continue"
question: |
  ${ county_choice } County Circuit Court Requires Direct E-mail Filing from MLH-Forms
subquestion: |
  When you're ready, you will email your forms to the ${ county_choice } Circuit Court directly from this tool.

  % if petitioner_is_minor and (not petitioner_under_fourteen) and (not petitioner_is_emancipated_minor):
  This tool will add "**/s/ ${ next_friends[0] }**" and "**/s/ ${ users[0] }**" as e-signatures where needed on the forms. Continue only if both of you agree to e-sign.
  % elif is_incapacitated_adult or (petitioner_is_minor and (not petitioner_is_emancipated_minor)):
  This tool will add "**/s/ ${ next_friends[0] }**" as the next friend's e-signature on the forms. Continue only if ${ next_friends[0] } agrees to e-sign.
  % else:
  This tool will add "**/s/ ${ users[0] }**" as your e-signature on the forms. Continue only if you agree to e-sign.
  % endif
under: |
  ${ collapse_template(signature_info_template) }

  ${ sign_in_message }
---
id: ETC required, collect email
continue button field: ETC_required_email_collect
question: |
  Contact E-mail
subquestion: |
  % if is_incapacitated_adult or (petitioner_is_minor and (not petitioner_is_emancipated_minor)):
  Enter an e-mail address that **${ next_friends[0] }** checks often and does not share with anyone else.

  When you send your forms to the court, a copy will go to this e-mail address. Court staff may also e-mail ${ next_friends[0] } at this address.
  % else:
  Enter an e-mail address that you check often and do not share with anyone else. When you send your forms to the court, a copy will go to this e-mail address. Court staff may also e-mail you at this address.
  % endif
fields:
  - Contact e-mail address: contact_email
    datatype: email
---
id: ETC review and download docs DownloadScreen
continue button field: ETC_review_docs_screen
progress: 99
continue button label: "I want to file now by e-mail"
question: |
  Review your forms
subquestion: |
  <h2 class="h3">Review and Finalize Your Forms </h2>

  Your forms are ready. View or download your forms below. Tap **✎ Review / Edit** to fix any mistakes.

  ${ action_button_html(url_action('review_full'), label='✎ Review / Edit', color='info', size="md") }

  ${ al_user_bundle.download_list_html() }

  ${ collapse_template(email_to_self_option) }

  <h2 class="h3">Ready to file?</h2>
  % if ETC_county_status == "required":
  Tap the button below when you're ready to e-mail your forms to the court. 
  % else:
  % if not signatures_complete:
  Tap the button below if you want to finish e-signing and file now by e-mail. 
  % else:
  Tap the button below if you want to file now by e-mail. 
  % endif  

  If you prefer to file in a different way, read the **Instructions** to learn about your options.
  % endif

  ${ collapse_template(wait_to_file_help) }
under: |
  It may **take a few minutes** to get to the next screen. You do not need to refresh.
  
  ${ sign_in_message }
---
template: email_to_self_option
subject: |
  Want to email these forms to yourself or someone you trust?
content: |
  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

  This does **not** file your forms with the court. This is to send a copy to yourself or someone you trust. To file with the court, tap the **I want to file now by e-mail** button below.
---
continue button field: ETC_review_exhibits
id: exhibit review for ETC optional counties
question: |
  Have you attached all the documents you want the judge to see?
review:
  - note: |
      Review your answers below and add any documents you want the court to see. When you're finished, tap **${MLH_continue_button_label}**.
  - Edit:
      - exhibit_attachment.exhibits.has_exhibits
    button: |
      **Do you have documents you want the judge to see?**:

      % if exhibit_attachment.exhibits.has_exhibits:
      Yes
      % elif not exhibit_attachment.exhibits.has_exhibits:
      No
      % endif
  - note: |
      **Uploaded Documents**

      % if exhibit_attachment.exhibits.there_are_any:
      ${ collapse_template(exhibit_attachment.exhibits.in_progress_exhibits) }
      % else:
      You have not uploaded any documents yet.
      % endif

      ${ exhibit_attachment.exhibits.add_action() }

    css class: bg-secondary-subtle
    show if: exhibit_attachment.exhibits.has_exhibits
  - note: |
      ${ collapse_template(no_documents) }
      ${ collapse_template(paper_documents) }
      ${ collapse_template(audiovisual_evidence) }
---
template: wait_to_file_help
subject: |
  What if I'm not ready to file yet?
content: |
  % if not user_logged_in():
  **Important:** To save your forms here for later, you must **sign in or sign up** now using the menu at the top right of the page or the link below. 

  % else:
  You can log back in later to:

  * update your forms,
  * download your forms, or
  * email your forms to the court with the button below.

  Your forms will be **saved here for 180 days**. To restart the 180 day clock and keep your forms here for longer:

  * come back to [forms.michiganlegalhelp.org](forms.michiganlegalhelp.org),
  * sign in, and
  * open this form by selecting it on the My Forms page. 

  Opening this form again restarts the 180 days.
  % endif
---
id: email to clerk details
continue button field: clerk_email_prep
continue button label: |
  % if signatures_complete:
  :file-export: Submit
  % else:
  :file-export: E-sign and Submit
  % endif
question: |
  Submit your forms to the court
subquestion: |
  % if not defined('contact_email'):
  % if is_incapacitated_adult or (petitioner_is_minor and (not petitioner_is_emancipated_minor)):
  Enter an e-mail address that **${ next_friends[0] }** checks often and does not share with anyone else.

  When you send your forms to the court, a copy will go to this e-mail address. Court staff may also e-mail ${ next_friends[0] } at this address.
  % else:
  Enter an e-mail address that you check often and do not share with anyone else. When you send your forms to the court, a copy will go to this e-mail address. Court staff may also e-mail you at this address.
  % endif
  % endif
fields:
  - Contact e-mail address: contact_email
    default: |
      % if defined('contact_email'):
      ${ contact_email }
      % endif
    datatype: email
  - Notes for the court clerk (optional): notes_to_clerk
    input type: area
    rows: 3
    maxlength: 200
    required: False
  - note: |
      % if not signatures_complete:
      Because these forms will be e-mailed directly to the court, **e-signatures are required**. 
      % if petitioner_is_minor and (not petitioner_under_fourteen) and (not petitioner_is_emancipated_minor):
      This tool will add "**/s/ ${ next_friends[0] }**" and "**/s/ ${ users[0] }**" as e-signatures where needed on the forms. Continue only if both of you agree to e-sign.
      % elif is_incapacitated_adult or (petitioner_is_minor and (not petitioner_is_emancipated_minor)):
      This tool will add "**/s/ ${ next_friends[0] }**" as the next friend's e-signature on the forms. Continue only if ${ next_friends[0] } agrees to e-sign.
      % else:
      This tool will add "**/s/ ${ users[0] }**" as your e-signature on the forms. Continue only if you agree to e-sign.
      % endif
      % endif
under: |
  % if signatures_complete:
  Tap **Submit** to send your forms to the court now. It may **take a few minutes** to get to the confirmation screen. You do not need to refresh.
  % else:
  Tap **E-sign and Submit** to send your forms to the court now. It may **take a few minutes** to get to the confirmation screen. You do not need to refresh.
  % endif

  ${ sign_in_message }
---
only sets: clerk_email_sent_ok
code: |
  recipient = get_config(f'{ county_choice } ETC address')
  clerk_email_sent_ok = al_court_bundle.send_email(to=recipient, cc=contact_email, template=clerk_email) 
  if clerk_email_sent_ok:
    prevent_going_back()
    ETC_submitted_county = county_choice
---
# this is a transitional step because anyone who submitted forms prior to 1.0.5 will not have ETC_submitted_county defined
code: |
  ETC_submitted_county = county_choice
---
template: clerk_email
subject: |
  % if len(next_friends.complete_elements()) > 0:
  PPO Petition by ${ next_friends[0] }, next friend for ${ users[0] }
  % else:
  PPO Petition by ${ users[0] }
  % endif
content: |
  % if len(next_friends.complete_elements()) > 0:
  ${ next_friends[0] } (next friend for ${ users[0] }) is filing a PPO petition via MLH-forms.
  % else:
  ${ users[0] } is filing a PPO petition via MLH-Forms.
  % endif

  Petitioner contact information: ${ contact_email }

  **Optional note from sender:** ${ notes_to_clerk }
---
id: patience download
continue button field: have_patience_download
question: |
  Almost done
subquestion: |
  After you tap **${MLH_continue_button_label}**, it may take a few minutes to finish making your forms.

  You **do not** need to refresh your screen. Hang in there!
---
id: email confirmation ETCSent1
continue button field: email_status_sent
prevent going back: True
question: |
  Your forms were e-mailed to the court!
subquestion: |
  Your forms **were e-mailed** to the ${ ETC_submitted_county } County Circuit Court. 
  % if ETC_submitted_county == "Oakland":
  If you do not get an email from the PPO Office within 1 business day, please call ${ ETC_court_phones[ETC_submitted_county] }.
  % elif ETC_submitted_county in ETC_court_phones:
  You can contact the court to confirm your forms were processed at: ${ ETC_court_phones[ETC_submitted_county] }.
  % endif

  **Important:** Read the **Instructions** document for what to do next. 

  Changes made to answers in this program **will not** appear on the court's copy of your forms unless you resubmit them to the court.

  To get a copy of your forms or instructions, or if you need to resubmit your forms to the court, tap **${MLH_continue_button_label}**. 
under: |
  It may **take a few minutes** to get to the next screen. You do not need to refresh.

  ${ sign_in_message }
---
id: email not sent ETCFailed1
continue button field: email_status_failed
question: |
  Email Error
subquestion: |
  There was an error with our email system. **Your forms were NOT sent to the court.**

  Tap **${ MLH_back_button_label }** to return to the Submit page and try again. 

  Or tap "Continue" to download your forms.
under: |
  It may **take a few minutes** to get to the next screen. You do not need to refresh.

  ${ sign_in_message }
---
id: email to court success screen ETCSent2
progress: 100
prevent going back: True
event: ETC_success
question: |
  Your forms were e-mailed to the court!
subquestion: |
  Your forms **were e-mailed** to the ${ ETC_submitted_county } County Circuit Court. 
  % if ETC_submitted_county == "Oakland":
  If you do not get an email from the PPO Office within 1 business day, please call ${ ETC_court_phones[ETC_submitted_county] }.
  % elif ETC_submitted_county in ETC_court_phones:
  You can contact the court to confirm your forms were processed at: ${ ETC_court_phones[ETC_submitted_county] }.
  % endif

  You can download your forms or email them to yourself. Any edits you make now will **not** be on the court's copy unless you resubmit your forms to the court.

  <h2 class="h3">Download, e-mail, or resubmit your ${ MLH_form_type }</h2>
  ${ al_user_bundle.download_list_html() }

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

  ${ collapse_template(resubmit_option) } 

  <h2 class="h3">Take our quick survey!</h2>
  Answer below or [open the survey in a new tab](${ survey_link_url_only }).
  ${ survey_embed_script }
---
template: resubmit_option
subject: |
  Need to **resubmit** your forms to the court?
content: |
  You should only use the **Resubmit** button if ${ ETC_submitted_county } County court staff told you to resubmit your forms.
  
  If you need to make edits, tap "✎ Review / Edit" **before** you resubmit. 

  ${ action_button_html(url_action('resubmit_ETC'),
                        label='Resubmit forms now',
                        size='md',
                        color='warning') }
---
event: resubmit_ETC
code: |
  al_court_bundle.send_email(to=recipient, cc=contact_email, template=resubmit_clerk_email) 
---
template: resubmit_clerk_email
subject: |
  % if len(next_friends.complete_elements()) > 0:
  Resubmitted PPO Petition by ${ next_friends[0] }, next friend for ${ users[0] }
  % else:
  Resubmitted PPO Petition by ${ users[0] }
  % endif
content: |
  % if len(next_friends.complete_elements()) > 0:
  ${ next_friends[0] } (next friend for ${ users[0] }) is **resubmitting** a PPO petition via MLH-forms.
  % else:
  ${ users[0] } is **resubmitting** a PPO petition via MLH-Forms.
  % endif

  Petitioner contact information: ${ contact_email }
---
id: email to court error screen ETCFailed2
event: ETC_error
question: |
  E-mail error!
subquestion: |
  **Your forms were NOT sent to the court.**

  Tap **${ MLH_back_button_label }** to try again. You can also download your forms below. 

  <h2 class="h3">Download or e-mail your ${ MLH_form_type }</h2>
  ${ al_user_bundle.download_list_html() }

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

  <h2 class="h3">Take our quick survey!</h2>
  Answer below or [open the survey in a new tab](${ survey_link_url_only }).
  ${ survey_embed_script }
---
code: |
  stuff_to_snapshot['ETC_sent'] = showifdef('clerk_email_sent_ok')
  stuff_to_snapshot['ETC_county'] = showifdef('county_choice')
  stuff_to_snapshot['ETC_time'] = str(current_datetime().format_datetime(format='yyyy-MM-dd h:mm a'))
  reconsider('snapshot_interview_state')
  snapshot_ETC = True
---
# if no ETC, trying out sending to MLH_download
# id: download screen
# event: personal_protection_order_download
# progress: 100
# question: |
#   All done!
# subquestion: |
#   Thank you ${users}. Your form is ready to download and deliver.
# 
#   View, download and send your form below. Tap the "✎ Review / Edit" button to fix any mistakes.
# 
#   ${ action_button_html(url_action('review_full'), label='✎ Review / Edit', color='info') }
# 
#   ${ al_user_bundle.download_list_html() }
# 
#   ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }
# ---
generic object: ALDocumentBundle
template: x.send_email_template
subject: |
  Your Personal Protection Order petition documents are ready
content: |
  The documents you'll need to ask the court for a Personal Protection Order are attached.
---
#################### Documents Start #####################
---
objects:
  - pet_proof_of_serv_domestic: ALDocument.using(title="Proof of Service", filename="Proof of Service", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - pet_proof_of_serv_nondomestic: ALDocument.using(title="Proof of Service", filename="Proof of Service", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - pet_proof_of_serv_nondomestic_sa: ALDocument.using(title="Proof of Service", filename="Proof of Service", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - pet_proof_of_serv_domestic_minor: ALDocument.using(title="Proof of Service (Minor)", filename="Proof of Service (Minor)", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - pet_proof_of_serv_nondomestic_minor: ALDocument.using(title="Proof of Service (Minor)", filename="Proof of Service (Minor)", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - pet_proof_of_serv_nondomestic_sa_minor: ALDocument.using(title="Proof of Service (Minor)", filename="Proof of Service (Minor)", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - identifying_information: ALDocument.using(title="Identifying Information", filename="Identifying Information", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - ppo_cc_375: ALDocument.using(title="Petition for Personal Protection Order (Domestic Relationship) - CC 375", filename="Petition for Personal Protection Order (Domestic Relationship) - CC 375", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - ppo_cc_375m: ALDocument.using(title="Petition for Personal Protection Order Against a Minor (Domestic Relationship) - CC 375m", filename="Petition for Personal Protection Order Against a Minor (Domestic Relationship) - CC 375m", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - ppo_cc_377: ALDocument.using(title="Petition for Personal Protection Order (Non-Domestic Relationship) - CC 377", filename="Petition for Personal Protection Order (Non-Domestic Relationship) - CC 377", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - ppo_cc_377m: ALDocument.using(title="Petition for Personal Protection Order Against a Minor (Non-Domestic Relationship) - CC 377m", filename="Petition for Personal Protection Order Against a Minor (Non-Domestic Relationship) - CC 377m", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - cc_375_statement: ALDocument.using(title="Petition for Personal Protection Order (Domestic Relationship) Statement of Facts", filename="Petition for Personal Protection Order (Domestic Relationship) Statement of Facts", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - cc_377_statement: ALDocument.using(title="Petition for Personal Protection Order (Non-Domestic Relationship) Statement of Facts", filename="Petition for Personal Protection Order (Non-Domestic Relationship) Statement of Facts", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - cc_375_attachment: ALDocument.using(title="Petition for Personal Protection Order (Domestic Relationship) Attachment", filename="Petition for Personal Protection Order (Domestic Relationship) Attachment", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - cc_377_attachment: ALDocument.using(title="Petition for Personal Protection Order (Non-Domestic Relationship) Attachment", filename="Petition for Personal Protection Order (Non-Domestic Relationship) Attachment", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - cc_395_attachment: ALDocument.using(title="Petition for Personal Protection Order (Non-Domestic Sexual Assault) Attachment", filename="Petition for Personal Protection Order (Non-Domestic Sexual Assault) Attachment", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - ppo_cc_376: ALDocument.using(title="Personal Protection Order (Domestic Relationship) - CC 376", filename="Personal Protection Order (Domestic Relationship) - CC 376", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - ppo_cc_376m: ALDocument.using(title="Personal Protection Order Against Minor (Domestic Relationship) - CC 376M", filename="Personal Protection Order Against Minor (Domestic Relationship) - CC 376M", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - ppo_cc_380: ALDocument.using(title="Personal Protection Order (Non-Domestic Relationship) - CC 380", filename="Personal Protection Order (Non-Domestic Relationship) - CC 380", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - ppo_cc_380m: ALDocument.using(title="Personal Protection Order Against Minor (Non-Domestic Relationship) - CC 380M", filename="Personal Protection Order Against Minor (Non-Domestic Relationship) - CC 380M", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - ppo_cc_396: ALDocument.using(title="Personal Protection Order (Non-Domestic Sexual Assault) - CC 396", filename="Personal Protection Order (Non-Domestic Sexual Assault) - CC 396", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - ppo_cc_396m: ALDocument.using(title="Personal Protection Order Against Minor (Non-Domestic Sexual Assault) - CC 396M", filename="Personal Protection Order Against Minor (Non-Domestic Sexual Assault) - CC 396M", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - ppo_cc_395: ALDocument.using(title="Petition for Personal Protection Order (Non-Domestic Sexual Assault) - CC 395", filename="Petition for Personal Protection Order (Non-Domestic Sexual Assault) - CC 395", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - ppo_cc_395m: ALDocument.using(title="Petition for Personal Protection Order Against a Minor (Non-Domestic Sexual Assault) - CC 395m", filename="Petition for Personal Protection Order Against a Minor (Non-Domestic Sexual Assault) - CC 395m", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - ppo_cc_381: ALDocument.using(title="Notice of Hearing - CC 381", filename="Notice of Hearing - CC 381", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - cc_395_statement: ALDocument.using(title="Petition for Personal Protection Order (Non-Domestic Sexual Assault) Statement of Facts", filename="Petition for Personal Protection Order (Non-Domestic Sexual Assault) Statement of Facts", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - ppo_contact_information_sheet: ALDocument.using(title="Contact Information Sheet", filename="Contact Information Sheet", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[instructions, ppo_domestic_attachment, ppo_nondomestic_attachment, ppo_nondomestic_sexual_assault_attachment, ppo_domestic_minor_attachment, ppo_nondomestic_minor_attachment, ppo_nondomestic_sexual_assault_minor_attachment, exhibit_attachment, ppo_mc_319, pet_proof_of_serv_domestic, pet_proof_of_serv_domestic_minor, pet_proof_of_serv_nondomestic, pet_proof_of_serv_nondomestic_minor, pet_proof_of_serv_nondomestic_sa, pet_proof_of_serv_nondomestic_sa_minor, ppo_cc_381, ppo_cc_376, ppo_cc_376m, ppo_cc_380, ppo_cc_380m, ppo_cc_396, ppo_cc_396m, ppo_contact_information_sheet], filename="Personal Protection Order Petition and Proposed Order.pdf", title="All forms to download for your records", enabled=True)
---
objects:
  - al_court_bundle: ALDocumentBundle.using(elements=[ppo_domestic_attachment_court, ppo_nondomestic_attachment_court, ppo_nondomestic_sexual_assault_attachment_court, ppo_domestic_minor_attachment_court, ppo_nondomestic_minor_attachment_court, ppo_nondomestic_sexual_assault_minor_attachment_court, exhibit_attachment, ppo_mc_319, pet_proof_of_serv_domestic, pet_proof_of_serv_domestic_minor, pet_proof_of_serv_nondomestic, pet_proof_of_serv_nondomestic_minor, pet_proof_of_serv_nondomestic_sa, pet_proof_of_serv_nondomestic_sa_minor, ppo_cc_381, ppo_cc_376, ppo_cc_376m, ppo_cc_380, ppo_cc_380m, ppo_cc_396, ppo_cc_396m, ppo_contact_information_sheet], filename="Personal Protection Order Petition and Proposed Order.pdf", title="All forms to file", enabled=True)
---
objects:
  - ppo_cc_375_etc: ALDocumentBundle.using(elements=[etc_cover_page, ppo_cc_375], title="Petition for Personal Protection Order (Domestic Relationship) - CC 375", filename="Petition for Personal Protection Order (Domestic Relationship) - CC 375")
  - ppo_cc_375m_etc: ALDocumentBundle.using(elements=[etc_cover_page, ppo_cc_375m],title="Petition for Personal Protection Order Against a Minor (Domestic Relationship) - CC 375m", filename="Petition for Personal Protection Order Against a Minor (Domestic Relationship) - CC 375m")
  - ppo_cc_377_etc: ALDocumentBundle.using(elements=[etc_cover_page, ppo_cc_377], title="Petition for Personal Protection Order (Non-Domestic Relationship) - CC 377", filename="Petition for Personal Protection Order (Non-Domestic Relationship) - CC 377")
  - ppo_cc_377m_etc: ALDocumentBundle.using(elements=[etc_cover_page, ppo_cc_377m], title="Petition for Personal Protection Order Against a Minor (Non-Domestic Relationship) - CC 377m", filename="Petition for Personal Protection Order Against a Minor (Non-Domestic Relationship) - CC 377m")
  - ppo_cc_395_etc: ALDocumentBundle.using(elements=[etc_cover_page, ppo_cc_395], title="Petition for Personal Protection Order (Non-Domestic Sexual Assault) - CC 395", filename="Petition for Personal Protection Order (Non-Domestic Sexual Assault) - CC 395")
  - ppo_cc_395m_etc: ALDocumentBundle.using(elements=[etc_cover_page, ppo_cc_395m],title="Petition for Personal Protection Order Against a Minor (Non-Domestic Sexual Assault) - CC 395m", filename="Petition for Personal Protection Order Against a Minor (Non-Domestic Sexual Assault) - CC 395m")
---
objects:
  - ppo_domestic_attachment: ALDocumentBundle.using(elements=[ppo_cc_375, cc_375_statement, identifying_information, cc_375_attachment], filename="Petition for Personal Protection Order (Domestic Relationship) - CC 375.pdf", title="Petition for Personal Protection Order (Domestic Relationship) - CC 375")
  - ppo_domestic_minor_attachment: ALDocumentBundle.using(elements=[ppo_cc_375m, cc_375_statement, identifying_information, cc_375_attachment], filename="Petition for Personal Protection Order Against a Minor (Domestic Relationship) - CC 375m.pdf", title="Petition for Personal Protection Order Against a Minor (Domestic Relationship) - CC 375m")
  - ppo_nondomestic_attachment: ALDocumentBundle.using(elements=[ppo_cc_377, cc_377_statement, identifying_information, cc_377_attachment], filename="Petition for Personal Protection Order (Non-Domestic Relationship) - CC 377.pdf", title="Petition for Personal Protection Order (Non-Domestic Relationship) - CC 377")
  - ppo_nondomestic_minor_attachment: ALDocumentBundle.using(elements=[ppo_cc_377m, cc_377_statement, identifying_information, cc_377_attachment], filename="Petition for Personal Protection Order Against a Minor (Non-Domestic Relationship) - CC 377m.pdf", title="Petition for Personal Protection Order Against a Minor (Non-Domestic Relationship) - CC 377m")
  - ppo_nondomestic_sexual_assault_attachment: ALDocumentBundle.using(elements=[ppo_cc_395, cc_395_statement, identifying_information, cc_395_attachment], filename="Petition for Personal Protection Order (Non-Domestic Sexual Assault) - CC 395.pdf", title="Petition for Personal Protection Order (Non-Domestic Sexual Assault) - CC 395")
  - ppo_nondomestic_sexual_assault_minor_attachment: ALDocumentBundle.using(elements=[ppo_cc_395m, cc_395_statement, identifying_information, cc_395_attachment], filename="Petition for Personal Protection Order Against a Minor (Non-Domestic Sexual Assault) - CC 395m.pdf", title="Petition for Personal Protection Order Against a Minor (Non-Domestic Sexual Assault) - CC 395m")
  - ppo_domestic_attachment_court: ALDocumentBundle.using(elements=[ppo_cc_375_etc, cc_375_statement, identifying_information, cc_375_attachment], filename="Petition for Personal Protection Order (Domestic Relationship) - CC 375.pdf", title="Petition for Personal Protection Order (Domestic Relationship) - CC 375")
  - ppo_domestic_minor_attachment_court: ALDocumentBundle.using(elements=[ppo_cc_375m_etc, cc_375_statement, identifying_information, cc_375_attachment], filename="Petition for Personal Protection Order Against a Minor (Domestic Relationship) - CC 375m.pdf", title="Petition for Personal Protection Order Against a Minor (Domestic Relationship) - CC 375m")
  - ppo_nondomestic_attachment_court: ALDocumentBundle.using(elements=[ppo_cc_377_etc, cc_377_statement, identifying_information, cc_377_attachment], filename="Petition for Personal Protection Order (Non-Domestic Relationship) - CC 377.pdf", title="Petition for Personal Protection Order (Non-Domestic Relationship) - CC 377")
  - ppo_nondomestic_minor_attachment_court: ALDocumentBundle.using(elements=[ppo_cc_377m_etc, cc_377_statement, identifying_information, cc_377_attachment], filename="Petition for Personal Protection Order Against a Minor (Non-Domestic Relationship) - CC 377m.pdf", title="Petition for Personal Protection Order Against a Minor (Non-Domestic Relationship) - CC 377m")
  - ppo_nondomestic_sexual_assault_attachment_court: ALDocumentBundle.using(elements=[ppo_cc_395_etc, cc_395_statement, identifying_information, cc_395_attachment], filename="Petition for Personal Protection Order (Non-Domestic Sexual Assault) - CC 395.pdf", title="Petition for Personal Protection Order (Non-Domestic Sexual Assault) - CC 395")
  - ppo_nondomestic_sexual_assault_minor_attachment_court: ALDocumentBundle.using(elements=[ppo_cc_395m_etc, cc_395_statement, identifying_information, cc_395_attachment], filename="Petition for Personal Protection Order Against a Minor (Non-Domestic Sexual Assault) - CC 395m.pdf", title="Petition for Personal Protection Order Against a Minor (Non-Domestic Sexual Assault) - CC 395m")
  - ppo_mc_319: ALDocument.using(title="Request for Next Friend - MC 319", filename="Request for Next Friend - MC 319", default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
---
objects:
  - etc_cover_page: ALDocument.using(title="ETC Cover Page", filename="ETC Cover Page")
  - instructions_after_hearing: ALDocument.using(title="Instructions After Hearing", filename="Instructions After Hearing", enabled=True)
  - oakland_county_instructions_after_hearing: ALDocument.using(title="Instructions After Hearing", filename="Instructions After Hearing", enabled=True)
  - instructions_ex_parte: ALDocument.using(title="Ex Parte Instructions", filename="Ex Parte Instructions", enabled=True)
  - oakland_county_instructions_ex_parte: ALDocument.using(title="Ex Parte Instructions", filename="Ex Parte Instructions", enabled=True)
  - instructions: ALDocument.using(filename="Instructions - Do not file this", title="Instructions", enabled=True, has_addendum=False)
  - exhibit_attachment: ALExhibitDocument.using(title="Exhibits to Personal Protection Order", filename="Exhibits to Personal Protection Order", include_exhibit_cover_pages=False, add_page_numbers=True)
---
code: |
  if county_choice == "Wayne":
    identifying_information.enabled = True
  else:
    identifying_information.enabled = False
---
code: |
  if defined('ex_parte_required_county'):
    if county_choice == "Ingham" or county_choice == "Jackson" or county_choice == "Wayne" or county_choice == "Saginaw":
      wants_ex_parte_order = True
      undefine('need_ex_parte')
      ex_parte_required_county = True
    else:
      if ex_parte_required_county == True:
        undefine('wants_ex_parte_order')
        undefine('ex_parte_yes_screen')
      ex_parte_required_county = False
  
  reset_ex_parte = True
---
code: |
  if ppo_type == "domestic":
    cc_375_statement.enabled = True
    if respondent_is_minor and not respondent_is_emancipated_minor:
      ppo_domestic_attachment.enabled = False
      ppo_domestic_attachment_court.enabled = False
      ppo_domestic_minor_attachment.enabled = True
      ppo_domestic_minor_attachment_court.enabled = True
      ppo_cc_375m.enabled = True
      ppo_cc_375m_etc.enabled = True
    else:
      ppo_domestic_attachment.enabled = True
      ppo_domestic_attachment_court.enabled = True
      ppo_domestic_minor_attachment.enabled = False
      ppo_domestic_minor_attachment_court.enabled = False
      ppo_cc_375.enabled = True
      ppo_cc_375_etc.enabled = True
    ppo_nondomestic_sexual_assault_attachment.enabled = False
    ppo_nondomestic_sexual_assault_attachment_court.enabled = False
    ppo_nondomestic_sexual_assault_minor_attachment.enabled = False
    ppo_nondomestic_sexual_assault_minor_attachment_court.enabled = False
    ppo_nondomestic_attachment.enabled = False
    ppo_nondomestic_attachment_court.enabled = False
    ppo_nondomestic_minor_attachment.enabled = False
    ppo_nondomestic_minor_attachment_court.enabled = False
  elif ppo_type == "nondomestic":
    cc_377_statement.enabled = True
    if respondent_is_minor and not respondent_is_emancipated_minor:
      ppo_nondomestic_attachment.enabled = False
      ppo_nondomestic_attachment_court.enabled = False
      ppo_nondomestic_minor_attachment.enabled = True
      ppo_nondomestic_minor_attachment_court.enabled = True
      ppo_cc_377m.enabled = True
      ppo_cc_377m_etc.enabled = True
    else:
      ppo_nondomestic_attachment.enabled = True
      ppo_nondomestic_attachment_court.enabled = True
      ppo_nondomestic_minor_attachment.enabled = False
      ppo_nondomestic_minor_attachment_court.enabled = False
      ppo_cc_377.enabled = True
      ppo_cc_377_etc.enabled = True
    ppo_domestic_attachment_court.enabled = False
    ppo_domestic_attachment.enabled = False
    ppo_domestic_minor_attachment_court.enabled = False
    ppo_domestic_minor_attachment.enabled = False
    ppo_nondomestic_sexual_assault_attachment.enabled = False
    ppo_nondomestic_sexual_assault_attachment_court.enabled = False
    ppo_nondomestic_sexual_assault_minor_attachment.enabled = False
    ppo_nondomestic_sexual_assault_minor_attachment_court.enabled = False
  else:
    cc_395_statement.enabled = True
    if respondent_is_minor and not respondent_is_emancipated_minor:
      ppo_nondomestic_sexual_assault_attachment.enabled = False
      ppo_nondomestic_sexual_assault_attachment_court.enabled = False
      ppo_nondomestic_sexual_assault_minor_attachment.enabled = True
      ppo_nondomestic_sexual_assault_minor_attachment_court.enabled = True
      ppo_cc_395m.enabled = True
      ppo_cc_395m_etc.enabled = True
    else:
      ppo_nondomestic_sexual_assault_attachment.enabled = True
      ppo_nondomestic_sexual_assault_attachment_court.enabled = True
      ppo_nondomestic_sexual_assault_minor_attachment.enabled = False
      ppo_nondomestic_sexual_assault_minor_attachment_court.enabled = False
      ppo_cc_395.enabled = True
      ppo_cc_395_etc.enabled = True
    ppo_domestic_attachment_court.enabled = False
    ppo_domestic_attachment.enabled = False
    ppo_domestic_minor_attachment_court.enabled = False
    ppo_domestic_minor_attachment.enabled = False
    ppo_nondomestic_attachment.enabled = False
    ppo_nondomestic_attachment_court.enabled = False
    ppo_nondomestic_minor_attachment.enabled = False
    ppo_nondomestic_minor_attachment_court.enabled = False
---
code: |
  if ppo_type == "domestic" and county_choice != "Wayne":
    if respondent_is_minor:
      if not respondent_is_emancipated_minor:
        ppo_cc_376m.enabled = True
        ppo_cc_376.enabled = False
      else:
        ppo_cc_376.enabled = True
        ppo_cc_376m.enabled = False
    else:
      ppo_cc_376.enabled = True
      ppo_cc_376m.enabled = False
  else:
    ppo_cc_376.enabled = False
    ppo_cc_376m.enabled = False
---
code: |
  if ppo_type == "nondomestic" and county_choice != "Wayne":
    if respondent_is_minor:
      if not respondent_is_emancipated_minor:
        ppo_cc_380m.enabled = True
        ppo_cc_380.enabled = False
      else:
        ppo_cc_380.enabled = True
        ppo_cc_380m.enabled = False
    else:
      ppo_cc_380.enabled = True
      ppo_cc_380m.enabled = False
  else:
    ppo_cc_380.enabled = False
    ppo_cc_380m.enabled = False
---
code: |
  if ppo_type == "nondomestic_sexual_assault" and county_choice != "Wayne":
    if respondent_is_minor:
      if not respondent_is_emancipated_minor:
        ppo_cc_396m.enabled = True
        ppo_cc_396.enabled = False
      else:
        ppo_cc_396m.enabled = False
        ppo_cc_396.enabled = True
    else:
      ppo_cc_396m.enabled = False
      ppo_cc_396.enabled = True    
  else:
    ppo_cc_396.enabled = False
    ppo_cc_396m.enabled = False
---
code: |
  if wants_ex_parte_order:
    ppo_cc_381.enabled = False
  else:
    ppo_cc_381.enabled = True
---
code: |
  if ppo_type == "domestic" and (pending_actions_between_parties_yes or orders_judgments_re_parties_yes or len(ppo_harm_protectees_list.complete_elements()) > 1 or len(ppo_threat_protectees_list.complete_elements()) > 1 or wants_other_request):
    cc_375_attachment.enabled = True
  else:
    cc_375_attachment.enabled = False
---
code: |
  if ppo_type == "nondomestic" and (pending_actions_between_parties_yes or orders_judgments_re_parties_yes or wants_other_request):
    cc_377_attachment.enabled = True
  else:
    cc_377_attachment.enabled = False
---
code: |
  if ppo_type == "nondomestic_sexual_assault" and (pending_actions_between_parties_yes or orders_judgments_re_parties_yes or len(ppo_sexual_assault_threat_protectees_list) > 1 or wants_other_request):
    cc_395_attachment.enabled = True
  else:
    cc_395_attachment.enabled = False
---
code: |
  if str(county_choice) == "Oakland":
    ppo_contact_information_sheet.enabled = True
    etc_cover_page.enabled = False
  else:
    ppo_contact_information_sheet.enabled = False
    etc_cover_page.enabled = True
---
code: |
  if is_incapacitated_adult or (petitioner_is_minor and (not petitioner_is_emancipated_minor)):
    if has_next_friend_petitioning:
      ppo_mc_319.enabled = True
    else:
      ppo_mc_319.enabled = False
  else:
    ppo_mc_319.enabled = False
---
code: |
  if wants_ex_parte_order:
    pet_proof_of_serv_domestic.enabled = False
    pet_proof_of_serv_domestic_minor.enabled = False
    pet_proof_of_serv_nondomestic.enabled = False
    pet_proof_of_serv_nondomestic_minor.enabled = False
    pet_proof_of_serv_nondomestic_sa.enabled = False
    pet_proof_of_serv_nondomestic_sa_minor.enabled = False
  elif ppo_type == "domestic":
    if respondent_is_minor and not respondent_is_emancipated_minor:
      pet_proof_of_serv_domestic_minor.enabled = True
      pet_proof_of_serv_domestic.enabled = False
    else:
      pet_proof_of_serv_domestic_minor.enabled = False
      pet_proof_of_serv_domestic.enabled = True
    pet_proof_of_serv_nondomestic.enabled = False
    pet_proof_of_serv_nondomestic_minor.enabled = False
    pet_proof_of_serv_nondomestic_sa.enabled = False
    pet_proof_of_serv_nondomestic_sa_minor.enabled = False
  elif ppo_type == "nondomestic":
    if respondent_is_minor and not respondent_is_emancipated_minor:
      pet_proof_of_serv_nondomestic_minor.enabled = True
      pet_proof_of_serv_nondomestic.enabled = False
    else:
      pet_proof_of_serv_nondomestic_minor.enabled = False
      pet_proof_of_serv_nondomestic.enabled = True
    pet_proof_of_serv_domestic_minor.enabled = False
    pet_proof_of_serv_domestic.enabled = False
    pet_proof_of_serv_nondomestic_sa.enabled = False
    pet_proof_of_serv_nondomestic_sa_minor.enabled = False
  elif ppo_type == "nondomestic_sexual_assault":
    if respondent_is_minor and not respondent_is_emancipated_minor:
      pet_proof_of_serv_nondomestic_sa_minor.enabled = True
      pet_proof_of_serv_nondomestic_sa.enabled = False
    else:
      pet_proof_of_serv_nondomestic_sa_minor.enabled = False
      pet_proof_of_serv_nondomestic_sa.enabled = True
    pet_proof_of_serv_nondomestic.enabled = False
    pet_proof_of_serv_nondomestic_minor.enabled = False
    pet_proof_of_serv_domestic_minor.enabled = False
    pet_proof_of_serv_domestic.enabled = False
---
attachment:
  name: instructions
  variable name: instructions[i]
  skip undefined: False
  tagged pdf: True
  docx template file: Instructions_-_Motion.docx
---
attachments:
  name: Request for Next Friend
  filename: Request for Next Friend
  variable name: ppo_mc_319[i]
  skip undefined: True
  editable: False
  pdf template file: mc_319_request_for_next_friend.pdf
  fields:
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
    - trial_court_phone_number: ${ the_court.phone }
    - users1_address_block: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        Confidential
        % else:
        ${ users[0].address.line_one() }
        ${ users[0].address.line_two() }
        % endif
    - users1_phone_number: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        ${ '' }
        % else:
        ${ users[0].phone_number }
        % endif
    - other_parties1_address_block: |
        ${ other_parties[0].name_full() }
        ${ other_parties[0].address.line_one() }
        ${ other_parties[0].address.line_two() }
    - other_parties1_phone_number: |
        % if other_parties[0].no_phone_number:
        Unknown phone
        % else:
        ${ phone_number_formatted(other_parties[0].phone_number) }
        % endif
    - pursuant_to: |
        % if petitioner_is_minor and (not petitioner_under_fourteen) and (not petitioner_is_emancipated_minor) and fourteen_plus_agrees_to_sign:
        ${ MLH_esign_tag }
        % elif (is_incapacitated_adult or (petitioner_is_minor and petitioner_under_fourteen)) and next_friend_agrees_to_sign:
        ${ MLH_esign_tag }
        % else:
        ${ '' }
        % endif
    - pursuant_to_next_friend: |
        % if next_friend_agrees_to_sign:
        ${ MLH_esign_tag }
        % else:
        ${ '' }
        % endif
    - next_friend1_name: ${ next_friends[0].name_full() }
    - requestor_signature: |
        % if petitioner_is_minor and (not petitioner_under_fourteen) and (not petitioner_is_emancipated_minor):
        % if fourteen_plus_agrees_to_sign:
        /s/ ${ users[0].name_full() }
        % else:
        ${ '' }
        % endif
        % elif is_incapacitated_adult or (petitioner_is_minor and (not petitioner_is_emancipated_minor)):
        % if next_friend_agrees_to_sign:
        /s/ ${ next_friends[0].name_full() }
        % else:
        ${ '' }
        % endif
        % endif
    - next_friend1_signature: |
        % if next_friend_agrees_to_sign:
        /s/ ${ next_friends[0].name_full() }
        % else:
        ${ '' }
        % endif
    - signature_date: ${ signature_date if next_friend_agrees_to_sign else "" }
    - signature_date_requestor: |
        % if petitioner_is_minor and (not petitioner_under_fourteen) and (not petitioner_is_emancipated_minor) and fourteen_plus_agrees_to_sign:
        ${ signature_date }
        % elif (is_incapacitated_adult or (petitioner_is_minor and petitioner_under_fourteen)) and next_friend_agrees_to_sign:
        ${ signature_date }
        % else:
        ${ '' }
        % endif
    - users1_name: ${ users[0].name_full() }
    - is_minor: ${ petitioner_is_minor }
    - is_incapacitated_adult: ${ is_incapacitated_adult }
---
attachments:
  name: Proof of Service
  filename: Proof of Service
  variable name: pet_proof_of_serv_domestic[i]
  skip undefined: True
  editable: False
  pdf template file: proof_of_service_domestic.pdf
  fields:
    - other_parties1_name: ${ other_parties[0].name_full() }
---
attachments:
  name: Proof of Service
  filename: Proof of Service
  variable name: pet_proof_of_serv_nondomestic[i]
  skip undefined: True
  editable: False
  pdf template file: proof_of_service_nondomestic.pdf
  fields:
    - other_parties1_name: ${ other_parties[0].name_full() }
---
attachments:
  name: Proof of Service
  filename: Proof of Service
  variable name: pet_proof_of_serv_nondomestic_sa[i]
  skip undefined: True
  editable: False
  pdf template file: proof_of_service_nondomestic_sa.pdf
  fields:
    - other_parties1_name: ${ other_parties[0].name_full() }
---
attachments:
  name: Proof of Service (Minor)
  filename: Proof of Service (Minor)
  variable name: pet_proof_of_serv_domestic_minor[i]
  skip undefined: True
  editable: False
  pdf template file: proof_of_service_domestic_minor.pdf
  fields:
    - other_parties1_name: ${ other_parties[0].name_full() }
---
attachments:
  name: Proof of Service (Minor)
  filename: Proof of Service (Minor)
  variable name: pet_proof_of_serv_nondomestic_minor[i]
  skip undefined: True
  editable: False
  pdf template file: proof_of_service_nondomestic_minor.pdf
  fields:
    - other_parties1_name: ${ other_parties[0].name_full() }
---
attachments:
  name: Proof of Service (Minor)
  filename: Proof of Service (Minor)
  variable name: pet_proof_of_serv_nondomestic_sa_minor[i]
  skip undefined: True
  editable: False
  pdf template file: proof_of_service_nondomestic_sa_minor.pdf
  fields:
    - other_parties1_name: ${ other_parties[0].name_full() }
---
attachments:
  name: Identifying Information
  filename: Identifying Information
  variable name: identifying_information[i]
  skip undefined: True
  editable: False
  pdf template file: identifying_information.pdf
  fields:
    - users1_name__1: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_address_block: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        Confidential
        % else:
        ${ users[0].address.line_one() }
        ${ users[0].address.line_two() }
        % endif
    - users1_phone_number: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        ${ '' }
        % else:
        ${ users[0].phone_number }
        % endif
    - other_parties1_address_block: |
        ${ other_parties[0].name_full() }
        ${ other_parties[0].address.line_one() }
        ${ other_parties[0].address.line_two() }
    - other_parties1_phone_number: |
        % if other_parties[0].no_phone_number:
        Unknown phone
        % else:
        ${ phone_number_formatted(other_parties[0].phone_number) }
        % endif
    - other_parties1_height: ${ other_parties[0].height }
    - other_parties1_weight: ${ other_parties[0].weight }
    - other_parties1_race: ${ other_parties[0].race }
    - other_parties1_gender: ${ other_parties[0].gender }
    - other_parties1_birthdate: |
        % if not knows_respondents_birthdate:
        ${ other_parties[0].estimated_age } est.
        % else:
        ${ other_parties[0].birthdate }
        % endif
    - other_parties1_hair_color: ${ other_parties[0].hair_color }
    - other_parties1_eye_color: ${ other_parties[0].eye_color }
    - other_parties1_other_identifying_info: ${ other_parties[0].other_identifying_info }
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
    - trial_court_phone_number: ${ the_court.phone }
---
attachments:
  name: Petition for Personal Protection Order (Domestic Relationship) - CC 375
  filename: Petition for Personal Protection Order (Domestic Relationship) - CC 375
  variable name: ppo_cc_375[i]
  skip undefined: True
  editable: False
  pdf template file: cc_375_petition_for_personal_protection_order_domestic.pdf
  fields:
    - users1_name__1: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_name__2: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_address_block: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        Confidential
        % else:
        ${ users[0].address.line_one() }
        ${ users[0].address.line_two() }
        % endif
    - users1_phone_number: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        ${ '' }
        % else:
        ${ users[0].phone_number }
        % endif
    - users1_age: ${ users[0].age_in_years() }
    - users1_signature: |
        % if (is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign:
        /s/ ${ next_friends[0].name_full() }
        % elif MLH_esign:
        /s/ ${ users[0].name_full() }
        % else:
        ${ '' }
        % endif
    - pursuant_to: |
        % if ((is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign) or MLH_esign:
        ${ MLH_esign_tag }
        % else:
        ${ '' }
        % endif
    - signature_date: |
        % if ((is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign) or MLH_esign:
        ${ signature_date }
        % else:
        ${ '' }
        % endif
    - other_parties1_address_block: |
        ${ other_parties[0].name_full() }
        ${ other_parties[0].address.line_one() }
        ${ other_parties[0].address.line_two() }
    - other_parties1_phone_number: |
        % if other_parties[0].no_phone_number:
        Unknown phone
        % else:
        ${ phone_number_formatted(other_parties[0].phone_number) }
        % endif
    - other_parties1_age: |
        % if not knows_respondents_birthdate:
        ${ other_parties[0].estimated_age } est.
        % else:
        ${ other_parties[0].age_in_years() }
        % endif
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
    - trial_court_phone_number: ${ the_court.phone }
    - other_properties1_address: |
        % if other_properties.there_are_any:
        ${ other_properties[0].on_one_line() }
        % endif
    - pending_actions1_docket_number: |
        % if pending_actions_between_parties_yes:
        ${ pending_actions[0].docket_number }
        % endif
    - pending_actions1_court_info_line: |
        % if pending_actions_between_parties_yes:
        ${ pending_actions[0].court_info_line }
        % endif
    - pending_actions1_court_name: |
        % if pending_actions_between_parties_yes:
        ${ pending_actions[0].court_name }
        % endif
    - pending_actions1_court_county: |
        % if pending_actions_between_parties_yes:
        ${ pending_actions[0].court_county }
        % endif
    - pending_actions1_court_state: |
        % if pending_actions_between_parties_yes:
        ${ pending_actions[0].court_state }
        % endif
    - pending_actions1_court_judge: |
        % if pending_actions_between_parties_yes:
        ${ pending_actions[0].court_judge }
        % endif
    - pending_actions_see_attached: |
        % if pending_actions_between_parties_yes:
        See attachment.
        % endif
    - orders_judgments1_docket_number: |
        % if orders_judgments_re_parties_yes:
        ${ orders_judgments[0].docket_number }
        % endif
    - orders_judgments1_court_info_line: |
        % if orders_judgments_re_parties_yes:
        ${ orders_judgments[0].court_info_line }
        % endif
    - orders_judgments1_court_name: |
        % if orders_judgments_re_parties_yes:
        ${ orders_judgments[0].court_name }
        % endif
    - orders_judgments1_court_county: |
        % if orders_judgments_re_parties_yes:
        ${ orders_judgments[0].court_county }
        % endif
    - orders_judgments1_court_state: |
        % if orders_judgments_re_parties_yes:
        ${ orders_judgments[0].court_state }
        % endif
    - orders_judgments1_court_judge: |
        % if orders_judgments_re_parties_yes:
        ${ orders_judgments[0].court_judge }
        % endif
    - orders_judgments_see_attached: |
        % if orders_judgments_re_parties_yes:
        See attachment.
        % endif
    - ppo_explanation_see_attached: |
        Please see attached "Statement of Facts".
    - ppo_harm_protectees_list: |
        % if len(ppo_harm_protectees_list.complete_elements()) > 1:
        See attached.
        % elif len(ppo_harm_protectees_list.complete_elements()) == 1:
        ${ comma_and_list(ppo_harm_protectees_list) }
        % else:
        ${ '' }
        % endif
    - ppo_threat_protectees_list: |
        % if len(ppo_threat_protectees_list.complete_elements()) > 1:
        See attached.
        % elif len(ppo_threat_protectees_list.complete_elements()) == 1:
        ${ comma_and_list(ppo_threat_protectees_list) }
        % else:
        ${ '' }
        % endif
    - petitioner_respondent_married: ${ petitioner_respondent_married }
    - petitioner_respondent_prev_married: ${ petitioner_respondent_prev_married }
    - petitioner_respondent_have_child: ${ petitioner_respondent_have_child }
    - petitioner_respondent_dating: ${ petitioner_respondent_dating }
    - petitioner_respondent_share_household: ${ petitioner_respondent_share_household }
    - respondent_carries_firearm_for_work_known: ${ respondent_carries_firearm_for_work_known }
    - respondent_carries_firearm_for_work_unknown: ${ respondent_carries_firearm_for_work_unknown }
    - pending_actions_between_parties_yes: ${ pending_actions_between_parties_yes }
    - pending_actions_between_parties_no: ${ pending_actions_between_parties_no }
    - orders_judgments_re_parties_yes: ${ orders_judgments_re_parties_yes }
    - orders_judgments_re_parties_no: ${ orders_judgments_re_parties_no }
    - wants_no_entering_residential_property: ${ no_entering_residential_property }
    - wants_no_entering_other_property: ${ wants_no_entering_other_property }
    - wants_no_harming_people: ${ wants_no_harming_people }
    - wants_no_removing_minor: ${ wants_no_removing_minor }
    - wants_no_stalking: ${ wants_no_stalking }
    - stalking_includes_following_appearing_in_sight: ${ stalking_includes_following_appearing_in_sight }
    - stalking_includes_sending_communications: ${ stalking_includes_sending_communications }
    - stalking_includes_approaching_confronting_in_public: ${ stalking_includes_approaching_confronting_in_public }
    - stalking_includes_being_on_petitioners_property: ${ stalking_includes_being_on_petitioners_property }
    - stalking_includes_leaving_object: ${ stalking_includes_leaving_object }
    - stalking_includes_appearing_at_petitioners_work: ${ stalking_includes_appearing_at_petitioners_work }
    - stalking_includes_phone_contact: ${ stalking_includes_phone_contact }
    - wants_no_children_property_removal_interference: ${ wants_no_children_property_removal_interference }
    - wants_no_threatening_others: ${ wants_no_threatening_others }
    - wants_no_work_education_interference: ${ wants_no_work_education_interference }
    - wants_no_access_to_personal_info_records: ${ wants_no_access_to_personal_info_records }
    - wants_no_intentional_mental_distress_or_control: ${ wants_no_intentional_mental_distress_or_control }
    - intentional_mental_distress_includes_animal_harm: ${ intentional_mental_distress_includes_animal_harm }
    - intentional_mental_distress_includes_removing_animal: ${ intentional_mental_distress_includes_removing_animal }
    - intentional_mental_distress_includes_retaining_animal: ${ intentional_mental_distress_includes_retaining_animal }
    - wants_no_firearm_purchase_or_possession: ${ wants_no_firearm_purchase_or_possession }
    - wants_other_request: ${ wants_other_request }
    - other_request_see_attached: |
        % if wants_other_request:
        Please see "Relief Requested" in Attachment.
        % endif
    - wants_ex_parte_order: ${ wants_ex_parte_order }
    - has_next_friend_petitioning: ${ has_next_friend_petitioning }
---
attachments:
  name: Petition for Personal Protection Order Against a Minor (Domestic Relationship) - CC 375m
  variable name: ppo_cc_375m[i]
  skip undefined: True
  editable: False
  pdf template file: cc_375m_petition_for_ppo_domestic_minor.pdf
  fields:
    - users1_name__1: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_name__2: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_address_block: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        Confidential
        % else:
        ${ users[0].address.line_one() }
        ${ users[0].address.line_two() }
        % endif
    - users1_phone: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        ${ '' }
        % else:
        ${ users[0].phone_number }
        % endif
    - users1_age: ${ users[0].age_in_years() }
    - users1_signature: |
        % if (is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign:
        /s/ ${ next_friends[0].name_full() }
        % elif MLH_esign:
        /s/ ${ users[0].name_full() }
        % else:
        ${ '' }
        % endif
    - pursuant_to: |
        % if ((is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign) or MLH_esign:
        ${ MLH_esign_tag }
        % else:
        ${ '' }
        % endif
    - signature_date: |
        % if ((is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign) or MLH_esign:
        ${ signature_date }
        % else:
        ${ '' }
        % endif
    - other_parties1_address_block: |
        ${ other_parties[0].name_full() }
        ${ other_parties[0].address.line_one() }
        ${ other_parties[0].address.line_two() }
    - other_parties1_phone: |
        % if other_parties[0].no_phone_number:
        Unknown phone
        % else:
        ${ phone_number_formatted(other_parties[0].phone_number) }
        % endif
    - other_parties1_age: |
        % if not knows_respondents_birthdate:
        ${ other_parties[0].estimated_age } est.
        % else:
        ${ other_parties[0].age_in_years() }
        % endif
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
    - trial_court_phone_number: ${ the_court.phone }
    - other_properties1_address: |
        % if other_properties.there_are_any:
        ${ other_properties[0].on_one_line() }
        % endif
    - pending_actions1_docket_number: |
        % if pending_actions_between_parties_yes:
        ${ pending_actions[0].docket_number }
        % endif
    - pending_actions1_court_info_line: |
        % if pending_actions_between_parties_yes:
        ${ pending_actions[0].court_info_line }
        % endif
    - pending_actions1_court_name: |
        % if pending_actions_between_parties_yes:
        ${ pending_actions[0].court_name }
        % endif
    - pending_actions1_court_county: |
        % if pending_actions_between_parties_yes:
        ${ pending_actions[0].court_county }
        % endif
    - pending_actions1_court_state: |
        % if pending_actions_between_parties_yes:
        ${ pending_actions[0].court_state }
        % endif
    - pending_actions1_court_judge: |
        % if pending_actions_between_parties_yes:
        ${ pending_actions[0].court_judge }
        % endif
    - pending_actions_see_attached: |
        % if pending_actions_between_parties_yes:
        See attachment.
        % endif
    - orders_judgments1_docket_number: |
        % if orders_judgments_re_parties_yes:
        ${ orders_judgments[0].docket_number }
        % endif
    - orders_judgments1_court_info_line: |
        % if orders_judgments_re_parties_yes:
        ${ orders_judgments[0].court_info_line }
        % endif
    - orders_judgments1_court_name: |
        % if orders_judgments_re_parties_yes:
        ${ orders_judgments[0].court_name }
        % endif
    - orders_judgments1_court_county: |
        % if orders_judgments_re_parties_yes:
        ${ orders_judgments[0].court_county }
        % endif
    - orders_judgments1_court_state: |
        % if orders_judgments_re_parties_yes:
        ${ orders_judgments[0].court_state }
        % endif
    - orders_judgments1_court_judge: |
        % if orders_judgments_re_parties_yes:
        ${ orders_judgments[0].court_judge }
        % endif
    - orders_judgments_see_attached: |
        % if orders_judgments_re_parties_yes:
        See attachment.
        % endif
    - ppo_explanation_see_attached: |
        Please see attached "Statement of Facts".
    - ppo_harm_protectees_list: |
        % if len(ppo_harm_protectees_list.complete_elements()) > 1:
        See attached.
        % elif len(ppo_harm_protectees_list.complete_elements()) == 1:
        ${ comma_and_list(ppo_harm_protectees_list) }
        % else:
        ${ '' }
        % endif
    - ppo_threat_protectees_list: |
        % if len(ppo_threat_protectees_list.complete_elements()) > 1:
        See attached.
        % elif len(ppo_threat_protectees_list.complete_elements()) == 1:
        ${ comma_and_list(ppo_threat_protectees_list) }
        % else:
        ${ '' }
        % endif
    - petitioner_respondent_have_child: ${ petitioner_respondent_have_child }
    - petitioner_respondent_dating: ${ petitioner_respondent_dating }
    - petitioner_respondent_share_household: ${ petitioner_respondent_share_household }
    - pending_actions_between_parties_yes: ${ pending_actions_between_parties_yes }
    - pending_actions_between_parties_no: ${ pending_actions_between_parties_no }
    - orders_judgments_re_parties_yes: ${ orders_judgments_re_parties_yes }
    - orders_judgments_re_parties_no: ${ orders_judgments_re_parties_no }
    - wants_no_entering_residential_property: ${ no_entering_residential_property }
    - wants_no_entering_other_property: ${ wants_no_entering_other_property }
    - wants_no_harming_people: ${ wants_no_harming_people }
    - wants_no_removing_minor: ${ wants_no_removing_minor }
    - wants_no_stalking: ${ wants_no_stalking }
    - stalking_includes_following_appearing_in_sight: ${ stalking_includes_following_appearing_in_sight }
    - stalking_includes_sending_communications: ${ stalking_includes_sending_communications }
    - stalking_includes_approaching_confronting_in_public: ${ stalking_includes_approaching_confronting_in_public }
    - stalking_includes_being_on_petitioners_property: ${ stalking_includes_being_on_petitioners_property }
    - stalking_includes_leaving_object: ${ stalking_includes_leaving_object }
    - stalking_includes_appearing_at_petitioners_work: ${ stalking_includes_appearing_at_petitioners_work }
    - stalking_includes_phone_contact: ${ stalking_includes_phone_contact }
    - wants_no_children_property_removal_interference: ${ wants_no_children_property_removal_interference }
    - wants_no_threatening_others: ${ wants_no_threatening_others }
    - wants_no_work_education_interference: ${ wants_no_work_education_interference }
    - wants_no_access_to_personal_info_records: ${ wants_no_access_to_personal_info_records }
    - wants_no_intentional_mental_distress_or_control: ${ wants_no_intentional_mental_distress_or_control }
    - intentional_mental_distress_includes_animal_harm: ${ intentional_mental_distress_includes_animal_harm }
    - intentional_mental_distress_includes_removing_animal: ${ intentional_mental_distress_includes_removing_animal }
    - intentional_mental_distress_includes_retaining_animal: ${ intentional_mental_distress_includes_retaining_animal }
    - wants_no_firearm_purchase_or_possession: ${ wants_no_firearm_purchase_or_possession }
    - wants_other_request: ${ wants_other_request }
    - other_request_see_attached: |
        % if wants_other_request:
        Please see "Relief Requested" in Attachment.
        % endif
    - wants_ex_parte_order: ${ wants_ex_parte_order }
    - has_next_friend_petitioning: ${ has_next_friend_petitioning }
---
attachments:
  name: Petition for Personal Protection Order (Domestic Relationship) Statement of Facts
  filename: Petition for Personal Protection Order (Domestic Relationship) Statement of Facts
  docx template file: cc_375_statement_of_facts.docx
  variable name: cc_375_statement[i]
  skip undefined: True
  valid formats:
    - pdf
---
attachments:
  name: Petition for Personal Protection Order (Domestic Relationship) Attachment
  filename: Petition for Personal Protection Order (Domestic Relationship) Attachment
  docx template file: cc_375_attachment.docx
  variable name: cc_375_attachment[i]
  skip undefined: True
  valid formats:
    - pdf
---
attachments:
  name: Petition for Personal Protection Order (Non-Domestic Relationship) Attachment
  filename: Petition for Personal Protection Order (Non-Domestic Relationship) Attachment
  docx template file: cc_377_attachment.docx
  variable name: cc_377_attachment[i]
  skip undefined: True
  valid formats:
    - pdf
---
attachments:
  name: Petition for Personal Protection Order (Non-Domestic Relationship) Statement of Facts
  filename: Petition for Personal Protection Order (Non-Domestic Relationship) Statement of Facts
  docx template file: cc_377_statement_of_facts.docx
  variable name: cc_377_statement[i]
  skip undefined: True
  valid formats:
    - pdf
---
attachments:
  name: Petition for Personal Protection Order (Non-Domestic Sexual Assault) Attachment
  filename: Petition for Personal Protection Order (Non-Domestic Sexual Assault) Attachment
  docx template file: cc_395_attachment.docx
  variable name: cc_395_attachment[i]
  skip undefined: True
  valid formats:
    - pdf
---
attachments:
  name: Petition for Personal Protection Order (Non-Domestic Sexual Assault) Statement of Facts
  filename: Petition for Personal Protection Order (Non-Domestic Sexual Assault) Statement of Facts
  docx template file: cc_395_statement_of_facts.docx
  variable name: cc_395_statement[i]
  skip undefined: True
  valid formats:
    - pdf
---
attachments:
  name: Instructions After Hearing
  filename: Instructions After Hearing
  docx template file: instructions_after_hearing.docx
  variable name: instructions_after_hearing[i]
  skip undefined: True
  valid formats:
    - pdf
---
attachments:
  name: Instructions After Hearing
  filename: Instructions After Hearing
  docx template file: oakland_county_instructions_after_hearing.docx
  variable name: oakland_county_instructions_after_hearing[i]
  skip undefined: True
  valid formats:
    - pdf
---
attachments:
  name: Ex Parte Instructions
  filename: Ex Parte Instructions
  docx template file: instructions_ex_parte.docx
  variable name: instructions_ex_parte[i]
  skip undefined: True
  valid formats:
    - pdf
---
attachments:
  name: Ex Parte Instructions
  filename: Ex Parte Instructions
  docx template file: oakland_county_instructions_ex_parte.docx
  variable name: oakland_county_instructions_ex_parte[i]
  skip undefined: True
  valid formats:
    - pdf
---
attachments:
  name: Cover Page
  filename: Cover Page
  docx template file: ppo_cover_page.docx
  variable name: etc_cover_page[i]
---
attachments:
  name: Personal Protection Order (Domestic Relationship) - CC 376
  filename: Personal Protection Order (Domestic Relationship) - CC 376
  variable name: ppo_cc_376[i]
  skip undefined: True
  editable: False
  pdf template file: cc_376_personal_protection_order_domestic.pdf
  fields:
    - wants_ex_parte_order: ${ wants_ex_parte_order }
    - users1_name__1: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_address_block: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        Confidential
        % else:
        ${ users[0].address.line_one() }
        ${ users[0].address.line_two() }
        % endif
    - users1_phone_number: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        ${ '' }
        % else:
        ${ users[0].phone_number }
        % endif
    - users1_age: ${ users[0].age }
    - other_parties1_name: ${ other_parties[0].name_full() }
    - other_parties1_name__1: ${ other_parties[0].name_full() }
    - other_parties1_name__2: ${ other_parties[0].name_full() }
    - other_parties1_name__3: ${ other_parties[0].name_full() }
    - other_parties1_name__4: ${ other_parties[0].name_full() }
    - other_parties1_name__5: ${ other_parties[0].name_full() }
    - other_parties1_address_block: |
        ${ other_parties[0].name_full() }
        ${ other_parties[0].address.block() }
    - other_parties1_phone_number: |
        % if other_parties[0].no_phone_number:
        Unknown phone
        % else:
        ${ phone_number_formatted(other_parties[0].phone_number) }
        % endif
    - other_parties1_birthdate: |
        % if knows_respondents_birthdate: 
        ${ other_parties[0].birthdate }
        % else:
        ${ other_parties[0].estimated_age } est.
        % endif
    - other_parties1_license_number: ${ other_parties[0].license_number }
    - other_parties1_height: ${ other_parties[0].height }
    - other_parties1_weight: ${ other_parties[0].weight }
    - other_parties1_race: ${ other_parties[0].race }
    - other_parties1_gender: ${ other_parties[0].gender }
    - other_parties1_hair_color: ${ other_parties[0].hair_color }
    - other_parties1_eye_color: ${ other_parties[0].eye_color }
    - other_parties1_other_identifying_info: ${ other_parties[0].other_identifying_info }
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
    - trial_court_phone_number: ${ the_court.phone }
---
attachments:
  name: Personal Protection Order Against Minor (Domestic Relationship) - CC 376M
  filename: Personal Protection Order Against Minor (Domestic Relationship) - CC 376M
  variable name: ppo_cc_376m[i]
  skip undefined: True
  editable: False
  pdf template file: cc_376m_personal_protection_order_against_minor_domestic.pdf
  fields:
    - wants_ex_parte_order: ${ wants_ex_parte_order }
    - users1_name__1: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_address_block: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        Confidential
        % else:
        ${ users[0].address.line_one() }
        ${ users[0].address.line_two() }
        % endif
    - users1_phone: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        ${ '' }
        % else:
        ${ users[0].phone_number }
        % endif
    - users1_age: ${ users[0].age }
    - other_parties1_name__1: ${ other_parties[0].name_full() }
    - other_parties1_name__2: ${ other_parties[0].name_full() }
    - other_parties1_name__3: ${ other_parties[0].name_full() }
    - other_parties1_name__4: ${ other_parties[0].name_full() }
    - other_parties1_name__5: ${ other_parties[0].name_full() }
    - other_parties1_address_block: |
        ${ other_parties[0].name_full() }
        ${ other_parties[0].address.line_one() }
        ${ other_parties[0].address.line_two() }
    - other_parties1_phone: |
        % if other_parties[0].no_phone_number:
        Unknown phone
        % else:
        ${ phone_number_formatted(other_parties[0].phone_number) }
        % endif
    - other_parties1_birthdate: |
        % if knows_respondents_birthdate: 
        ${ other_parties[0].birthdate }
        % else:
        ${ other_parties[0].estimated_age } est.
        % endif
    - other_parties1_license_number: ${ other_parties[0].license_number }
    - other_parties1_height: ${ other_parties[0].height }
    - other_parties1_weight: ${ other_parties[0].weight }
    - other_parties1_race: ${ other_parties[0].race }
    - other_parties1_gender: ${ other_parties[0].gender }
    - other_parties1_hair_color: ${ other_parties[0].hair_color }
    - other_parties1_eye_color: ${ other_parties[0].eye_color }
    - other_parties1_other_identifying_info: ${ other_parties[0].other_identifying_info }
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
    - trial_court_phone_number: ${ the_court.phone }
    - other_parties_parents1_name: ${ other_parties_parents[0].name_full() }
    - other_parties1_name: ${ other_parties[0].name_full() }
    - other_parties_parents1_address_block: |
        ${ other_parties_parents[0].address.line_one() }
        ${ other_parties_parents[0].address.line_two() }
    - other_parties_parents1_phone: |
        ${ phone_number_formatted(other_parties_parents[0].phone_number) }
    - other_parties_parents2_name: ${ other_parties_parents[1].name_full() }
    - other_parties_parents2_address_block: |
        ${ other_parties_parents[1].address.line_one() }
        ${ other_parties_parents[1].address.line_two() }
    - other_parties_parents2_phone: |
        ${ phone_number_formatted(other_parties_parents[1].phone_number) }
---
attachments:
  name: Personal Protection Order (Non-Domestic Relationship) - CC 380
  filename: Personal Protection Order (Non-Domestic Relationship) - CC 380
  variable name: ppo_cc_380[i]
  skip undefined: True
  editable: False
  pdf template file: cc_380_personal_protection_order_nondomestic.pdf
  fields:
    - wants_ex_parte_order: ${ wants_ex_parte_order }
    - users1_name: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_address_block: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        Confidential
        % else:
        ${ users[0].address.line_one() }
        ${ users[0].address.line_two() }
        % endif
    - users1_phone_number: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        ${ '' }
        % else:
        ${ users[0].phone_number }
        % endif
    - other_parties1_name: ${ other_parties[0].name_full() }
    - other_parties1_name__1: ${ other_parties[0].name_full() }
    - other_parties1_name__2: ${ other_parties[0].name_full() }
    - other_parties1_name__3: ${ other_parties[0].name_full() }
    - other_parties1_name__4: ${ other_parties[0].name_full() }
    - other_parties1_address_block: |
        ${ other_parties[0].address.line_one() }
        ${ other_parties[0].address.line_two() }
    - other_parties1_phone_number: |
        % if other_parties[0].no_phone_number:
        Unknown phone
        % else:
        ${ phone_number_formatted(other_parties[0].phone_number) }
        % endif
    - other_parties1_birthdate: |
        % if knows_respondents_birthdate: 
        ${ other_parties[0].birthdate }
        % else:
        ${ other_parties[0].estimated_age } est.
        % endif
    - other_parties1_license_number: ${ other_parties[0].license_number }
    - other_parties1_height: ${ other_parties[0].height }
    - other_parties1_weight: ${ other_parties[0].weight }
    - other_parties1_race: ${ other_parties[0].race }
    - other_parties1_gender: ${ other_parties[0].gender }
    - other_parties1_hair_color: ${ other_parties[0].hair_color }
    - other_parties1_eye_color: ${ other_parties[0].eye_color }
    - other_parties1_other_identifying_info: ${ other_parties[0].other_identifying_info }
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
    - trial_court_phone_number: ${ the_court.phone }
---
attachments:
  name: Personal Protection Order Against Minor (Non-Domestic Relationship) - CC 380M
  filename: Personal Protection Order Against Minor (Non-Domestic Relationship) - CC 380M
  variable name: ppo_cc_380m[i]
  skip undefined: True
  editable: False
  pdf template file: cc_380m_personal_protection_order_against_minor_nondomestic.pdf
  fields:
    - wants_ex_parte_order: ${ wants_ex_parte_order }
    - users1_name__1: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_address_block: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        Confidential
        % else:
        ${ users[0].address.line_one() }
        ${ users[0].address.line_two() }
        % endif
    - users1_phone_number: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        ${ '' }
        % else:
        ${ users[0].phone_number }
        % endif
    - other_parties1_name: ${ other_parties[0].name_full() }
    - other_parties1_name__1: ${ other_parties[0].name_full() }
    - other_parties1_name__2: ${ other_parties[0].name_full() }
    - other_parties1_name__3: ${ other_parties[0].name_full() }
    - other_parties1_name__4: ${ other_parties[0].name_full() }
    - other_parties1_address_block: |
        ${ other_parties[0].name_full() }
        ${ other_parties[0].address.line_one() }
        ${ other_parties[0].address.line_two() }
    - other_parties1_phone_number: |
        % if other_parties[0].no_phone_number:
        Unknown phone
        % else:
        ${ phone_number_formatted(other_parties[0].phone_number) }
        % endif
    - other_parties1_birthdate: |
        % if knows_respondents_birthdate: 
        ${ other_parties[0].birthdate }
        % else:
        ${ other_parties[0].estimated_age } est.
        % endif
    - other_parties1_license_number: ${ other_parties[0].license_number }
    - other_parties1_height: ${ other_parties[0].height }
    - other_parties1_weight: ${ other_parties[0].weight }
    - other_parties1_race: ${ other_parties[0].race }
    - other_parties1_gender: ${ other_parties[0].gender }
    - other_parties1_hair_color: ${ other_parties[0].hair_color }
    - other_parties1_eye_color: ${ other_parties[0].eye_color }
    - other_parties1_other_identifying_info: ${ other_parties[0].other_identifying_info }
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
    - trial_court_phone_number: ${ the_court.phone }
    - other_parties_parents1_name: ${ other_parties_parents[0].name_full() }
    - other_parties_parents1_address_block: |
        ${ other_parties_parents[0].address.line_one() }
        ${ other_parties_parents[0].address.line_two() }
    - other_parties_parents1_phone_number: |
        ${ phone_number_formatted(other_parties_parents[0].phone_number) }
    - other_parties_parents2_name: ${ other_parties_parents[1].name_full() }
    - other_parties_parents2_address_block: |
        ${ other_parties_parents[1].address.line_one() }
        ${ other_parties_parents[1].address.line_two() }
    - other_parties_parents2_phone_number: |
        ${ phone_number_formatted(other_parties_parents[1].phone_number) }
---
attachments:
  name: Petition for Personal Protection Order (Non-Domestic Sexual Assault) - CC 395
  filename: Petition for Personal Protection Order (Non-Domestic Sexual Assault) - CC 395
  variable name: ppo_cc_395[i]
  skip undefined: True
  editable: False
  pdf template file: cc_395_petition_for_personal_protection_order_nondomestic_sexual_assault.pdf
  fields:
    - users1_name__1: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_name__2: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_address_block: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        Confidential
        % else:
        ${ users[0].address.line_one() }
        ${ users[0].address.line_two() }
        % endif
    - users1_phone_number: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        ${ '' }
        % else:
        ${ (users[0].phone_number) }
        % endif
    - users1_age: ${ users[0].age_in_years() }
    - users1_signature: |
        % if (is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign:
        /s/ ${ next_friends[0].name_full() }
        % elif MLH_esign:
        /s/ ${ users[0].name_full() }
        % else:
        ${ '' }
        % endif
    - pursuant_to: |
        % if ((is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign) or MLH_esign:
        ${ MLH_esign_tag }
        % else:
        ${ '' }
        % endif
    - signature_date: |
        % if ((is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign) or MLH_esign:
        ${ signature_date }
        % else:
        ${ '' }
        % endif
    - other_parties1_address_block: |
        ${ other_parties[0].name_full() }
        ${ other_parties[0].address.line_one() }
        ${ other_parties[0].address.line_two() }
    - other_parties1_phone_number: |
        % if other_parties[0].no_phone_number:
        Unknown phone
        % else:
        ${ phone_number_formatted(other_parties[0].phone_number) }
        % endif
    - other_parties1_age: |
        % if not knows_respondents_birthdate:
        ${ other_parties[0].estimated_age } est.
        % else:
        ${ other_parties[0].age_in_years() }
        % endif
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
    - trial_court_phone_number: ${ the_court.phone }
    - other_properties1_address: |
        % if other_properties.there_are_any:
        ${ other_properties[0].on_one_line() }
        % endif
    - pending_actions_see_attached: |
        % if pending_actions_between_parties_yes:
        See attachment.
        % endif
    - orders_judgments_see_attached: |
        % if orders_judgments_re_parties_yes:
        See attachment.
        % endif
    - ppo_sexual_assault_threat_protectees_list: |
        % if len(ppo_sexual_assault_threat_protectees_list) > 1:
        See "Relief Requested" in Attachment.
        % elif len(ppo_sexual_assault_threat_protectees_list) == 1:
        ${ comma_and_list(ppo_sexual_assault_threat_protectees_list) }
        % else:
        ${ '' }
        % endif
    - respondent_carries_firearm_for_work_known: ${ respondent_carries_firearm_for_work_known }
    - respondent_carries_firearm_for_work_unknown: ${ respondent_carries_firearm_for_work_unknown }
    - pending_actions_between_parties_yes: ${ pending_actions_between_parties_yes }
    - pending_actions_between_parties_no: ${ pending_actions_between_parties_no }
    - orders_judgments_re_parties_yes: ${ orders_judgments_re_parties_yes }
    - orders_judgments_re_parties_no: ${ orders_judgments_re_parties_no }
    - wants_no_entering_residential_property: ${ no_entering_residential_property }
    - wants_no_entering_other_property: ${ wants_no_entering_other_property }
    - stalking_includes_following_appearing_in_sight: ${ stalking_includes_following_appearing_in_sight }
    - stalking_includes_sending_communications: ${ stalking_includes_sending_communications }
    - stalking_includes_approaching_confronting_in_public: ${ stalking_includes_approaching_confronting_in_public }
    - stalking_includes_leaving_object: ${ stalking_includes_leaving_object }
    - stalking_includes_appearing_at_petitioners_work: ${ stalking_includes_appearing_at_petitioners_work }
    - stalking_includes_phone_contact: ${ stalking_includes_phone_contact }
    - stalking_includes_being_on_petitioners_property: ${ stalking_includes_being_on_petitioners_property }
    - wants_no_children_property_removal_interference: ${ wants_no_children_property_removal_interference }
    - wants_no_work_education_interference: ${ wants_no_work_education_interference }
    - wants_no_firearm_purchase_or_possession: ${ wants_no_firearm_purchase_or_possession }
    - wants_no_message_posting: ${ wants_no_message_posting }
    - wants_other_request: ${ wants_other_request }
    - other_request_see_attached: |
        % if wants_other_request:
        Please see "Relief Requested" in Attachment.
        % endif
    - wants_ex_parte_order: ${ wants_ex_parte_order }
    - has_next_friend_petitioning: ${ has_next_friend_petitioning }
    - respondent_sexual_assault_conviction: ${ respondent_sexual_assault_conviction }
    - obscene_material_conviction: |
        % if not respondent_sexual_assault_conviction and petitioner_is_minor:
        ${ obscene_material_conviction }
        % endif
    - fears_future_sexual_assault: |
        % if not respondent_sexual_assault_conviction and (not petitioner_is_minor or not obscene_material_conviction):
        ${ fears_future_sexual_assault }
        % endif
    - potential_sexual_assault_see_attached: |
        % if not respondent_sexual_assault_conviction and (not petitioner_is_minor or not obscene_material_conviction) and fears_future_sexual_assault:
        Please see attached "Statement of Facts".
        % endif
    - obscene_material_provided: |
        % if not respondent_sexual_assault_conviction and not fears_future_sexual_assault and petitioner_is_minor and not obscene_material_conviction:
        ${ obscene_material_provided }
        % endif
    - obscene_material_see_attached: |
        % if not respondent_sexual_assault_conviction and not fears_future_sexual_assault and petitioner_is_minor and not obscene_material_conviction and obscene_material_provided:
        Please see attached "Statement of Facts".
        % endif
    - wants_no_sexual_assault_threatening_others: ${ wants_no_sexual_assault_threatening_others }
---
attachments:
  name: Petition for Personal Protection Order Against a Minor (Non-Domestic Sexual Assault) - CC 395m
  variable name: ppo_cc_395m[i]
  skip undefined: True
  editable: False
  pdf template file: cc_395m_petition_for_ppo_nondomestic_sexual_assault_minor.pdf
  fields:
    - users1_name__1: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_name__2: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_address_block: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        Confidential
        % else:
        ${ users[0].address.line_one() }
        ${ users[0].address.line_two() }
        % endif
    - users1_phone: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        ${ '' }
        % else:
        ${ users[0].phone_number }
        % endif
    - users1_age: ${ users[0].age_in_years() }
    - users1_signature: |
        % if (is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign:
        /s/ ${ next_friends[0].name_full() }
        % elif MLH_esign:
        /s/ ${ users[0].name_full() }
        % else:
        ${ '' }
        % endif
    - pursuant_to: |
        % if ((is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign) or MLH_esign:
        ${ MLH_esign_tag }
        % else:
        ${ '' }
        % endif
    - signature_date: |
        % if ((is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign) or MLH_esign:
        ${ signature_date }
        % else:
        ${ '' }
        % endif
    - other_parties1_address_block: |
        ${ other_parties[0].name_full() }
        ${ other_parties[0].address.line_one() }
        ${ other_parties[0].address.line_two() }
    - other_parties1_phone: |
        % if other_parties[0].no_phone_number:
        Unknown phone
        % else:
        ${ phone_number_formatted(other_parties[0].phone_number) }
        % endif
    - other_parties1_age: |
        % if not knows_respondents_birthdate:
        ${ other_parties[0].estimated_age } est.
        % else:
        ${ other_parties[0].age_in_years() }
        % endif
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
    - trial_court_phone_number: ${ the_court.phone }
    - other_properties1_address: |
        % if other_properties.there_are_any:
        ${ other_properties[0].on_one_line() }
        % endif
    - pending_actions_see_attached: |
        % if pending_actions_between_parties_yes:
        See attachment.
        % endif
    - orders_judgments_see_attached: |
        % if orders_judgments_re_parties_yes:
        See attachment.
        % endif
    - ppo_sexual_assault_threat_protectees_list: |
        % if len(ppo_sexual_assault_threat_protectees_list) > 1:
        See "Relief Requested" in Attachment.
        % elif len(ppo_sexual_assault_threat_protectees_list) == 1:
        ${ comma_and_list(ppo_sexual_assault_threat_protectees_list) }
        % else:
        ${ '' }
        % endif
    - pending_actions_between_parties_yes: ${ pending_actions_between_parties_yes }
    - pending_actions_between_parties_no: ${ pending_actions_between_parties_no }
    - orders_judgments_re_parties_yes: ${ orders_judgments_re_parties_yes }
    - orders_judgments_re_parties_no: ${ orders_judgments_re_parties_no }
    - wants_no_entering_residential_property: ${ no_entering_residential_property }
    - wants_no_entering_other_property: ${ wants_no_entering_other_property }
    - stalking_includes_following_appearing_in_sight: ${ stalking_includes_following_appearing_in_sight }
    - stalking_includes_sending_communications: ${ stalking_includes_sending_communications }
    - stalking_includes_approaching_confronting_in_public: ${ stalking_includes_approaching_confronting_in_public }
    - stalking_includes_leaving_object: ${ stalking_includes_leaving_object }
    - stalking_includes_appearing_at_petitioners_work: ${ stalking_includes_appearing_at_petitioners_work }
    - stalking_includes_phone_contact: ${ stalking_includes_phone_contact }
    - stalking_includes_being_on_petitioners_property: ${ stalking_includes_being_on_petitioners_property }
    - wants_no_children_property_removal_interference: ${ wants_no_children_property_removal_interference }
    - wants_no_work_education_interference: ${ wants_no_work_education_interference }
    - wants_no_firearm_purchase_or_possession: ${ wants_no_firearm_purchase_or_possession }
    - wants_no_message_posting: ${ wants_no_message_posting }
    - wants_other_request: ${ wants_other_request }
    - other_request_see_attached: |
        % if wants_other_request:
        Please see "Relief Requested" in Attachment.
        % endif
    - wants_ex_parte_order: ${ wants_ex_parte_order }
    - has_next_friend_petitioning: ${ has_next_friend_petitioning }
    - respondent_sexual_assault_conviction: ${ respondent_sexual_assault_conviction }
    - obscene_material_conviction: |
        % if not respondent_sexual_assault_conviction and petitioner_is_minor:
        ${ obscene_material_conviction }
        % endif
    - fears_future_sexual_assault: |
        % if not respondent_sexual_assault_conviction and (not petitioner_is_minor or not obscene_material_conviction):
        ${ fears_future_sexual_assault }
        % endif
    - potential_sexual_assault_see_attached: |
        % if not respondent_sexual_assault_conviction and (not petitioner_is_minor or not obscene_material_conviction) and fears_future_sexual_assault:
        Please see attached "Statement of Facts".
        % endif
    - obscene_material_provided: |
        % if not respondent_sexual_assault_conviction and not fears_future_sexual_assault and petitioner_is_minor and not obscene_material_conviction:
        ${ obscene_material_provided }
        % endif
    - obscene_material_see_attached: |
        % if not respondent_sexual_assault_conviction and not fears_future_sexual_assault and petitioner_is_minor and not obscene_material_conviction and obscene_material_provided:
        Please see attached "Statement of Facts".
        % endif
    - wants_no_sexual_assault_threatening_others: ${ wants_no_sexual_assault_threatening_others }
---
attachments:
  name: Personal Protection Order (Non-Domestic Sexual Assault) - CC 396
  filename: Personal Protection Order (Non-Domestic Sexual Assault) - CC 396
  variable name: ppo_cc_396[i]
  skip undefined: True
  editable: False
  pdf template file: cc_396_personal_protection_order_nondomestic_sexual_assault.pdf
  fields:
    - wants_ex_parte_order: ${ wants_ex_parte_order }
    - users1_name: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_address_block: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        Confidential
        % else:
        ${ users[0].address.line_one() }
        ${ users[0].address.line_two() }
        % endif
    - users1_phone_number: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        ${ '' }
        % else:
        ${ users[0].phone_number }
        % endif
    - other_parties1_name: ${ other_parties[0].name_full() }
    - other_parties1_name__1: ${ other_parties[0].name_full() }
    - other_parties1_name__2: ${ other_parties[0].name_full() }
    - other_parties1_address_block: |
        ${ other_parties[0].name_full() }
        ${ other_parties[0].address.line_one() }
        ${ other_parties[0].address.line_two() }
    - other_parties1_phone_number: |
        % if other_parties[0].no_phone_number:
        Unknown phone
        % else:
        ${ phone_number_formatted(other_parties[0].phone_number) }
        % endif
    - other_parties1_birthdate: |
        % if knows_respondents_birthdate: 
        ${ other_parties[0].birthdate }
        % else:
        ${ other_parties[0].estimated_age } est.
        % endif
    - other_parties1_license_number: ${ other_parties[0].license_number }
    - other_parties1_height: ${ other_parties[0].height }
    - other_parties1_weight: ${ other_parties[0].weight }
    - other_parties1_race: ${ other_parties[0].race }
    - other_parties1_gender: ${ other_parties[0].gender }
    - other_parties1_hair_color: ${ other_parties[0].hair_color }
    - other_parties1_eye_color: ${ other_parties[0].eye_color }
    - other_parties1_other_identifying_info: ${ other_parties[0].other_identifying_info }
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
    - trial_court_phone_number: ${ the_court.phone }
---
attachments:
  name: Personal Protection Order Against Minor (Non-Domestic Sexual Assault) - CC 396M
  filename: Personal Protection Order Against Minor (Non-Domestic Sexual Assault) - CC 396M
  variable name: ppo_cc_396m[i]
  skip undefined: True
  editable: False
  pdf template file: cc_396m_personal_protection_order_against_minor_nondomestic_sexual_assault.pdf
  fields:
    - wants_ex_parte_order: ${ wants_ex_parte_order }
    - users1_name__1: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_address_block: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        Confidential
        % else:
        ${ users[0].address.line_one() }
        ${ users[0].address.line_two() }
        % endif
    - users1_phone_number: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        ${ '' }
        % else:
        ${ users[0].phone_number }
        % endif
    - other_parties1_name: ${ other_parties[0].name_full() }
    - other_parties1_name__1: ${ other_parties[0].name_full() }
    - other_parties1_name__2: ${ other_parties[0].name_full() }
    - other_parties1_address_block: |
        ${ other_parties[0].name_full() }
        ${ other_parties[0].address.line_one() }
        ${ other_parties[0].address.line_two() }
    - other_parties1_phone_number: |
        % if other_parties[0].no_phone_number:
        Unknown phone
        % else:
        ${ phone_number_formatted(other_parties[0].phone_number) }
        % endif
    - other_parties1_birthdate: |
        % if knows_respondents_birthdate: 
        ${ other_parties[0].birthdate }
        % else:
        ${ other_parties[0].estimated_age } est.
        % endif
    - other_parties1_license_number: ${ other_parties[0].license_number }
    - other_parties1_height: ${ other_parties[0].height }
    - other_parties1_weight: ${ other_parties[0].weight }
    - other_parties1_race: ${ other_parties[0].race }
    - other_parties1_gender: ${ other_parties[0].gender }
    - other_parties1_hair_color: ${ other_parties[0].hair_color }
    - other_parties1_eye_color: ${ other_parties[0].eye_color }
    - other_parties1_other_identifying_info: ${ other_parties[0].other_identifying_info }
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
    - trial_court_phone_number: ${ the_court.phone }
    - other_parties_parents1_name: ${ other_parties_parents[0].name_full() }
    - other_parties_parents1_address_block: |
        ${ other_parties_parents[0].address.line_one() }
        ${ other_parties_parents[0].address.line_two() }
    - other_parties_parents1_phone_number: |
        ${ phone_number_formatted(other_parties_parents[0].phone_number) }
    - other_parties_parents2_name: ${ other_parties_parents[1].name_full() }
    - other_parties_parents2_address_block: |
        ${ other_parties_parents[1].address.line_one() }
        ${ other_parties_parents[1].address.line_two() }
    - other_parties_parents2_phone_number: |
        ${ phone_number_formatted(other_parties_parents[1].phone_number) }
---
attachments:
  name: Notice of Hearing
  filename: Notice of Hearing
  variable name: ppo_cc_381[i]
  skip undefined: True
  editable: False
  pdf template file: cc_381_notice_of_hearing.pdf
  fields:
    - users1_name: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - other_parties1_name__1: ${ other_parties[0].name }
    - other_parties1_name__2: ${ other_parties[0].name }
    - other_parties1_name__3: ${ other_parties[0].name }
    - other_parties1_address: |
        ${ other_parties[0].address.line_one() }
        ${ other_parties[0].address.line_two() }
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - trial_court_phone_number: ${ the_court.phone }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
---
attachments:
  name: Contact Information Sheet
  filename: Contact Information Sheet
  variable name: ppo_contact_information_sheet[i]
  skip undefined: True
  editable: False
  pdf template file: ppo_contact_information_sheet.pdf
  fields:
    - users1_name: ${ users[0].name_full() }
    - users1_address: ${ users[0].address.address }
    - users1_city_state_zip: |
        ${ users[0].address.city }, ${ users[0].address.state }, ${ users[0].address.zip }
    - users1_phone_number: ${ users[0].phone_number }
    - users1_email: ${ contact_email }
    - users1_signature: |
        % if (is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign:
        /s/ ${ next_friends[0].name_full() }
        % elif MLH_esign:
        /s/ ${ users[0].name_full() }
        % else:
        ${ '' }
        % endif
    - pursuant_to: |
        % if ((is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign) or MLH_esign:
        ${ MLH_esign_tag }
        % else:
        ${ '' }
        % endif
    - signature_date: |
        % if ((is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign) or MLH_esign:
        ${ signature_date }
        % else:
        ${ '' }
        % endif
    - wants_confidential_contact_details: ${ wants_confidential_contact_details }
---
attachments:
  name: Petition for Personal Protection Order (Non-Domestic Relationship) - CC 377
  filename: Petition for Personal Protection Order (Non-Domestic Relationship) - CC 377
  variable name: ppo_cc_377[i]
  skip undefined: True
  editable: False
  pdf template file: cc_377_petition_for_personal_protection_order_nondomestic.pdf
  fields:
    - users1_name__1: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_name__2: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_address_block: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        Confidential
        % else:
        ${ users[0].address.line_one() }
        ${ users[0].address.line_two() }
        % endif
    - users1_phone_number: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        ${ '' }
        % else:
        ${ users[0].phone_number }
        % endif
    - users1_age: ${ users[0].age_in_years() }
    - users1_signature: |
        % if (is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign:
        /s/ ${ next_friends[0].name_full() }
        % elif MLH_esign:
        /s/ ${ users[0].name_full() }
        % else:
        ${ '' }
        % endif
    - pursuant_to: |
        % if ((is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign) or MLH_esign:
        ${ MLH_esign_tag }
        % else:
        ${ '' }
        % endif
    - signature_date: |
        % if ((is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign) or MLH_esign:
        ${ signature_date }
        % else:
        ${ '' }
        % endif
    - other_parties1_address_block: |
        ${ other_parties[0].name_full() }
        ${ other_parties[0].address.line_one() }
        ${ other_parties[0].address.line_two() }
    - other_parties1_phone_number: |
        % if other_parties[0].no_phone_number:
        Unknown phone
        % else:
        ${ phone_number_formatted(other_parties[0].phone_number) }
        % endif
    - other_parties1_age: |
        % if not knows_respondents_birthdate:
        ${ other_parties[0].estimated_age } est.
        % else:
        ${ other_parties[0].age_in_years() }
        % endif
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - docket_number__1: ${ docket_number }
    - docket_number__2: ${ docket_number }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
    - trial_court_phone_number: ${ the_court.phone }
    - pending_actions_see_attached: |
        % if pending_actions_between_parties_yes:
        See attachment.
        % endif
    - orders_judgments_see_attached: |
        % if orders_judgments_re_parties_yes:
        See attachment.
        % endif
    - ppo_explanation_see_attached: |
        Please see attached "Statement of Facts".
    - respondent_carries_firearm_for_work_known: ${ respondent_carries_firearm_for_work_known }
    - respondent_carries_firearm_for_work_unknown: ${ respondent_carries_firearm_for_work_unknown }
    - pending_actions_between_parties_yes: ${ pending_actions_between_parties_yes }
    - pending_actions_between_parties_no: ${ pending_actions_between_parties_no }
    - orders_judgments_re_parties_yes: ${ orders_judgments_re_parties_yes }
    - orders_judgments_re_parties_no: ${ orders_judgments_re_parties_no }
    - wants_no_stalking: ${ wants_no_stalking }
    - stalking_includes_following_appearing_in_sight: ${ stalking_includes_following_appearing_in_sight }
    - stalking_includes_sending_communications: ${ stalking_includes_sending_communications }
    - stalking_includes_approaching_confronting_in_public: ${ stalking_includes_approaching_confronting_in_public }
    - stalking_includes_being_on_petitioners_property: ${ stalking_includes_being_on_petitioners_property }
    - stalking_includes_leaving_object: ${ stalking_includes_leaving_object }
    - stalking_includes_appearing_at_petitioners_work: ${ stalking_includes_appearing_at_petitioners_work }
    - stalking_includes_phone_contact: ${ stalking_includes_phone_contact }
    - wants_no_threatening_petitioner: ${ wants_no_threatening_petitioner }
    - wants_no_firearm_purchase_or_possession: ${ wants_no_firearm_purchase_or_possession }
    - wants_other_request: ${ wants_other_request }
    - other_request_see_attached: |
        % if wants_other_request:
        Please see "Relief Requested" in Attachment.
        % endif
    - wants_no_message_posting: ${ wants_no_message_posting }
    - wants_ex_parte_order: ${ wants_ex_parte_order }
    - has_next_friend_petitioning: ${ has_next_friend_petitioning }
---
attachments:
  name: Petition for Personal Protection Order Against a Minor (Non-Domestic Relationship) - CC 377m
  variable name: ppo_cc_377m[i]
  skip undefined: True
  editable: False
  pdf template file: cc_377m_petition_for_ppo_nondomestic_minor.pdf
  fields:
    - users1_name__1: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() } NFF ${ users[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_name__2: |
        % if is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor):
        ${ next_friends[0].name_full() }
        % else:
        ${ users[0].name_full() }
        % endif
    - users1_address_block: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        Confidential
        % else:
        ${ users[0].address.line_one() }
        ${ users[0].address.line_two() }
        % endif
    - users1_phone: |
        % if county_choice == "Oakland" and wants_confidential_contact_details:
        ${ '' }
        % else:
        ${ users[0].phone_number }
        % endif
    - users1_age: ${ users[0].age_in_years() }
    - users1_signature: |
        % if (is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign:
        /s/ ${ next_friends[0].name_full() }
        % elif MLH_esign:
        /s/ ${ users[0].name_full() }
        % else:
        ${ '' }
        % endif
    - pursuant_to: |
        % if ((is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign) or MLH_esign:
        ${ MLH_esign_tag }
        % else:
        ${ '' }
        % endif
    - signature_date: |
        % if ((is_incapacitated_adult or (petitioner_is_minor and not petitioner_is_emancipated_minor)) and next_friend_agrees_to_sign) or MLH_esign:
        ${ signature_date }
        % else:
        ${ '' }
        % endif
    - other_parties1_address_block: |
        ${ other_parties[0].name_full() }
        ${ other_parties[0].address.line_one() }
        ${ other_parties[0].address.line_two() }
    - other_parties1_phone: |
        % if other_parties[0].no_phone_number:
        Unknown phone
        % else:
        ${ phone_number_formatted(other_parties[0].phone_number) }
        % endif
    - other_parties1_age: |
        % if not knows_respondents_birthdate:
        ${ other_parties[0].estimated_age } est.
        % else:
        ${ other_parties[0].age_in_years() }
        % endif
    - trial_court: ${ the_court.number }
    - trial_court_county: ${ county_choice.upper() }
    - docket_number__1: ${ docket_number }
    - docket_number__2: ${ docket_number }
    - trial_court_address_on_one_line: ${ the_court.address.on_one_line() }
    - trial_court_phone_number: ${ the_court.phone }
    - pending_actions_see_attached: |
        % if pending_actions_between_parties_yes:
        See attachment.
        % endif
    - orders_judgments_see_attached: |
        % if orders_judgments_re_parties_yes:
        See attachment.
        % endif
    - ppo_explanation_see_attached: |
        Please see attached "Statement of Facts".
    - pending_actions_between_parties_yes: ${ pending_actions_between_parties_yes }
    - pending_actions_between_parties_no: ${ pending_actions_between_parties_no }
    - orders_judgments_re_parties_yes: ${ orders_judgments_re_parties_yes }
    - orders_judgments_re_parties_no: ${ orders_judgments_re_parties_no }
    - wants_no_stalking: ${ wants_no_stalking }
    - stalking_includes_following_appearing_in_sight: ${ stalking_includes_following_appearing_in_sight }
    - stalking_includes_sending_communications: ${ stalking_includes_sending_communications }
    - stalking_includes_approaching_confronting_in_public: ${ stalking_includes_approaching_confronting_in_public }
    - stalking_includes_being_on_petitioners_property: ${ stalking_includes_being_on_petitioners_property }
    - stalking_includes_leaving_object: ${ stalking_includes_leaving_object }
    - stalking_includes_appearing_at_petitioners_work: ${ stalking_includes_appearing_at_petitioners_work }
    - stalking_includes_phone_contact: ${ stalking_includes_phone_contact }
    - wants_no_threatening_petitioner: ${ wants_no_threatening_petitioner }
    - wants_no_firearm_purchase_or_possession: ${ wants_no_firearm_purchase_or_possession }
    - wants_other_request: ${ wants_other_request }
    - other_request_see_attached: |
        % if wants_other_request:
        Please see "Relief Requested" in Attachment.
        % endif
    - wants_no_message_posting: ${ wants_no_message_posting }
    - wants_ex_parte_order: ${ wants_ex_parte_order }
    - has_next_friend_petitioning: ${ has_next_friend_petitioning }
---
attachments:
  variable name: exhibit_attachment.table_of_contents
  docx template file: exhibit_attachment_table_of_contents.docx
  field code:
    exhibits: raw(exhibit_attachment.exhibits)
    include_exhibit_cover_pages: raw(exhibit_attachment.include_exhibit_cover_pages)
---
#################### Documents End #####################
---